
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00009764 memsz 0x00009764 flags r-x
    LOAD off    0x0000a784 vaddr 0x01009784 paddr 0x01009a68 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x0000ad4c vaddr 0x01009d4c paddr 0x01009d4c align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000092a8  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000298  010094ec  010094ec  0000a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  01009784  01009a68  0000a784  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  01009d4c  01009d4c  0000ad4c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  01009e74  01009e74  0000aa68  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000aa68  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b38  00000000  00000000  0000aa90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000124e6  00000000  00000000  0000b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005c9f  00000000  00000000  0001daae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000070b0  00000000  00000000  0002374d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001764  00000000  00000000  0002a800  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d92  00000000  00000000  0002bf64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dc10  00000000  00000000  0002ecf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003c908  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001180  00000000  00000000  0003c938  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003ffe2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003ffe5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ffe8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ffe9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003ffea  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003ffee  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003fff2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003fff6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003ffff  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00040008  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00040011  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000044  00000000  00000000  00040023  2**0
                  CONTENTS, READONLY
 29 .jdi          000058e3  00000000  00000000  00040067  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003cd9b  00000000  00000000  0004594a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
010094ec l    d  .rodata	00000000 .rodata
01009784 l    d  .rwdata	00000000 .rwdata
01009d4c l    d  .bss	00000000 .bss
01009e74 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
01009784 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01001674 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ecvtbuf.c
01001c28 l     F .text	000001e4 print_e
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 mprec.c
01009620 l     O .rodata	0000000c p05.2796
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
010039dc l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 alt_load.c
01007b68 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01009a40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
01007dac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
01007e60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01007f9c l     F .text	00000034 alt_dev_reg
01009864 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01008298 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0100838c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
010084e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01008514 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010088c8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01008a28 l     F .text	0000003c alt_get_errno
01008a64 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01009d70 g     O .bss	00000004 alt_instruction_exception_handler
01005048 g     F .text	0000001c _malloc_usable_size_r
0100357c g     F .text	00000068 _mprec_log10
0100363c g     F .text	00000070 __any_on
0100962c g     O .rodata	00000028 __mprec_tinytens
01007c54 g     F .text	0000006c alt_main
01003958 g     F .text	0000002c strcpy
010015c4 g     F .text	00000080 _puts_r
01009d74 g     O .bss	00000100 alt_irq
01009a68 g       *ABS*	00000000 __flash_rwdata_start
01006494 g     F .text	00000088 .hidden __eqdf2
01009e74 g       *ABS*	00000000 __alt_heap_start
01001578 g     F .text	0000004c printf
01001e0c g     F .text	0000016c fcvtbuf
01000a00 g     F .text	00000440 .hidden __divsf3
0100269c g     F .text	000000e4 _Balloc
01001270 g     F .text	00000070 .hidden __fixsfsi
01007cc0 g     F .text	0000003c alt_putstr
0100651c g     F .text	000000dc .hidden __gtdf2
01008ed4 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01007de8 g     F .text	00000078 times
01000020 g       *ABS*	00000000 __flash_exceptions_start
01009d54 g     O .bss	00000004 errno
01009d5c g     O .bss	00000004 alt_argv
01011a38 g       *ABS*	00000000 _gp
010098b8 g     O .rwdata	00000180 alt_fd_list
01008ef8 g     F .text	00000090 alt_find_dev
01004f1c g     F .text	00000028 memcpy
010078d4 g     F .text	000000dc .hidden __floatsidf
010089ac g     F .text	0000007c alt_io_redirect
010065f8 g     F .text	000000f4 .hidden __ltdf2
01001644 g     F .text	00000014 puts
010091e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
010034d8 g     F .text	000000a4 __ratio
01008118 g     F .text	000000ec altera_avalon_jtag_uart_read
01004ef4 g     F .text	00000014 malloc
0100153c g     F .text	0000003c _printf_r
0100515c g     F .text	00000064 .hidden __udivsi3
0100967c g     O .rodata	000000c8 __mprec_tens
010014fc g     F .text	00000040 gcvtf
01009154 g     F .text	00000090 alt_icache_flush
01002b40 g     F .text	0000003c __i2b
01003908 g     F .text	00000050 _sbrk_r
01009a54 g     O .rwdata	00000004 alt_max_fd
01007a58 g     F .text	00000110 .hidden __extendsfdf2
01005218 g     F .text	000008ac .hidden __adddf3
01003294 g     F .text	00000104 __b2d
01009a38 g     O .rwdata	00000004 _global_impure_ptr
01003864 g     F .text	000000a4 _realloc_r
01009e74 g       *ABS*	00000000 __bss_end
010087d8 g     F .text	000000f0 alt_iic_isr_register
01008dcc g     F .text	00000108 alt_tick
01009654 g     O .rodata	00000028 __mprec_bigtens
01002924 g     F .text	00000104 __s2b
010079b0 g     F .text	000000a8 .hidden __floatunsidf
01003070 g     F .text	0000005c __mcmp
0100878c g     F .text	0000004c alt_ic_irq_enabled
01008d30 g     F .text	0000009c alt_alarm_stop
01009d64 g     O .bss	00000004 alt_irq_active
01000000 g       *ABS*	00000000 __alt_mem_onchip_mem
010000fc g     F .exceptions	000000d4 alt_irq_handler
01009890 g     O .rwdata	00000028 alt_dev_null
010084a0 g     F .text	00000048 alt_dcache_flush_all
01002a28 g     F .text	00000068 __hi0bits
01007854 g     F .text	00000080 .hidden __fixdfsi
01009a68 g       *ABS*	00000000 __ram_rwdata_end
01009a4c g     O .rwdata	00000008 alt_dev_list
01007e9c g     F .text	00000100 write
01009784 g       *ABS*	00000000 __ram_rodata_end
010065f8 g     F .text	000000f4 .hidden __ledf2
01002df4 g     F .text	00000134 __pow5mult
010051c0 g     F .text	00000058 .hidden __umodsi3
01009e74 g       *ABS*	00000000 end
010001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
01b71b00 g       *ABS*	00000000 __alt_stack_pointer
01002378 g     F .text	0000026c _dcvt
01008310 g     F .text	0000007c alt_avalon_timer_sc_init
010012e0 g     F .text	00000064 .hidden __clzsi2
01008204 g     F .text	00000094 altera_avalon_jtag_uart_write
010016e0 g     F .text	0000052c ___vfprintf_internal_r
01004f64 g     F .text	000000e4 _free_r
01009328 g     F .text	00000190 __call_exitprocs
01000244 g     F .text	0000004c _start
01009d68 g     O .bss	00000004 _alt_tick_rate
01002080 g     F .text	000002f8 _gcvt
01002f28 g     F .text	00000148 __lshift
01009d6c g     O .bss	00000004 _alt_nticks
01008008 g     F .text	00000050 alt_sys_init
01002b7c g     F .text	00000278 __multiply
01001344 g     F .text	00000028 .hidden __mulsi3
01009784 g       *ABS*	00000000 __ram_rwdata_start
010094ec g       *ABS*	00000000 __ram_rodata_start
01003398 g     F .text	00000140 __d2b
01008058 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01009090 g     F .text	000000c4 alt_get_fd
01000290 g     F .text	000000b8 generateVector
010092f8 g     F .text	00000030 memcmp
01009e74 g       *ABS*	00000000 __alt_stack_base
01005ac4 g     F .text	000009d0 .hidden __divdf3
010035e4 g     F .text	00000058 __copybits
010066ec g     F .text	0000086c .hidden __muldf3
01008f88 g     F .text	00000108 alt_find_file
01008550 g     F .text	000000a4 alt_dev_llist_insert
01007cfc g     F .text	000000b0 sbrk
010036ac g     F .text	00000060 _calloc_r
010025e4 g     F .text	000000b8 __sfvwrite_small_dev
01009d4c g       *ABS*	00000000 __bss_start
01004f44 g     F .text	00000020 memset
0100043c g     F .text	000000fc main
0100136c g     F .text	00000024 fcvt
01009d60 g     O .bss	00000004 alt_envp
010080b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01001f78 g     F .text	00000108 ecvtbuf
01b71b00 g       *ABS*	00000000 __alt_heap_limit
01003bfc g     F .text	000012f8 _dtoa_r
0100370c g     F .text	00000158 _malloc_r
01009a58 g     O .rwdata	00000004 alt_errno
01001408 g     F .text	00000054 ecvtf
01005064 g     F .text	00000084 .hidden __divsi3
01000e40 g     F .text	00000430 .hidden __mulsf3
010094ec g       *ABS*	00000000 __flash_rodata_start
01006494 g     F .text	00000088 .hidden __nedf2
01007fd0 g     F .text	00000038 alt_irq_init
01008cac g     F .text	00000084 alt_release_fd
0100951c g     O .rodata	00000100 .hidden __clz_tab
01000348 g     F .text	000000f4 sumVector
01003984 g     F .text	00000058 _write_r
01009a3c g     O .rwdata	00000004 _impure_ptr
01009d58 g     O .bss	00000004 alt_argc
01000020 g       .exceptions	00000000 alt_irq_entry
01003240 g     F .text	00000054 __ulp
010013e4 g     F .text	00000024 ecvt
01009a44 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01008628 g     F .text	00000050 alt_ic_isr_register
01009a68 g       *ABS*	00000000 _edata
01009e74 g       *ABS*	00000000 _end
01000244 g       *ABS*	00000000 __ram_exceptions_end
01008700 g     F .text	0000008c alt_ic_irq_disable
01001390 g     F .text	00000054 fcvtf
01009280 g     F .text	00000020 exit
010030cc g     F .text	00000174 __mdiff
010050e8 g     F .text	00000074 .hidden __modsi3
01b71b00 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100145c g     F .text	000000a0 gcvt
010094b8 g     F .text	00000034 _exit
01001658 g     F .text	0000001c strlen
01008b50 g     F .text	0000015c open
0100651c g     F .text	000000dc .hidden __gedf2
01009d4c g     O .bss	00000004 __malloc_sbrk_start
010085f4 g     F .text	00000034 alt_icache_flush_all
010092a0 g     F .text	00000058 fputs
01009a5c g     O .rwdata	00000004 alt_priority_mask
01009d50 g     O .bss	00000004 __malloc_free_list
01008678 g     F .text	00000088 alt_ic_irq_enable
01001c0c g     F .text	0000001c __vfprintf_internal
01006f58 g     F .text	000008fc .hidden __subdf3
01002a90 g     F .text	000000b0 __lo0bits
01009a60 g     O .rwdata	00000008 alt_alarm_list
010083c8 g     F .text	000000d8 close
01000538 g     F .text	000004c8 .hidden __addsf3
01007bd0 g     F .text	00000084 alt_load
01004f08 g     F .text	00000014 free
010027f8 g     F .text	0000012c __multadd
01002780 g     F .text	00000078 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_data_end+0xff48e504>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000fc0 	call	10000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000706 	br	10000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1000098:	10001d00 	call	10001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100009c:	1000021e 	bne	r2,zero,10000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f8:	ef80083a 	eret

010000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000fc:	defff904 	addi	sp,sp,-28
 1000100:	dfc00615 	stw	ra,24(sp)
 1000104:	df000515 	stw	fp,20(sp)
 1000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000110:	0005313a 	rdctl	r2,ipending
 1000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000124:	00800044 	movi	r2,1
 1000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100012c:	e0fffb17 	ldw	r3,-20(fp)
 1000130:	e0bffc17 	ldw	r2,-16(fp)
 1000134:	1884703a 	and	r2,r3,r2
 1000138:	10001426 	beq	r2,zero,100018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100013c:	00804074 	movhi	r2,257
 1000140:	10a75d04 	addi	r2,r2,-25228
 1000144:	e0fffd17 	ldw	r3,-12(fp)
 1000148:	180690fa 	slli	r3,r3,3
 100014c:	10c5883a 	add	r2,r2,r3
 1000150:	10c00017 	ldw	r3,0(r2)
 1000154:	00804074 	movhi	r2,257
 1000158:	10a75d04 	addi	r2,r2,-25228
 100015c:	e13ffd17 	ldw	r4,-12(fp)
 1000160:	200890fa 	slli	r4,r4,3
 1000164:	1105883a 	add	r2,r2,r4
 1000168:	10800104 	addi	r2,r2,4
 100016c:	10800017 	ldw	r2,0(r2)
 1000170:	1009883a 	mov	r4,r2
 1000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100017c:	0005313a 	rdctl	r2,ipending
 1000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100018c:	e0bffc17 	ldw	r2,-16(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fe106 	br	100012c <__alt_data_end+0xff48e62c>

    active = alt_irq_pending ();
 10001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001ac:	e0bffb17 	ldw	r2,-20(fp)
 10001b0:	103fdb1e 	bne	r2,zero,1000120 <__alt_data_end+0xff48e620>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001b4:	0001883a 	nop
}
 10001b8:	0001883a 	nop
 10001bc:	e037883a 	mov	sp,fp
 10001c0:	dfc00117 	ldw	ra,4(sp)
 10001c4:	df000017 	ldw	fp,0(sp)
 10001c8:	dec00204 	addi	sp,sp,8
 10001cc:	f800283a 	ret

010001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10001d0:	defffb04 	addi	sp,sp,-20
 10001d4:	dfc00415 	stw	ra,16(sp)
 10001d8:	df000315 	stw	fp,12(sp)
 10001dc:	df000304 	addi	fp,sp,12
 10001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10001e4:	000531fa 	rdctl	r2,exception
 10001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10001ec:	e0bffd17 	ldw	r2,-12(fp)
 10001f0:	10801f0c 	andi	r2,r2,124
 10001f4:	1004d0ba 	srli	r2,r2,2
 10001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10001fc:	0005333a 	rdctl	r2,badaddr
 1000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000204:	d0a0ce17 	ldw	r2,-31944(gp)
 1000208:	10000726 	beq	r2,zero,1000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 100020c:	d0a0ce17 	ldw	r2,-31944(gp)
 1000210:	e0fffd17 	ldw	r3,-12(fp)
 1000214:	e1bffe17 	ldw	r6,-8(fp)
 1000218:	e17fff17 	ldw	r5,-4(fp)
 100021c:	1809883a 	mov	r4,r3
 1000220:	103ee83a 	callr	r2
 1000224:	00000206 	br	1000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 100022c:	0005883a 	mov	r2,zero
}
 1000230:	e037883a 	mov	sp,fp
 1000234:	dfc00117 	ldw	ra,4(sp)
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00204 	addi	sp,sp,8
 1000240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <__alt_data_end+0xff48e748>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c06df4 	movhi	sp,439
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec6c014 	ori	sp,sp,6912
    movhi gp, %hi(_gp)
 100025c:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 1000260:	d6868e14 	ori	gp,gp,6712
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 1000268:	10a75314 	ori	r2,r2,40268

    movhi r3, %hi(__bss_end)
 100026c:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 1000270:	18e79d14 	ori	r3,r3,40564

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <__alt_data_end+0xff48e778>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	1007bd00 	call	1007bd0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	1007c540 	call	1007c54 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <__alt_data_end+0xff48e78c>

01000290 <generateVector>:

//test 3
//#define step 1/1024.0
//#define N 261121

void generateVector(float x[N]){
 1000290:	defffb04 	addi	sp,sp,-20
 1000294:	dfc00415 	stw	ra,16(sp)
 1000298:	df000315 	stw	fp,12(sp)
 100029c:	dc000215 	stw	r16,8(sp)
 10002a0:	df000304 	addi	fp,sp,12
 10002a4:	e13ffe15 	stw	r4,-8(fp)
  int i;
  x[0] = 0;
 10002a8:	e0bffe17 	ldw	r2,-8(fp)
 10002ac:	10000015 	stw	zero,0(r2)
  for(i=1; i<N; i++){
 10002b0:	00800044 	movi	r2,1
 10002b4:	e0bffd15 	stw	r2,-12(fp)
 10002b8:	00001906 	br	1000320 <generateVector+0x90>
    x[i] = x[i-1] + step;
 10002bc:	e0bffd17 	ldw	r2,-12(fp)
 10002c0:	1085883a 	add	r2,r2,r2
 10002c4:	1085883a 	add	r2,r2,r2
 10002c8:	1007883a 	mov	r3,r2
 10002cc:	e0bffe17 	ldw	r2,-8(fp)
 10002d0:	10e1883a 	add	r16,r2,r3
 10002d4:	e0fffd17 	ldw	r3,-12(fp)
 10002d8:	00900034 	movhi	r2,16384
 10002dc:	10bfffc4 	addi	r2,r2,-1
 10002e0:	1885883a 	add	r2,r3,r2
 10002e4:	1085883a 	add	r2,r2,r2
 10002e8:	1085883a 	add	r2,r2,r2
 10002ec:	1007883a 	mov	r3,r2
 10002f0:	e0bffe17 	ldw	r2,-8(fp)
 10002f4:	10c5883a 	add	r2,r2,r3
 10002f8:	10c00017 	ldw	r3,0(r2)
 10002fc:	01502834 	movhi	r5,16544
 1000300:	1809883a 	mov	r4,r3
 1000304:	10005380 	call	1000538 <__addsf3>
 1000308:	1007883a 	mov	r3,r2
 100030c:	1805883a 	mov	r2,r3
 1000310:	80800015 	stw	r2,0(r16)
//#define N 261121

void generateVector(float x[N]){
  int i;
  x[0] = 0;
  for(i=1; i<N; i++){
 1000314:	e0bffd17 	ldw	r2,-12(fp)
 1000318:	10800044 	addi	r2,r2,1
 100031c:	e0bffd15 	stw	r2,-12(fp)
 1000320:	e0bffd17 	ldw	r2,-12(fp)
 1000324:	10800d10 	cmplti	r2,r2,52
 1000328:	103fe41e 	bne	r2,zero,10002bc <__alt_data_end+0xff48e7bc>
    x[i] = x[i-1] + step;
  }
}
 100032c:	0001883a 	nop
 1000330:	e6ffff04 	addi	sp,fp,-4
 1000334:	dfc00217 	ldw	ra,8(sp)
 1000338:	df000117 	ldw	fp,4(sp)
 100033c:	dc000017 	ldw	r16,0(sp)
 1000340:	dec00304 	addi	sp,sp,12
 1000344:	f800283a 	ret

01000348 <sumVector>:

float sumVector(float x[], int M){
 1000348:	defff904 	addi	sp,sp,-28
 100034c:	dfc00615 	stw	ra,24(sp)
 1000350:	df000515 	stw	fp,20(sp)
 1000354:	dc000415 	stw	r16,16(sp)
 1000358:	df000504 	addi	fp,sp,20
 100035c:	e13ffd15 	stw	r4,-12(fp)
 1000360:	e17ffe15 	stw	r5,-8(fp)
  int i;
  float sum = 0;
 1000364:	e03ffc15 	stw	zero,-16(fp)
  for(i=0; i<M; i++){
 1000368:	e03ffb15 	stw	zero,-20(fp)
 100036c:	00002706 	br	100040c <sumVector+0xc4>
    sum += x[i] + x[i] * x[i];
 1000370:	e0bffb17 	ldw	r2,-20(fp)
 1000374:	1085883a 	add	r2,r2,r2
 1000378:	1085883a 	add	r2,r2,r2
 100037c:	1007883a 	mov	r3,r2
 1000380:	e0bffd17 	ldw	r2,-12(fp)
 1000384:	10c5883a 	add	r2,r2,r3
 1000388:	14000017 	ldw	r16,0(r2)
 100038c:	e0bffb17 	ldw	r2,-20(fp)
 1000390:	1085883a 	add	r2,r2,r2
 1000394:	1085883a 	add	r2,r2,r2
 1000398:	1007883a 	mov	r3,r2
 100039c:	e0bffd17 	ldw	r2,-12(fp)
 10003a0:	10c5883a 	add	r2,r2,r3
 10003a4:	10c00017 	ldw	r3,0(r2)
 10003a8:	e0bffb17 	ldw	r2,-20(fp)
 10003ac:	1085883a 	add	r2,r2,r2
 10003b0:	1085883a 	add	r2,r2,r2
 10003b4:	1009883a 	mov	r4,r2
 10003b8:	e0bffd17 	ldw	r2,-12(fp)
 10003bc:	1105883a 	add	r2,r2,r4
 10003c0:	11000017 	ldw	r4,0(r2)
 10003c4:	200b883a 	mov	r5,r4
 10003c8:	1809883a 	mov	r4,r3
 10003cc:	1000e400 	call	1000e40 <__mulsf3>
 10003d0:	1007883a 	mov	r3,r2
 10003d4:	1805883a 	mov	r2,r3
 10003d8:	100b883a 	mov	r5,r2
 10003dc:	8009883a 	mov	r4,r16
 10003e0:	10005380 	call	1000538 <__addsf3>
 10003e4:	1007883a 	mov	r3,r2
 10003e8:	1805883a 	mov	r2,r3
 10003ec:	100b883a 	mov	r5,r2
 10003f0:	e13ffc17 	ldw	r4,-16(fp)
 10003f4:	10005380 	call	1000538 <__addsf3>
 10003f8:	1007883a 	mov	r3,r2
 10003fc:	e0fffc15 	stw	r3,-16(fp)
}

float sumVector(float x[], int M){
  int i;
  float sum = 0;
  for(i=0; i<M; i++){
 1000400:	e0bffb17 	ldw	r2,-20(fp)
 1000404:	10800044 	addi	r2,r2,1
 1000408:	e0bffb15 	stw	r2,-20(fp)
 100040c:	e0fffb17 	ldw	r3,-20(fp)
 1000410:	e0bffe17 	ldw	r2,-8(fp)
 1000414:	18bfd616 	blt	r3,r2,1000370 <__alt_data_end+0xff48e870>
    sum += x[i] + x[i] * x[i];
  }
  return sum;
 1000418:	e0bffc17 	ldw	r2,-16(fp)
 100041c:	1007883a 	mov	r3,r2
}
 1000420:	1805883a 	mov	r2,r3
 1000424:	e6ffff04 	addi	sp,fp,-4
 1000428:	dfc00217 	ldw	ra,8(sp)
 100042c:	df000117 	ldw	fp,4(sp)
 1000430:	dc000017 	ldw	r16,0(sp)
 1000434:	dec00304 	addi	sp,sp,12
 1000438:	f800283a 	ret

0100043c <main>:

int main()
{
 100043c:	deffb904 	addi	sp,sp,-284
 1000440:	dfc04615 	stw	ra,280(sp)
 1000444:	df004515 	stw	fp,276(sp)
 1000448:	df004504 	addi	fp,sp,276
  printf("Task 2!\n");
 100044c:	01004074 	movhi	r4,257
 1000450:	21253b04 	addi	r4,r4,-27412
 1000454:	10016440 	call	1001644 <puts>
  float x[N];
  float y;
  generateVector(x);
 1000458:	e0bfbf04 	addi	r2,fp,-260
 100045c:	1009883a 	mov	r4,r2
 1000460:	10002900 	call	1000290 <generateVector>
  char buf[50];
  clock_t exec_t1, exec_t2;
  exec_t1 = times(NULL);
 1000464:	0009883a 	mov	r4,zero
 1000468:	1007de80 	call	1007de8 <times>
 100046c:	e0bfbd15 	stw	r2,-268(fp)
  y=sumVector(x, N);
 1000470:	e0bfbf04 	addi	r2,fp,-260
 1000474:	01400d04 	movi	r5,52
 1000478:	1009883a 	mov	r4,r2
 100047c:	10003480 	call	1000348 <sumVector>
 1000480:	e0bfbb15 	stw	r2,-276(fp)
  exec_t2 = times(NULL);
 1000484:	0009883a 	mov	r4,zero
 1000488:	1007de80 	call	1007de8 <times>
 100048c:	e0bfbe15 	stw	r2,-264(fp)
  gcvt((exec_t2 - exec_t1), 10, buf);
 1000490:	e0ffbe17 	ldw	r3,-264(fp)
 1000494:	e0bfbd17 	ldw	r2,-268(fp)
 1000498:	1885c83a 	sub	r2,r3,r2
 100049c:	e0fff304 	addi	r3,fp,-52
 10004a0:	180d883a 	mov	r6,r3
 10004a4:	01400284 	movi	r5,10
 10004a8:	1009883a 	mov	r4,r2
 10004ac:	100145c0 	call	100145c <gcvt>
  alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");
 10004b0:	01004074 	movhi	r4,257
 10004b4:	21253d04 	addi	r4,r4,-27404
 10004b8:	1007cc00 	call	1007cc0 <alt_putstr>
 10004bc:	e0bff304 	addi	r2,fp,-52
 10004c0:	1009883a 	mov	r4,r2
 10004c4:	1007cc00 	call	1007cc0 <alt_putstr>
 10004c8:	01004074 	movhi	r4,257
 10004cc:	21254104 	addi	r4,r4,-27388
 10004d0:	1007cc00 	call	1007cc0 <alt_putstr>
  int i;
  for(i=0; i<10; i++)
 10004d4:	e03fbc15 	stw	zero,-272(fp)
 10004d8:	00000806 	br	10004fc <main+0xc0>
    y = y/2.0;
 10004dc:	01500034 	movhi	r5,16384
 10004e0:	e13fbb17 	ldw	r4,-276(fp)
 10004e4:	1000a000 	call	1000a00 <__divsf3>
 10004e8:	1007883a 	mov	r3,r2
 10004ec:	e0ffbb15 	stw	r3,-276(fp)
  y=sumVector(x, N);
  exec_t2 = times(NULL);
  gcvt((exec_t2 - exec_t1), 10, buf);
  alt_putstr(" proc time = "); alt_putstr(buf); alt_putstr(" ticks \n");
  int i;
  for(i=0; i<10; i++)
 10004f0:	e0bfbc17 	ldw	r2,-272(fp)
 10004f4:	10800044 	addi	r2,r2,1
 10004f8:	e0bfbc15 	stw	r2,-272(fp)
 10004fc:	e0bfbc17 	ldw	r2,-272(fp)
 1000500:	10800290 	cmplti	r2,r2,10
 1000504:	103ff51e 	bne	r2,zero,10004dc <__alt_data_end+0xff48e9dc>
    y = y/2.0;

  printf("Result: %d\n",(int)y);
 1000508:	e13fbb17 	ldw	r4,-276(fp)
 100050c:	10012700 	call	1001270 <__fixsfsi>
 1000510:	100b883a 	mov	r5,r2
 1000514:	01004074 	movhi	r4,257
 1000518:	21254404 	addi	r4,r4,-27376
 100051c:	10015780 	call	1001578 <printf>
  return 0;
 1000520:	0005883a 	mov	r2,zero
}
 1000524:	e037883a 	mov	sp,fp
 1000528:	dfc00117 	ldw	ra,4(sp)
 100052c:	df000017 	ldw	fp,0(sp)
 1000530:	dec00204 	addi	sp,sp,8
 1000534:	f800283a 	ret

01000538 <__addsf3>:
 1000538:	defffc04 	addi	sp,sp,-16
 100053c:	2004d7fa 	srli	r2,r4,31
 1000540:	280cd5fa 	srli	r6,r5,23
 1000544:	dc000015 	stw	r16,0(sp)
 1000548:	00c02034 	movhi	r3,128
 100054c:	2020d5fa 	srli	r16,r4,23
 1000550:	280ed7fa 	srli	r7,r5,31
 1000554:	18ffffc4 	addi	r3,r3,-1
 1000558:	dc400115 	stw	r17,4(sp)
 100055c:	1908703a 	and	r4,r3,r4
 1000560:	194a703a 	and	r5,r3,r5
 1000564:	dfc00315 	stw	ra,12(sp)
 1000568:	dc800215 	stw	r18,8(sp)
 100056c:	14403fcc 	andi	r17,r2,255
 1000570:	84003fcc 	andi	r16,r16,255
 1000574:	200890fa 	slli	r4,r4,3
 1000578:	31803fcc 	andi	r6,r6,255
 100057c:	280a90fa 	slli	r5,r5,3
 1000580:	89c05026 	beq	r17,r7,10006c4 <__addsf3+0x18c>
 1000584:	8185c83a 	sub	r2,r16,r6
 1000588:	00807a0e 	bge	zero,r2,1000774 <__addsf3+0x23c>
 100058c:	30001e1e 	bne	r6,zero,1000608 <__addsf3+0xd0>
 1000590:	28006d1e 	bne	r5,zero,1000748 <__addsf3+0x210>
 1000594:	208001cc 	andi	r2,r4,7
 1000598:	10000426 	beq	r2,zero,10005ac <__addsf3+0x74>
 100059c:	208003cc 	andi	r2,r4,15
 10005a0:	00c00104 	movi	r3,4
 10005a4:	10c00126 	beq	r2,r3,10005ac <__addsf3+0x74>
 10005a8:	20c9883a 	add	r4,r4,r3
 10005ac:	2081002c 	andhi	r2,r4,1024
 10005b0:	10003926 	beq	r2,zero,1000698 <__addsf3+0x160>
 10005b4:	84000044 	addi	r16,r16,1
 10005b8:	00803fc4 	movi	r2,255
 10005bc:	80807826 	beq	r16,r2,10007a0 <__addsf3+0x268>
 10005c0:	200891ba 	slli	r4,r4,6
 10005c4:	8805883a 	mov	r2,r17
 10005c8:	2008d27a 	srli	r4,r4,9
 10005cc:	84003fcc 	andi	r16,r16,255
 10005d0:	800695fa 	slli	r3,r16,23
 10005d4:	10803fcc 	andi	r2,r2,255
 10005d8:	04002034 	movhi	r16,128
 10005dc:	843fffc4 	addi	r16,r16,-1
 10005e0:	100497fa 	slli	r2,r2,31
 10005e4:	2408703a 	and	r4,r4,r16
 10005e8:	20e0b03a 	or	r16,r4,r3
 10005ec:	8084b03a 	or	r2,r16,r2
 10005f0:	dfc00317 	ldw	ra,12(sp)
 10005f4:	dc800217 	ldw	r18,8(sp)
 10005f8:	dc400117 	ldw	r17,4(sp)
 10005fc:	dc000017 	ldw	r16,0(sp)
 1000600:	dec00404 	addi	sp,sp,16
 1000604:	f800283a 	ret
 1000608:	00c03fc4 	movi	r3,255
 100060c:	80ffe126 	beq	r16,r3,1000594 <__alt_data_end+0xff48ea94>
 1000610:	29410034 	orhi	r5,r5,1024
 1000614:	00c006c4 	movi	r3,27
 1000618:	18807516 	blt	r3,r2,10007f0 <__addsf3+0x2b8>
 100061c:	00c00804 	movi	r3,32
 1000620:	1887c83a 	sub	r3,r3,r2
 1000624:	28c6983a 	sll	r3,r5,r3
 1000628:	288ad83a 	srl	r5,r5,r2
 100062c:	1804c03a 	cmpne	r2,r3,zero
 1000630:	288ab03a 	or	r5,r5,r2
 1000634:	2149c83a 	sub	r4,r4,r5
 1000638:	2081002c 	andhi	r2,r4,1024
 100063c:	10001426 	beq	r2,zero,1000690 <__addsf3+0x158>
 1000640:	04810034 	movhi	r18,1024
 1000644:	94bfffc4 	addi	r18,r18,-1
 1000648:	24a4703a 	and	r18,r4,r18
 100064c:	9009883a 	mov	r4,r18
 1000650:	10012e00 	call	10012e0 <__clzsi2>
 1000654:	10bffec4 	addi	r2,r2,-5
 1000658:	90a4983a 	sll	r18,r18,r2
 100065c:	14005416 	blt	r2,r16,10007b0 <__addsf3+0x278>
 1000660:	1405c83a 	sub	r2,r2,r16
 1000664:	11000044 	addi	r4,r2,1
 1000668:	00800804 	movi	r2,32
 100066c:	1105c83a 	sub	r2,r2,r4
 1000670:	9084983a 	sll	r2,r18,r2
 1000674:	9124d83a 	srl	r18,r18,r4
 1000678:	0021883a 	mov	r16,zero
 100067c:	1008c03a 	cmpne	r4,r2,zero
 1000680:	9108b03a 	or	r4,r18,r4
 1000684:	003fc306 	br	1000594 <__alt_data_end+0xff48ea94>
 1000688:	1000db26 	beq	r2,zero,10009f8 <__addsf3+0x4c0>
 100068c:	1009883a 	mov	r4,r2
 1000690:	208001cc 	andi	r2,r4,7
 1000694:	103fc11e 	bne	r2,zero,100059c <__alt_data_end+0xff48ea9c>
 1000698:	2006d0fa 	srli	r3,r4,3
 100069c:	01003fc4 	movi	r4,255
 10006a0:	8805883a 	mov	r2,r17
 10006a4:	8100241e 	bne	r16,r4,1000738 <__addsf3+0x200>
 10006a8:	18006e26 	beq	r3,zero,1000864 <__addsf3+0x32c>
 10006ac:	19001034 	orhi	r4,r3,64
 10006b0:	00c02034 	movhi	r3,128
 10006b4:	18ffffc4 	addi	r3,r3,-1
 10006b8:	043fffc4 	movi	r16,-1
 10006bc:	20c8703a 	and	r4,r4,r3
 10006c0:	003fc206 	br	10005cc <__alt_data_end+0xff48eacc>
 10006c4:	8187c83a 	sub	r3,r16,r6
 10006c8:	00c03e0e 	bge	zero,r3,10007c4 <__addsf3+0x28c>
 10006cc:	30002326 	beq	r6,zero,100075c <__addsf3+0x224>
 10006d0:	01803fc4 	movi	r6,255
 10006d4:	81bfaf26 	beq	r16,r6,1000594 <__alt_data_end+0xff48ea94>
 10006d8:	29410034 	orhi	r5,r5,1024
 10006dc:	018006c4 	movi	r6,27
 10006e0:	30c07416 	blt	r6,r3,10008b4 <__addsf3+0x37c>
 10006e4:	01800804 	movi	r6,32
 10006e8:	30cdc83a 	sub	r6,r6,r3
 10006ec:	298c983a 	sll	r6,r5,r6
 10006f0:	28cad83a 	srl	r5,r5,r3
 10006f4:	3006c03a 	cmpne	r3,r6,zero
 10006f8:	28cab03a 	or	r5,r5,r3
 10006fc:	2149883a 	add	r4,r4,r5
 1000700:	20c1002c 	andhi	r3,r4,1024
 1000704:	183fe226 	beq	r3,zero,1000690 <__alt_data_end+0xff48eb90>
 1000708:	84000044 	addi	r16,r16,1
 100070c:	00c03fc4 	movi	r3,255
 1000710:	80c05426 	beq	r16,r3,1000864 <__addsf3+0x32c>
 1000714:	00bf0034 	movhi	r2,64512
 1000718:	10bfffc4 	addi	r2,r2,-1
 100071c:	20c0004c 	andi	r3,r4,1
 1000720:	2088703a 	and	r4,r4,r2
 1000724:	2008d07a 	srli	r4,r4,1
 1000728:	20c8b03a 	or	r4,r4,r3
 100072c:	003f9906 	br	1000594 <__alt_data_end+0xff48ea94>
 1000730:	0007883a 	mov	r3,zero
 1000734:	0005883a 	mov	r2,zero
 1000738:	01002034 	movhi	r4,128
 100073c:	213fffc4 	addi	r4,r4,-1
 1000740:	1908703a 	and	r4,r3,r4
 1000744:	003fa106 	br	10005cc <__alt_data_end+0xff48eacc>
 1000748:	10bfffc4 	addi	r2,r2,-1
 100074c:	103fb926 	beq	r2,zero,1000634 <__alt_data_end+0xff48eb34>
 1000750:	00c03fc4 	movi	r3,255
 1000754:	80ffaf1e 	bne	r16,r3,1000614 <__alt_data_end+0xff48eb14>
 1000758:	003f8e06 	br	1000594 <__alt_data_end+0xff48ea94>
 100075c:	283f8d26 	beq	r5,zero,1000594 <__alt_data_end+0xff48ea94>
 1000760:	18ffffc4 	addi	r3,r3,-1
 1000764:	183fe526 	beq	r3,zero,10006fc <__alt_data_end+0xff48ebfc>
 1000768:	01803fc4 	movi	r6,255
 100076c:	81bfdb1e 	bne	r16,r6,10006dc <__alt_data_end+0xff48ebdc>
 1000770:	003f8806 	br	1000594 <__alt_data_end+0xff48ea94>
 1000774:	1000201e 	bne	r2,zero,10007f8 <__addsf3+0x2c0>
 1000778:	80800044 	addi	r2,r16,1
 100077c:	10803fcc 	andi	r2,r2,255
 1000780:	01800044 	movi	r6,1
 1000784:	3080450e 	bge	r6,r2,100089c <__addsf3+0x364>
 1000788:	2165c83a 	sub	r18,r4,r5
 100078c:	90c1002c 	andhi	r3,r18,1024
 1000790:	18002b26 	beq	r3,zero,1000840 <__addsf3+0x308>
 1000794:	2925c83a 	sub	r18,r5,r4
 1000798:	3823883a 	mov	r17,r7
 100079c:	003fab06 	br	100064c <__alt_data_end+0xff48eb4c>
 10007a0:	8805883a 	mov	r2,r17
 10007a4:	043fffc4 	movi	r16,-1
 10007a8:	0009883a 	mov	r4,zero
 10007ac:	003f8706 	br	10005cc <__alt_data_end+0xff48eacc>
 10007b0:	013f0034 	movhi	r4,64512
 10007b4:	213fffc4 	addi	r4,r4,-1
 10007b8:	80a1c83a 	sub	r16,r16,r2
 10007bc:	9108703a 	and	r4,r18,r4
 10007c0:	003f7406 	br	1000594 <__alt_data_end+0xff48ea94>
 10007c4:	1800411e 	bne	r3,zero,10008cc <__addsf3+0x394>
 10007c8:	80c00044 	addi	r3,r16,1
 10007cc:	19c03fcc 	andi	r7,r3,255
 10007d0:	01800044 	movi	r6,1
 10007d4:	31c0260e 	bge	r6,r7,1000870 <__addsf3+0x338>
 10007d8:	01803fc4 	movi	r6,255
 10007dc:	19802126 	beq	r3,r6,1000864 <__addsf3+0x32c>
 10007e0:	2149883a 	add	r4,r4,r5
 10007e4:	2008d07a 	srli	r4,r4,1
 10007e8:	1821883a 	mov	r16,r3
 10007ec:	003f6906 	br	1000594 <__alt_data_end+0xff48ea94>
 10007f0:	01400044 	movi	r5,1
 10007f4:	003f8f06 	br	1000634 <__alt_data_end+0xff48eb34>
 10007f8:	8000151e 	bne	r16,zero,1000850 <__addsf3+0x318>
 10007fc:	20002f26 	beq	r4,zero,10008bc <__addsf3+0x384>
 1000800:	0084303a 	nor	r2,zero,r2
 1000804:	10000a26 	beq	r2,zero,1000830 <__addsf3+0x2f8>
 1000808:	00c03fc4 	movi	r3,255
 100080c:	30c02b26 	beq	r6,r3,10008bc <__addsf3+0x384>
 1000810:	00c006c4 	movi	r3,27
 1000814:	18806d16 	blt	r3,r2,10009cc <__addsf3+0x494>
 1000818:	00c00804 	movi	r3,32
 100081c:	1887c83a 	sub	r3,r3,r2
 1000820:	20c6983a 	sll	r3,r4,r3
 1000824:	2084d83a 	srl	r2,r4,r2
 1000828:	1808c03a 	cmpne	r4,r3,zero
 100082c:	1108b03a 	or	r4,r2,r4
 1000830:	2909c83a 	sub	r4,r5,r4
 1000834:	3021883a 	mov	r16,r6
 1000838:	3823883a 	mov	r17,r7
 100083c:	003f7e06 	br	1000638 <__alt_data_end+0xff48eb38>
 1000840:	903f821e 	bne	r18,zero,100064c <__alt_data_end+0xff48eb4c>
 1000844:	0005883a 	mov	r2,zero
 1000848:	0021883a 	mov	r16,zero
 100084c:	003fba06 	br	1000738 <__alt_data_end+0xff48ec38>
 1000850:	00c03fc4 	movi	r3,255
 1000854:	30c01926 	beq	r6,r3,10008bc <__addsf3+0x384>
 1000858:	0085c83a 	sub	r2,zero,r2
 100085c:	21010034 	orhi	r4,r4,1024
 1000860:	003feb06 	br	1000810 <__alt_data_end+0xff48ed10>
 1000864:	043fffc4 	movi	r16,-1
 1000868:	0009883a 	mov	r4,zero
 100086c:	003f5706 	br	10005cc <__alt_data_end+0xff48eacc>
 1000870:	80004a1e 	bne	r16,zero,100099c <__addsf3+0x464>
 1000874:	20005926 	beq	r4,zero,10009dc <__addsf3+0x4a4>
 1000878:	283f4626 	beq	r5,zero,1000594 <__alt_data_end+0xff48ea94>
 100087c:	2149883a 	add	r4,r4,r5
 1000880:	2081002c 	andhi	r2,r4,1024
 1000884:	103f8226 	beq	r2,zero,1000690 <__alt_data_end+0xff48eb90>
 1000888:	00bf0034 	movhi	r2,64512
 100088c:	10bfffc4 	addi	r2,r2,-1
 1000890:	3021883a 	mov	r16,r6
 1000894:	2088703a 	and	r4,r4,r2
 1000898:	003f3e06 	br	1000594 <__alt_data_end+0xff48ea94>
 100089c:	8000121e 	bne	r16,zero,10008e8 <__addsf3+0x3b0>
 10008a0:	2000261e 	bne	r4,zero,100093c <__addsf3+0x404>
 10008a4:	283fa226 	beq	r5,zero,1000730 <__alt_data_end+0xff48ec30>
 10008a8:	2809883a 	mov	r4,r5
 10008ac:	3823883a 	mov	r17,r7
 10008b0:	003f3806 	br	1000594 <__alt_data_end+0xff48ea94>
 10008b4:	01400044 	movi	r5,1
 10008b8:	003f9006 	br	10006fc <__alt_data_end+0xff48ebfc>
 10008bc:	2809883a 	mov	r4,r5
 10008c0:	3021883a 	mov	r16,r6
 10008c4:	3823883a 	mov	r17,r7
 10008c8:	003f3206 	br	1000594 <__alt_data_end+0xff48ea94>
 10008cc:	80000c1e 	bne	r16,zero,1000900 <__addsf3+0x3c8>
 10008d0:	20002f26 	beq	r4,zero,1000990 <__addsf3+0x458>
 10008d4:	00c6303a 	nor	r3,zero,r3
 10008d8:	18002b1e 	bne	r3,zero,1000988 <__addsf3+0x450>
 10008dc:	2149883a 	add	r4,r4,r5
 10008e0:	3021883a 	mov	r16,r6
 10008e4:	003f8606 	br	1000700 <__alt_data_end+0xff48ec00>
 10008e8:	20001b1e 	bne	r4,zero,1000958 <__addsf3+0x420>
 10008ec:	28003926 	beq	r5,zero,10009d4 <__addsf3+0x49c>
 10008f0:	2809883a 	mov	r4,r5
 10008f4:	3823883a 	mov	r17,r7
 10008f8:	04003fc4 	movi	r16,255
 10008fc:	003f2506 	br	1000594 <__alt_data_end+0xff48ea94>
 1000900:	01c03fc4 	movi	r7,255
 1000904:	31c02226 	beq	r6,r7,1000990 <__addsf3+0x458>
 1000908:	00c7c83a 	sub	r3,zero,r3
 100090c:	21010034 	orhi	r4,r4,1024
 1000910:	01c006c4 	movi	r7,27
 1000914:	38c03616 	blt	r7,r3,10009f0 <__addsf3+0x4b8>
 1000918:	01c00804 	movi	r7,32
 100091c:	38cfc83a 	sub	r7,r7,r3
 1000920:	21ce983a 	sll	r7,r4,r7
 1000924:	20c6d83a 	srl	r3,r4,r3
 1000928:	3808c03a 	cmpne	r4,r7,zero
 100092c:	1906b03a 	or	r3,r3,r4
 1000930:	1949883a 	add	r4,r3,r5
 1000934:	3021883a 	mov	r16,r6
 1000938:	003f7106 	br	1000700 <__alt_data_end+0xff48ec00>
 100093c:	283f1526 	beq	r5,zero,1000594 <__alt_data_end+0xff48ea94>
 1000940:	2145c83a 	sub	r2,r4,r5
 1000944:	10c1002c 	andhi	r3,r2,1024
 1000948:	183f4f26 	beq	r3,zero,1000688 <__alt_data_end+0xff48eb88>
 100094c:	2909c83a 	sub	r4,r5,r4
 1000950:	3823883a 	mov	r17,r7
 1000954:	003f0f06 	br	1000594 <__alt_data_end+0xff48ea94>
 1000958:	28001a26 	beq	r5,zero,10009c4 <__addsf3+0x48c>
 100095c:	2008d0fa 	srli	r4,r4,3
 1000960:	2080102c 	andhi	r2,r4,64
 1000964:	10000526 	beq	r2,zero,100097c <__addsf3+0x444>
 1000968:	280ad0fa 	srli	r5,r5,3
 100096c:	2880102c 	andhi	r2,r5,64
 1000970:	1000021e 	bne	r2,zero,100097c <__addsf3+0x444>
 1000974:	2809883a 	mov	r4,r5
 1000978:	3823883a 	mov	r17,r7
 100097c:	200890fa 	slli	r4,r4,3
 1000980:	04003fc4 	movi	r16,255
 1000984:	003f0306 	br	1000594 <__alt_data_end+0xff48ea94>
 1000988:	01c03fc4 	movi	r7,255
 100098c:	31ffe01e 	bne	r6,r7,1000910 <__alt_data_end+0xff48ee10>
 1000990:	2809883a 	mov	r4,r5
 1000994:	3021883a 	mov	r16,r6
 1000998:	003efe06 	br	1000594 <__alt_data_end+0xff48ea94>
 100099c:	20001126 	beq	r4,zero,10009e4 <__addsf3+0x4ac>
 10009a0:	28000826 	beq	r5,zero,10009c4 <__addsf3+0x48c>
 10009a4:	2008d0fa 	srli	r4,r4,3
 10009a8:	2080102c 	andhi	r2,r4,64
 10009ac:	103ff326 	beq	r2,zero,100097c <__alt_data_end+0xff48ee7c>
 10009b0:	280ad0fa 	srli	r5,r5,3
 10009b4:	2880102c 	andhi	r2,r5,64
 10009b8:	103ff01e 	bne	r2,zero,100097c <__alt_data_end+0xff48ee7c>
 10009bc:	2809883a 	mov	r4,r5
 10009c0:	003fee06 	br	100097c <__alt_data_end+0xff48ee7c>
 10009c4:	04003fc4 	movi	r16,255
 10009c8:	003ef206 	br	1000594 <__alt_data_end+0xff48ea94>
 10009cc:	01000044 	movi	r4,1
 10009d0:	003f9706 	br	1000830 <__alt_data_end+0xff48ed30>
 10009d4:	0005883a 	mov	r2,zero
 10009d8:	003f3406 	br	10006ac <__alt_data_end+0xff48ebac>
 10009dc:	2809883a 	mov	r4,r5
 10009e0:	003eec06 	br	1000594 <__alt_data_end+0xff48ea94>
 10009e4:	2809883a 	mov	r4,r5
 10009e8:	04003fc4 	movi	r16,255
 10009ec:	003ee906 	br	1000594 <__alt_data_end+0xff48ea94>
 10009f0:	00c00044 	movi	r3,1
 10009f4:	003fce06 	br	1000930 <__alt_data_end+0xff48ee30>
 10009f8:	0005883a 	mov	r2,zero
 10009fc:	003f4e06 	br	1000738 <__alt_data_end+0xff48ec38>

01000a00 <__divsf3>:
 1000a00:	defff504 	addi	sp,sp,-44
 1000a04:	200cd5fa 	srli	r6,r4,23
 1000a08:	dcc00415 	stw	r19,16(sp)
 1000a0c:	2026d7fa 	srli	r19,r4,31
 1000a10:	00c02034 	movhi	r3,128
 1000a14:	dd800715 	stw	r22,28(sp)
 1000a18:	dd000515 	stw	r20,20(sp)
 1000a1c:	dc800315 	stw	r18,12(sp)
 1000a20:	18ffffc4 	addi	r3,r3,-1
 1000a24:	dfc00a15 	stw	ra,40(sp)
 1000a28:	df000915 	stw	fp,36(sp)
 1000a2c:	ddc00815 	stw	r23,32(sp)
 1000a30:	dd400615 	stw	r21,24(sp)
 1000a34:	dc400215 	stw	r17,8(sp)
 1000a38:	dc000115 	stw	r16,4(sp)
 1000a3c:	35003fcc 	andi	r20,r6,255
 1000a40:	1924703a 	and	r18,r3,r4
 1000a44:	9d803fcc 	andi	r22,r19,255
 1000a48:	a0005226 	beq	r20,zero,1000b94 <__divsf3+0x194>
 1000a4c:	00803fc4 	movi	r2,255
 1000a50:	a0802e26 	beq	r20,r2,1000b0c <__divsf3+0x10c>
 1000a54:	91002034 	orhi	r4,r18,128
 1000a58:	202490fa 	slli	r18,r4,3
 1000a5c:	a53fe044 	addi	r20,r20,-127
 1000a60:	0021883a 	mov	r16,zero
 1000a64:	002f883a 	mov	r23,zero
 1000a68:	280cd5fa 	srli	r6,r5,23
 1000a6c:	282ad7fa 	srli	r21,r5,31
 1000a70:	00c02034 	movhi	r3,128
 1000a74:	18ffffc4 	addi	r3,r3,-1
 1000a78:	31803fcc 	andi	r6,r6,255
 1000a7c:	1962703a 	and	r17,r3,r5
 1000a80:	af003fcc 	andi	fp,r21,255
 1000a84:	30004a26 	beq	r6,zero,1000bb0 <__divsf3+0x1b0>
 1000a88:	00803fc4 	movi	r2,255
 1000a8c:	30804526 	beq	r6,r2,1000ba4 <__divsf3+0x1a4>
 1000a90:	89402034 	orhi	r5,r17,128
 1000a94:	282290fa 	slli	r17,r5,3
 1000a98:	31bfe044 	addi	r6,r6,-127
 1000a9c:	000b883a 	mov	r5,zero
 1000aa0:	2c20b03a 	or	r16,r5,r16
 1000aa4:	802090ba 	slli	r16,r16,2
 1000aa8:	00804034 	movhi	r2,256
 1000aac:	1082b304 	addi	r2,r2,2764
 1000ab0:	80a1883a 	add	r16,r16,r2
 1000ab4:	81000017 	ldw	r4,0(r16)
 1000ab8:	9d46f03a 	xor	r3,r19,r21
 1000abc:	180f883a 	mov	r7,r3
 1000ac0:	18803fcc 	andi	r2,r3,255
 1000ac4:	a18dc83a 	sub	r6,r20,r6
 1000ac8:	2000683a 	jmp	r4
 1000acc:	01000cb0 	cmpltui	r4,zero,50
 1000ad0:	01000b34 	movhi	r4,44
 1000ad4:	01000ca4 	muli	r4,zero,50
 1000ad8:	01000b20 	cmpeqi	r4,zero,44
 1000adc:	01000ca4 	muli	r4,zero,50
 1000ae0:	01000c7c 	xorhi	r4,zero,49
 1000ae4:	01000ca4 	muli	r4,zero,50
 1000ae8:	01000b20 	cmpeqi	r4,zero,44
 1000aec:	01000b34 	movhi	r4,44
 1000af0:	01000b34 	movhi	r4,44
 1000af4:	01000c7c 	xorhi	r4,zero,49
 1000af8:	01000b20 	cmpeqi	r4,zero,44
 1000afc:	01000d90 	cmplti	r4,zero,54
 1000b00:	01000d90 	cmplti	r4,zero,54
 1000b04:	01000d90 	cmplti	r4,zero,54
 1000b08:	01000d44 	movi	r4,53
 1000b0c:	9000581e 	bne	r18,zero,1000c70 <__divsf3+0x270>
 1000b10:	04000204 	movi	r16,8
 1000b14:	05c00084 	movi	r23,2
 1000b18:	003fd306 	br	1000a68 <__alt_data_end+0xff48ef68>
 1000b1c:	0023883a 	mov	r17,zero
 1000b20:	e02d883a 	mov	r22,fp
 1000b24:	282f883a 	mov	r23,r5
 1000b28:	00800084 	movi	r2,2
 1000b2c:	b8808f1e 	bne	r23,r2,1000d6c <__divsf3+0x36c>
 1000b30:	b005883a 	mov	r2,r22
 1000b34:	11c0004c 	andi	r7,r2,1
 1000b38:	013fffc4 	movi	r4,-1
 1000b3c:	000d883a 	mov	r6,zero
 1000b40:	21003fcc 	andi	r4,r4,255
 1000b44:	200895fa 	slli	r4,r4,23
 1000b48:	38803fcc 	andi	r2,r7,255
 1000b4c:	00c02034 	movhi	r3,128
 1000b50:	100497fa 	slli	r2,r2,31
 1000b54:	18ffffc4 	addi	r3,r3,-1
 1000b58:	30c6703a 	and	r3,r6,r3
 1000b5c:	1906b03a 	or	r3,r3,r4
 1000b60:	1884b03a 	or	r2,r3,r2
 1000b64:	dfc00a17 	ldw	ra,40(sp)
 1000b68:	df000917 	ldw	fp,36(sp)
 1000b6c:	ddc00817 	ldw	r23,32(sp)
 1000b70:	dd800717 	ldw	r22,28(sp)
 1000b74:	dd400617 	ldw	r21,24(sp)
 1000b78:	dd000517 	ldw	r20,20(sp)
 1000b7c:	dcc00417 	ldw	r19,16(sp)
 1000b80:	dc800317 	ldw	r18,12(sp)
 1000b84:	dc400217 	ldw	r17,8(sp)
 1000b88:	dc000117 	ldw	r16,4(sp)
 1000b8c:	dec00b04 	addi	sp,sp,44
 1000b90:	f800283a 	ret
 1000b94:	90002b1e 	bne	r18,zero,1000c44 <__divsf3+0x244>
 1000b98:	04000104 	movi	r16,4
 1000b9c:	05c00044 	movi	r23,1
 1000ba0:	003fb106 	br	1000a68 <__alt_data_end+0xff48ef68>
 1000ba4:	8800251e 	bne	r17,zero,1000c3c <__divsf3+0x23c>
 1000ba8:	01400084 	movi	r5,2
 1000bac:	00000206 	br	1000bb8 <__divsf3+0x1b8>
 1000bb0:	88001a1e 	bne	r17,zero,1000c1c <__divsf3+0x21c>
 1000bb4:	01400044 	movi	r5,1
 1000bb8:	8160b03a 	or	r16,r16,r5
 1000bbc:	802090ba 	slli	r16,r16,2
 1000bc0:	00c04034 	movhi	r3,256
 1000bc4:	18c2f704 	addi	r3,r3,3036
 1000bc8:	80e1883a 	add	r16,r16,r3
 1000bcc:	80c00017 	ldw	r3,0(r16)
 1000bd0:	9d44f03a 	xor	r2,r19,r21
 1000bd4:	a18dc83a 	sub	r6,r20,r6
 1000bd8:	1800683a 	jmp	r3
 1000bdc:	01000b34 	movhi	r4,44
 1000be0:	01000b34 	movhi	r4,44
 1000be4:	01000d80 	call	1000d8 <__alt_mem_onchip_mem-0xefff28>
 1000be8:	01000b1c 	xori	r4,zero,44
 1000bec:	01000d80 	call	1000d8 <__alt_mem_onchip_mem-0xefff28>
 1000bf0:	01000c7c 	xorhi	r4,zero,49
 1000bf4:	01000d80 	call	1000d8 <__alt_mem_onchip_mem-0xefff28>
 1000bf8:	01000b1c 	xori	r4,zero,44
 1000bfc:	01000b34 	movhi	r4,44
 1000c00:	01000b34 	movhi	r4,44
 1000c04:	01000c7c 	xorhi	r4,zero,49
 1000c08:	01000b1c 	xori	r4,zero,44
 1000c0c:	01000d90 	cmplti	r4,zero,54
 1000c10:	01000d90 	cmplti	r4,zero,54
 1000c14:	01000d90 	cmplti	r4,zero,54
 1000c18:	01000da8 	cmpgeui	r4,zero,54
 1000c1c:	8809883a 	mov	r4,r17
 1000c20:	10012e00 	call	10012e0 <__clzsi2>
 1000c24:	10fffec4 	addi	r3,r2,-5
 1000c28:	10801d84 	addi	r2,r2,118
 1000c2c:	88e2983a 	sll	r17,r17,r3
 1000c30:	008dc83a 	sub	r6,zero,r2
 1000c34:	000b883a 	mov	r5,zero
 1000c38:	003f9906 	br	1000aa0 <__alt_data_end+0xff48efa0>
 1000c3c:	014000c4 	movi	r5,3
 1000c40:	003f9706 	br	1000aa0 <__alt_data_end+0xff48efa0>
 1000c44:	9009883a 	mov	r4,r18
 1000c48:	d9400015 	stw	r5,0(sp)
 1000c4c:	10012e00 	call	10012e0 <__clzsi2>
 1000c50:	10fffec4 	addi	r3,r2,-5
 1000c54:	11801d84 	addi	r6,r2,118
 1000c58:	90e4983a 	sll	r18,r18,r3
 1000c5c:	01a9c83a 	sub	r20,zero,r6
 1000c60:	0021883a 	mov	r16,zero
 1000c64:	002f883a 	mov	r23,zero
 1000c68:	d9400017 	ldw	r5,0(sp)
 1000c6c:	003f7e06 	br	1000a68 <__alt_data_end+0xff48ef68>
 1000c70:	04000304 	movi	r16,12
 1000c74:	05c000c4 	movi	r23,3
 1000c78:	003f7b06 	br	1000a68 <__alt_data_end+0xff48ef68>
 1000c7c:	01802034 	movhi	r6,128
 1000c80:	000f883a 	mov	r7,zero
 1000c84:	31bfffc4 	addi	r6,r6,-1
 1000c88:	013fffc4 	movi	r4,-1
 1000c8c:	003fac06 	br	1000b40 <__alt_data_end+0xff48f040>
 1000c90:	01400044 	movi	r5,1
 1000c94:	2909c83a 	sub	r4,r5,r4
 1000c98:	00c006c4 	movi	r3,27
 1000c9c:	19004b0e 	bge	r3,r4,1000dcc <__divsf3+0x3cc>
 1000ca0:	114e703a 	and	r7,r2,r5
 1000ca4:	0009883a 	mov	r4,zero
 1000ca8:	000d883a 	mov	r6,zero
 1000cac:	003fa406 	br	1000b40 <__alt_data_end+0xff48f040>
 1000cb0:	9006917a 	slli	r3,r18,5
 1000cb4:	8822917a 	slli	r17,r17,5
 1000cb8:	1c40372e 	bgeu	r3,r17,1000d98 <__divsf3+0x398>
 1000cbc:	31bfffc4 	addi	r6,r6,-1
 1000cc0:	010006c4 	movi	r4,27
 1000cc4:	000b883a 	mov	r5,zero
 1000cc8:	180f883a 	mov	r7,r3
 1000ccc:	294b883a 	add	r5,r5,r5
 1000cd0:	18c7883a 	add	r3,r3,r3
 1000cd4:	38000116 	blt	r7,zero,1000cdc <__divsf3+0x2dc>
 1000cd8:	1c400236 	bltu	r3,r17,1000ce4 <__divsf3+0x2e4>
 1000cdc:	1c47c83a 	sub	r3,r3,r17
 1000ce0:	29400054 	ori	r5,r5,1
 1000ce4:	213fffc4 	addi	r4,r4,-1
 1000ce8:	203ff71e 	bne	r4,zero,1000cc8 <__alt_data_end+0xff48f1c8>
 1000cec:	1806c03a 	cmpne	r3,r3,zero
 1000cf0:	1962b03a 	or	r17,r3,r5
 1000cf4:	31001fc4 	addi	r4,r6,127
 1000cf8:	013fe50e 	bge	zero,r4,1000c90 <__alt_data_end+0xff48f190>
 1000cfc:	88c001cc 	andi	r3,r17,7
 1000d00:	18000426 	beq	r3,zero,1000d14 <__divsf3+0x314>
 1000d04:	88c003cc 	andi	r3,r17,15
 1000d08:	01400104 	movi	r5,4
 1000d0c:	19400126 	beq	r3,r5,1000d14 <__divsf3+0x314>
 1000d10:	8963883a 	add	r17,r17,r5
 1000d14:	88c2002c 	andhi	r3,r17,2048
 1000d18:	18000426 	beq	r3,zero,1000d2c <__divsf3+0x32c>
 1000d1c:	00fe0034 	movhi	r3,63488
 1000d20:	18ffffc4 	addi	r3,r3,-1
 1000d24:	31002004 	addi	r4,r6,128
 1000d28:	88e2703a 	and	r17,r17,r3
 1000d2c:	00c03f84 	movi	r3,254
 1000d30:	193f8016 	blt	r3,r4,1000b34 <__alt_data_end+0xff48f034>
 1000d34:	880c91ba 	slli	r6,r17,6
 1000d38:	11c0004c 	andi	r7,r2,1
 1000d3c:	300cd27a 	srli	r6,r6,9
 1000d40:	003f7f06 	br	1000b40 <__alt_data_end+0xff48f040>
 1000d44:	9080102c 	andhi	r2,r18,64
 1000d48:	10000226 	beq	r2,zero,1000d54 <__divsf3+0x354>
 1000d4c:	8880102c 	andhi	r2,r17,64
 1000d50:	10001826 	beq	r2,zero,1000db4 <__divsf3+0x3b4>
 1000d54:	00802034 	movhi	r2,128
 1000d58:	91801034 	orhi	r6,r18,64
 1000d5c:	10bfffc4 	addi	r2,r2,-1
 1000d60:	980f883a 	mov	r7,r19
 1000d64:	308c703a 	and	r6,r6,r2
 1000d68:	003fc706 	br	1000c88 <__alt_data_end+0xff48f188>
 1000d6c:	008000c4 	movi	r2,3
 1000d70:	b8802d26 	beq	r23,r2,1000e28 <__divsf3+0x428>
 1000d74:	00c00044 	movi	r3,1
 1000d78:	b005883a 	mov	r2,r22
 1000d7c:	b8ffdd1e 	bne	r23,r3,1000cf4 <__alt_data_end+0xff48f1f4>
 1000d80:	11c0004c 	andi	r7,r2,1
 1000d84:	0009883a 	mov	r4,zero
 1000d88:	000d883a 	mov	r6,zero
 1000d8c:	003f6c06 	br	1000b40 <__alt_data_end+0xff48f040>
 1000d90:	9023883a 	mov	r17,r18
 1000d94:	003f6406 	br	1000b28 <__alt_data_end+0xff48f028>
 1000d98:	1c47c83a 	sub	r3,r3,r17
 1000d9c:	01000684 	movi	r4,26
 1000da0:	01400044 	movi	r5,1
 1000da4:	003fc806 	br	1000cc8 <__alt_data_end+0xff48f1c8>
 1000da8:	9080102c 	andhi	r2,r18,64
 1000dac:	103fe926 	beq	r2,zero,1000d54 <__alt_data_end+0xff48f254>
 1000db0:	0023883a 	mov	r17,zero
 1000db4:	00802034 	movhi	r2,128
 1000db8:	89801034 	orhi	r6,r17,64
 1000dbc:	10bfffc4 	addi	r2,r2,-1
 1000dc0:	a80f883a 	mov	r7,r21
 1000dc4:	308c703a 	and	r6,r6,r2
 1000dc8:	003faf06 	br	1000c88 <__alt_data_end+0xff48f188>
 1000dcc:	01c00804 	movi	r7,32
 1000dd0:	390fc83a 	sub	r7,r7,r4
 1000dd4:	89ce983a 	sll	r7,r17,r7
 1000dd8:	890ad83a 	srl	r5,r17,r4
 1000ddc:	380ec03a 	cmpne	r7,r7,zero
 1000de0:	29cab03a 	or	r5,r5,r7
 1000de4:	28c001cc 	andi	r3,r5,7
 1000de8:	18000426 	beq	r3,zero,1000dfc <__divsf3+0x3fc>
 1000dec:	28c003cc 	andi	r3,r5,15
 1000df0:	01000104 	movi	r4,4
 1000df4:	19000126 	beq	r3,r4,1000dfc <__divsf3+0x3fc>
 1000df8:	290b883a 	add	r5,r5,r4
 1000dfc:	28c1002c 	andhi	r3,r5,1024
 1000e00:	18000426 	beq	r3,zero,1000e14 <__divsf3+0x414>
 1000e04:	11c0004c 	andi	r7,r2,1
 1000e08:	01000044 	movi	r4,1
 1000e0c:	000d883a 	mov	r6,zero
 1000e10:	003f4b06 	br	1000b40 <__alt_data_end+0xff48f040>
 1000e14:	280a91ba 	slli	r5,r5,6
 1000e18:	11c0004c 	andi	r7,r2,1
 1000e1c:	0009883a 	mov	r4,zero
 1000e20:	280cd27a 	srli	r6,r5,9
 1000e24:	003f4606 	br	1000b40 <__alt_data_end+0xff48f040>
 1000e28:	00802034 	movhi	r2,128
 1000e2c:	89801034 	orhi	r6,r17,64
 1000e30:	10bfffc4 	addi	r2,r2,-1
 1000e34:	b00f883a 	mov	r7,r22
 1000e38:	308c703a 	and	r6,r6,r2
 1000e3c:	003f9206 	br	1000c88 <__alt_data_end+0xff48f188>

01000e40 <__mulsf3>:
 1000e40:	defff504 	addi	sp,sp,-44
 1000e44:	dc000115 	stw	r16,4(sp)
 1000e48:	2020d5fa 	srli	r16,r4,23
 1000e4c:	dd400615 	stw	r21,24(sp)
 1000e50:	202ad7fa 	srli	r21,r4,31
 1000e54:	dc800315 	stw	r18,12(sp)
 1000e58:	04802034 	movhi	r18,128
 1000e5c:	df000915 	stw	fp,36(sp)
 1000e60:	dd000515 	stw	r20,20(sp)
 1000e64:	94bfffc4 	addi	r18,r18,-1
 1000e68:	dfc00a15 	stw	ra,40(sp)
 1000e6c:	ddc00815 	stw	r23,32(sp)
 1000e70:	dd800715 	stw	r22,28(sp)
 1000e74:	dcc00415 	stw	r19,16(sp)
 1000e78:	dc400215 	stw	r17,8(sp)
 1000e7c:	84003fcc 	andi	r16,r16,255
 1000e80:	9124703a 	and	r18,r18,r4
 1000e84:	a829883a 	mov	r20,r21
 1000e88:	af003fcc 	andi	fp,r21,255
 1000e8c:	80005426 	beq	r16,zero,1000fe0 <__mulsf3+0x1a0>
 1000e90:	00803fc4 	movi	r2,255
 1000e94:	80802f26 	beq	r16,r2,1000f54 <__mulsf3+0x114>
 1000e98:	91002034 	orhi	r4,r18,128
 1000e9c:	202490fa 	slli	r18,r4,3
 1000ea0:	843fe044 	addi	r16,r16,-127
 1000ea4:	0023883a 	mov	r17,zero
 1000ea8:	002f883a 	mov	r23,zero
 1000eac:	2804d5fa 	srli	r2,r5,23
 1000eb0:	282cd7fa 	srli	r22,r5,31
 1000eb4:	01002034 	movhi	r4,128
 1000eb8:	213fffc4 	addi	r4,r4,-1
 1000ebc:	10803fcc 	andi	r2,r2,255
 1000ec0:	2166703a 	and	r19,r4,r5
 1000ec4:	b1803fcc 	andi	r6,r22,255
 1000ec8:	10004c26 	beq	r2,zero,1000ffc <__mulsf3+0x1bc>
 1000ecc:	00c03fc4 	movi	r3,255
 1000ed0:	10c04726 	beq	r2,r3,1000ff0 <__mulsf3+0x1b0>
 1000ed4:	99002034 	orhi	r4,r19,128
 1000ed8:	202690fa 	slli	r19,r4,3
 1000edc:	10bfe044 	addi	r2,r2,-127
 1000ee0:	0007883a 	mov	r3,zero
 1000ee4:	80a1883a 	add	r16,r16,r2
 1000ee8:	010003c4 	movi	r4,15
 1000eec:	1c44b03a 	or	r2,r3,r17
 1000ef0:	b56af03a 	xor	r21,r22,r21
 1000ef4:	81c00044 	addi	r7,r16,1
 1000ef8:	20806b36 	bltu	r4,r2,10010a8 <__mulsf3+0x268>
 1000efc:	100490ba 	slli	r2,r2,2
 1000f00:	01004034 	movhi	r4,256
 1000f04:	2103c504 	addi	r4,r4,3860
 1000f08:	1105883a 	add	r2,r2,r4
 1000f0c:	10800017 	ldw	r2,0(r2)
 1000f10:	1000683a 	jmp	r2
 1000f14:	010010a8 	cmpgeui	r4,zero,66
 1000f18:	01000f68 	cmpgeui	r4,zero,61
 1000f1c:	01000f68 	cmpgeui	r4,zero,61
 1000f20:	01000f64 	muli	r4,zero,61
 1000f24:	0100108c 	andi	r4,zero,66
 1000f28:	0100108c 	andi	r4,zero,66
 1000f2c:	01001078 	rdprs	r4,zero,65
 1000f30:	01000f64 	muli	r4,zero,61
 1000f34:	0100108c 	andi	r4,zero,66
 1000f38:	01001078 	rdprs	r4,zero,65
 1000f3c:	0100108c 	andi	r4,zero,66
 1000f40:	01000f64 	muli	r4,zero,61
 1000f44:	01001098 	cmpnei	r4,zero,66
 1000f48:	01001098 	cmpnei	r4,zero,66
 1000f4c:	01001098 	cmpnei	r4,zero,66
 1000f50:	010011a8 	cmpgeui	r4,zero,70
 1000f54:	90003b1e 	bne	r18,zero,1001044 <__mulsf3+0x204>
 1000f58:	04400204 	movi	r17,8
 1000f5c:	05c00084 	movi	r23,2
 1000f60:	003fd206 	br	1000eac <__alt_data_end+0xff48f3ac>
 1000f64:	302b883a 	mov	r21,r6
 1000f68:	00800084 	movi	r2,2
 1000f6c:	18802626 	beq	r3,r2,1001008 <__mulsf3+0x1c8>
 1000f70:	008000c4 	movi	r2,3
 1000f74:	1880b826 	beq	r3,r2,1001258 <__mulsf3+0x418>
 1000f78:	00800044 	movi	r2,1
 1000f7c:	1880af1e 	bne	r3,r2,100123c <__mulsf3+0x3fc>
 1000f80:	a829883a 	mov	r20,r21
 1000f84:	0007883a 	mov	r3,zero
 1000f88:	0009883a 	mov	r4,zero
 1000f8c:	18803fcc 	andi	r2,r3,255
 1000f90:	100695fa 	slli	r3,r2,23
 1000f94:	a0803fcc 	andi	r2,r20,255
 1000f98:	100a97fa 	slli	r5,r2,31
 1000f9c:	00802034 	movhi	r2,128
 1000fa0:	10bfffc4 	addi	r2,r2,-1
 1000fa4:	2084703a 	and	r2,r4,r2
 1000fa8:	10c4b03a 	or	r2,r2,r3
 1000fac:	1144b03a 	or	r2,r2,r5
 1000fb0:	dfc00a17 	ldw	ra,40(sp)
 1000fb4:	df000917 	ldw	fp,36(sp)
 1000fb8:	ddc00817 	ldw	r23,32(sp)
 1000fbc:	dd800717 	ldw	r22,28(sp)
 1000fc0:	dd400617 	ldw	r21,24(sp)
 1000fc4:	dd000517 	ldw	r20,20(sp)
 1000fc8:	dcc00417 	ldw	r19,16(sp)
 1000fcc:	dc800317 	ldw	r18,12(sp)
 1000fd0:	dc400217 	ldw	r17,8(sp)
 1000fd4:	dc000117 	ldw	r16,4(sp)
 1000fd8:	dec00b04 	addi	sp,sp,44
 1000fdc:	f800283a 	ret
 1000fe0:	90000d1e 	bne	r18,zero,1001018 <__mulsf3+0x1d8>
 1000fe4:	04400104 	movi	r17,4
 1000fe8:	05c00044 	movi	r23,1
 1000fec:	003faf06 	br	1000eac <__alt_data_end+0xff48f3ac>
 1000ff0:	9806c03a 	cmpne	r3,r19,zero
 1000ff4:	18c00084 	addi	r3,r3,2
 1000ff8:	003fba06 	br	1000ee4 <__alt_data_end+0xff48f3e4>
 1000ffc:	9800141e 	bne	r19,zero,1001050 <__mulsf3+0x210>
 1001000:	00c00044 	movi	r3,1
 1001004:	003fb706 	br	1000ee4 <__alt_data_end+0xff48f3e4>
 1001008:	a829883a 	mov	r20,r21
 100100c:	00ffffc4 	movi	r3,-1
 1001010:	0009883a 	mov	r4,zero
 1001014:	003fdd06 	br	1000f8c <__alt_data_end+0xff48f48c>
 1001018:	9009883a 	mov	r4,r18
 100101c:	d9400015 	stw	r5,0(sp)
 1001020:	10012e00 	call	10012e0 <__clzsi2>
 1001024:	10fffec4 	addi	r3,r2,-5
 1001028:	10801d84 	addi	r2,r2,118
 100102c:	90e4983a 	sll	r18,r18,r3
 1001030:	00a1c83a 	sub	r16,zero,r2
 1001034:	0023883a 	mov	r17,zero
 1001038:	002f883a 	mov	r23,zero
 100103c:	d9400017 	ldw	r5,0(sp)
 1001040:	003f9a06 	br	1000eac <__alt_data_end+0xff48f3ac>
 1001044:	04400304 	movi	r17,12
 1001048:	05c000c4 	movi	r23,3
 100104c:	003f9706 	br	1000eac <__alt_data_end+0xff48f3ac>
 1001050:	9809883a 	mov	r4,r19
 1001054:	d9800015 	stw	r6,0(sp)
 1001058:	10012e00 	call	10012e0 <__clzsi2>
 100105c:	10fffec4 	addi	r3,r2,-5
 1001060:	10801d84 	addi	r2,r2,118
 1001064:	98e6983a 	sll	r19,r19,r3
 1001068:	0085c83a 	sub	r2,zero,r2
 100106c:	0007883a 	mov	r3,zero
 1001070:	d9800017 	ldw	r6,0(sp)
 1001074:	003f9b06 	br	1000ee4 <__alt_data_end+0xff48f3e4>
 1001078:	01002034 	movhi	r4,128
 100107c:	0029883a 	mov	r20,zero
 1001080:	213fffc4 	addi	r4,r4,-1
 1001084:	00ffffc4 	movi	r3,-1
 1001088:	003fc006 	br	1000f8c <__alt_data_end+0xff48f48c>
 100108c:	9027883a 	mov	r19,r18
 1001090:	b807883a 	mov	r3,r23
 1001094:	003fb406 	br	1000f68 <__alt_data_end+0xff48f468>
 1001098:	9027883a 	mov	r19,r18
 100109c:	e02b883a 	mov	r21,fp
 10010a0:	b807883a 	mov	r3,r23
 10010a4:	003fb006 	br	1000f68 <__alt_data_end+0xff48f468>
 10010a8:	9028d43a 	srli	r20,r18,16
 10010ac:	982cd43a 	srli	r22,r19,16
 10010b0:	94bfffcc 	andi	r18,r18,65535
 10010b4:	9cffffcc 	andi	r19,r19,65535
 10010b8:	980b883a 	mov	r5,r19
 10010bc:	9009883a 	mov	r4,r18
 10010c0:	d9c00015 	stw	r7,0(sp)
 10010c4:	10013440 	call	1001344 <__mulsi3>
 10010c8:	a00b883a 	mov	r5,r20
 10010cc:	9809883a 	mov	r4,r19
 10010d0:	1023883a 	mov	r17,r2
 10010d4:	10013440 	call	1001344 <__mulsi3>
 10010d8:	a009883a 	mov	r4,r20
 10010dc:	b00b883a 	mov	r5,r22
 10010e0:	1027883a 	mov	r19,r2
 10010e4:	10013440 	call	1001344 <__mulsi3>
 10010e8:	b00b883a 	mov	r5,r22
 10010ec:	9009883a 	mov	r4,r18
 10010f0:	1029883a 	mov	r20,r2
 10010f4:	10013440 	call	1001344 <__mulsi3>
 10010f8:	8806d43a 	srli	r3,r17,16
 10010fc:	14c5883a 	add	r2,r2,r19
 1001100:	d9c00017 	ldw	r7,0(sp)
 1001104:	1885883a 	add	r2,r3,r2
 1001108:	14c0022e 	bgeu	r2,r19,1001114 <__mulsf3+0x2d4>
 100110c:	00c00074 	movhi	r3,1
 1001110:	a0e9883a 	add	r20,r20,r3
 1001114:	1026943a 	slli	r19,r2,16
 1001118:	8c7fffcc 	andi	r17,r17,65535
 100111c:	1004d43a 	srli	r2,r2,16
 1001120:	9c63883a 	add	r17,r19,r17
 1001124:	882691ba 	slli	r19,r17,6
 1001128:	1505883a 	add	r2,r2,r20
 100112c:	8822d6ba 	srli	r17,r17,26
 1001130:	100891ba 	slli	r4,r2,6
 1001134:	9826c03a 	cmpne	r19,r19,zero
 1001138:	9c62b03a 	or	r17,r19,r17
 100113c:	8926b03a 	or	r19,r17,r4
 1001140:	9882002c 	andhi	r2,r19,2048
 1001144:	10000426 	beq	r2,zero,1001158 <__mulsf3+0x318>
 1001148:	9804d07a 	srli	r2,r19,1
 100114c:	9900004c 	andi	r4,r19,1
 1001150:	3821883a 	mov	r16,r7
 1001154:	1126b03a 	or	r19,r2,r4
 1001158:	80c01fc4 	addi	r3,r16,127
 100115c:	00c0210e 	bge	zero,r3,10011e4 <__mulsf3+0x3a4>
 1001160:	988001cc 	andi	r2,r19,7
 1001164:	10000426 	beq	r2,zero,1001178 <__mulsf3+0x338>
 1001168:	988003cc 	andi	r2,r19,15
 100116c:	01000104 	movi	r4,4
 1001170:	11000126 	beq	r2,r4,1001178 <__mulsf3+0x338>
 1001174:	9927883a 	add	r19,r19,r4
 1001178:	9882002c 	andhi	r2,r19,2048
 100117c:	10000426 	beq	r2,zero,1001190 <__mulsf3+0x350>
 1001180:	00be0034 	movhi	r2,63488
 1001184:	10bfffc4 	addi	r2,r2,-1
 1001188:	80c02004 	addi	r3,r16,128
 100118c:	98a6703a 	and	r19,r19,r2
 1001190:	00803f84 	movi	r2,254
 1001194:	10ff9c16 	blt	r2,r3,1001008 <__alt_data_end+0xff48f508>
 1001198:	980891ba 	slli	r4,r19,6
 100119c:	a829883a 	mov	r20,r21
 10011a0:	2008d27a 	srli	r4,r4,9
 10011a4:	003f7906 	br	1000f8c <__alt_data_end+0xff48f48c>
 10011a8:	9080102c 	andhi	r2,r18,64
 10011ac:	10000826 	beq	r2,zero,10011d0 <__mulsf3+0x390>
 10011b0:	9880102c 	andhi	r2,r19,64
 10011b4:	1000061e 	bne	r2,zero,10011d0 <__mulsf3+0x390>
 10011b8:	00802034 	movhi	r2,128
 10011bc:	99001034 	orhi	r4,r19,64
 10011c0:	10bfffc4 	addi	r2,r2,-1
 10011c4:	b029883a 	mov	r20,r22
 10011c8:	2088703a 	and	r4,r4,r2
 10011cc:	003fad06 	br	1001084 <__alt_data_end+0xff48f584>
 10011d0:	00802034 	movhi	r2,128
 10011d4:	91001034 	orhi	r4,r18,64
 10011d8:	10bfffc4 	addi	r2,r2,-1
 10011dc:	2088703a 	and	r4,r4,r2
 10011e0:	003fa806 	br	1001084 <__alt_data_end+0xff48f584>
 10011e4:	00800044 	movi	r2,1
 10011e8:	10c7c83a 	sub	r3,r2,r3
 10011ec:	008006c4 	movi	r2,27
 10011f0:	10ff6316 	blt	r2,r3,1000f80 <__alt_data_end+0xff48f480>
 10011f4:	00800804 	movi	r2,32
 10011f8:	10c5c83a 	sub	r2,r2,r3
 10011fc:	9884983a 	sll	r2,r19,r2
 1001200:	98c6d83a 	srl	r3,r19,r3
 1001204:	1004c03a 	cmpne	r2,r2,zero
 1001208:	1884b03a 	or	r2,r3,r2
 100120c:	10c001cc 	andi	r3,r2,7
 1001210:	18000426 	beq	r3,zero,1001224 <__mulsf3+0x3e4>
 1001214:	10c003cc 	andi	r3,r2,15
 1001218:	01000104 	movi	r4,4
 100121c:	19000126 	beq	r3,r4,1001224 <__mulsf3+0x3e4>
 1001220:	1105883a 	add	r2,r2,r4
 1001224:	10c1002c 	andhi	r3,r2,1024
 1001228:	18000626 	beq	r3,zero,1001244 <__mulsf3+0x404>
 100122c:	a829883a 	mov	r20,r21
 1001230:	00c00044 	movi	r3,1
 1001234:	0009883a 	mov	r4,zero
 1001238:	003f5406 	br	1000f8c <__alt_data_end+0xff48f48c>
 100123c:	3821883a 	mov	r16,r7
 1001240:	003fc506 	br	1001158 <__alt_data_end+0xff48f658>
 1001244:	100491ba 	slli	r2,r2,6
 1001248:	a829883a 	mov	r20,r21
 100124c:	0007883a 	mov	r3,zero
 1001250:	1008d27a 	srli	r4,r2,9
 1001254:	003f4d06 	br	1000f8c <__alt_data_end+0xff48f48c>
 1001258:	00802034 	movhi	r2,128
 100125c:	99001034 	orhi	r4,r19,64
 1001260:	10bfffc4 	addi	r2,r2,-1
 1001264:	a829883a 	mov	r20,r21
 1001268:	2088703a 	and	r4,r4,r2
 100126c:	003f8506 	br	1001084 <__alt_data_end+0xff48f584>

01001270 <__fixsfsi>:
 1001270:	200ad5fa 	srli	r5,r4,23
 1001274:	00c02034 	movhi	r3,128
 1001278:	18ffffc4 	addi	r3,r3,-1
 100127c:	29403fcc 	andi	r5,r5,255
 1001280:	00801f84 	movi	r2,126
 1001284:	1906703a 	and	r3,r3,r4
 1001288:	2008d7fa 	srli	r4,r4,31
 100128c:	11400e0e 	bge	r2,r5,10012c8 <__fixsfsi+0x58>
 1001290:	00802744 	movi	r2,157
 1001294:	11400816 	blt	r2,r5,10012b8 <__fixsfsi+0x48>
 1001298:	00802544 	movi	r2,149
 100129c:	18c02034 	orhi	r3,r3,128
 10012a0:	11400b0e 	bge	r2,r5,10012d0 <__fixsfsi+0x60>
 10012a4:	28bfda84 	addi	r2,r5,-150
 10012a8:	1884983a 	sll	r2,r3,r2
 10012ac:	20000726 	beq	r4,zero,10012cc <__fixsfsi+0x5c>
 10012b0:	0085c83a 	sub	r2,zero,r2
 10012b4:	f800283a 	ret
 10012b8:	00a00034 	movhi	r2,32768
 10012bc:	10bfffc4 	addi	r2,r2,-1
 10012c0:	2085883a 	add	r2,r4,r2
 10012c4:	f800283a 	ret
 10012c8:	0005883a 	mov	r2,zero
 10012cc:	f800283a 	ret
 10012d0:	00802584 	movi	r2,150
 10012d4:	1145c83a 	sub	r2,r2,r5
 10012d8:	1884d83a 	srl	r2,r3,r2
 10012dc:	003ff306 	br	10012ac <__alt_data_end+0xff48f7ac>

010012e0 <__clzsi2>:
 10012e0:	00bfffd4 	movui	r2,65535
 10012e4:	11000536 	bltu	r2,r4,10012fc <__clzsi2+0x1c>
 10012e8:	00803fc4 	movi	r2,255
 10012ec:	11000f36 	bltu	r2,r4,100132c <__clzsi2+0x4c>
 10012f0:	00800804 	movi	r2,32
 10012f4:	0007883a 	mov	r3,zero
 10012f8:	00000506 	br	1001310 <__clzsi2+0x30>
 10012fc:	00804034 	movhi	r2,256
 1001300:	10bfffc4 	addi	r2,r2,-1
 1001304:	11000c2e 	bgeu	r2,r4,1001338 <__clzsi2+0x58>
 1001308:	00800204 	movi	r2,8
 100130c:	00c00604 	movi	r3,24
 1001310:	20c8d83a 	srl	r4,r4,r3
 1001314:	00c04074 	movhi	r3,257
 1001318:	18e54704 	addi	r3,r3,-27364
 100131c:	1909883a 	add	r4,r3,r4
 1001320:	20c00003 	ldbu	r3,0(r4)
 1001324:	10c5c83a 	sub	r2,r2,r3
 1001328:	f800283a 	ret
 100132c:	00800604 	movi	r2,24
 1001330:	00c00204 	movi	r3,8
 1001334:	003ff606 	br	1001310 <__alt_data_end+0xff48f810>
 1001338:	00800404 	movi	r2,16
 100133c:	1007883a 	mov	r3,r2
 1001340:	003ff306 	br	1001310 <__alt_data_end+0xff48f810>

01001344 <__mulsi3>:
 1001344:	0005883a 	mov	r2,zero
 1001348:	20000726 	beq	r4,zero,1001368 <__mulsi3+0x24>
 100134c:	20c0004c 	andi	r3,r4,1
 1001350:	2008d07a 	srli	r4,r4,1
 1001354:	18000126 	beq	r3,zero,100135c <__mulsi3+0x18>
 1001358:	1145883a 	add	r2,r2,r5
 100135c:	294b883a 	add	r5,r5,r5
 1001360:	203ffa1e 	bne	r4,zero,100134c <__alt_data_end+0xff48f84c>
 1001364:	f800283a 	ret
 1001368:	f800283a 	ret

0100136c <fcvt>:
 100136c:	defffd04 	addi	sp,sp,-12
 1001370:	d8800317 	ldw	r2,12(sp)
 1001374:	d8000115 	stw	zero,4(sp)
 1001378:	dfc00215 	stw	ra,8(sp)
 100137c:	d8800015 	stw	r2,0(sp)
 1001380:	1001e0c0 	call	1001e0c <fcvtbuf>
 1001384:	dfc00217 	ldw	ra,8(sp)
 1001388:	dec00304 	addi	sp,sp,12
 100138c:	f800283a 	ret

01001390 <fcvtf>:
 1001390:	defffb04 	addi	sp,sp,-20
 1001394:	dfc00415 	stw	ra,16(sp)
 1001398:	dc800315 	stw	r18,12(sp)
 100139c:	dc400215 	stw	r17,8(sp)
 10013a0:	3825883a 	mov	r18,r7
 10013a4:	3023883a 	mov	r17,r6
 10013a8:	dc000115 	stw	r16,4(sp)
 10013ac:	2821883a 	mov	r16,r5
 10013b0:	1007a580 	call	1007a58 <__extendsfdf2>
 10013b4:	880f883a 	mov	r7,r17
 10013b8:	dc800015 	stw	r18,0(sp)
 10013bc:	800d883a 	mov	r6,r16
 10013c0:	1009883a 	mov	r4,r2
 10013c4:	180b883a 	mov	r5,r3
 10013c8:	100136c0 	call	100136c <fcvt>
 10013cc:	dfc00417 	ldw	ra,16(sp)
 10013d0:	dc800317 	ldw	r18,12(sp)
 10013d4:	dc400217 	ldw	r17,8(sp)
 10013d8:	dc000117 	ldw	r16,4(sp)
 10013dc:	dec00504 	addi	sp,sp,20
 10013e0:	f800283a 	ret

010013e4 <ecvt>:
 10013e4:	defffd04 	addi	sp,sp,-12
 10013e8:	d8800317 	ldw	r2,12(sp)
 10013ec:	d8000115 	stw	zero,4(sp)
 10013f0:	dfc00215 	stw	ra,8(sp)
 10013f4:	d8800015 	stw	r2,0(sp)
 10013f8:	1001f780 	call	1001f78 <ecvtbuf>
 10013fc:	dfc00217 	ldw	ra,8(sp)
 1001400:	dec00304 	addi	sp,sp,12
 1001404:	f800283a 	ret

01001408 <ecvtf>:
 1001408:	defffb04 	addi	sp,sp,-20
 100140c:	dfc00415 	stw	ra,16(sp)
 1001410:	dc800315 	stw	r18,12(sp)
 1001414:	dc400215 	stw	r17,8(sp)
 1001418:	3825883a 	mov	r18,r7
 100141c:	3023883a 	mov	r17,r6
 1001420:	dc000115 	stw	r16,4(sp)
 1001424:	2821883a 	mov	r16,r5
 1001428:	1007a580 	call	1007a58 <__extendsfdf2>
 100142c:	880f883a 	mov	r7,r17
 1001430:	dc800015 	stw	r18,0(sp)
 1001434:	800d883a 	mov	r6,r16
 1001438:	1009883a 	mov	r4,r2
 100143c:	180b883a 	mov	r5,r3
 1001440:	10013e40 	call	10013e4 <ecvt>
 1001444:	dfc00417 	ldw	ra,16(sp)
 1001448:	dc800317 	ldw	r18,12(sp)
 100144c:	dc400217 	ldw	r17,8(sp)
 1001450:	dc000117 	ldw	r16,4(sp)
 1001454:	dec00504 	addi	sp,sp,20
 1001458:	f800283a 	ret

0100145c <gcvt>:
 100145c:	defff804 	addi	sp,sp,-32
 1001460:	dc400415 	stw	r17,16(sp)
 1001464:	dc000315 	stw	r16,12(sp)
 1001468:	3023883a 	mov	r17,r6
 100146c:	3821883a 	mov	r16,r7
 1001470:	000d883a 	mov	r6,zero
 1001474:	000f883a 	mov	r7,zero
 1001478:	dcc00615 	stw	r19,24(sp)
 100147c:	dc800515 	stw	r18,20(sp)
 1001480:	dfc00715 	stw	ra,28(sp)
 1001484:	2027883a 	mov	r19,r4
 1001488:	2825883a 	mov	r18,r5
 100148c:	10065f80 	call	10065f8 <__ledf2>
 1001490:	1000050e 	bge	r2,zero,10014a8 <gcvt+0x4c>
 1001494:	00800b44 	movi	r2,45
 1001498:	80800005 	stb	r2,0(r16)
 100149c:	8c7fffc4 	addi	r17,r17,-1
 10014a0:	80800044 	addi	r2,r16,1
 10014a4:	00000106 	br	10014ac <gcvt+0x50>
 10014a8:	8005883a 	mov	r2,r16
 10014ac:	d8800015 	stw	r2,0(sp)
 10014b0:	00c019c4 	movi	r3,103
 10014b4:	00804074 	movhi	r2,257
 10014b8:	d8000215 	stw	zero,8(sp)
 10014bc:	d8c00115 	stw	r3,4(sp)
 10014c0:	10a68f04 	addi	r2,r2,-26052
 10014c4:	11000017 	ldw	r4,0(r2)
 10014c8:	880f883a 	mov	r7,r17
 10014cc:	980b883a 	mov	r5,r19
 10014d0:	900d883a 	mov	r6,r18
 10014d4:	10020800 	call	1002080 <_gcvt>
 10014d8:	10000126 	beq	r2,zero,10014e0 <gcvt+0x84>
 10014dc:	8005883a 	mov	r2,r16
 10014e0:	dfc00717 	ldw	ra,28(sp)
 10014e4:	dcc00617 	ldw	r19,24(sp)
 10014e8:	dc800517 	ldw	r18,20(sp)
 10014ec:	dc400417 	ldw	r17,16(sp)
 10014f0:	dc000317 	ldw	r16,12(sp)
 10014f4:	dec00804 	addi	sp,sp,32
 10014f8:	f800283a 	ret

010014fc <gcvtf>:
 10014fc:	defffd04 	addi	sp,sp,-12
 1001500:	dc400115 	stw	r17,4(sp)
 1001504:	dc000015 	stw	r16,0(sp)
 1001508:	3023883a 	mov	r17,r6
 100150c:	2821883a 	mov	r16,r5
 1001510:	dfc00215 	stw	ra,8(sp)
 1001514:	1007a580 	call	1007a58 <__extendsfdf2>
 1001518:	880f883a 	mov	r7,r17
 100151c:	800d883a 	mov	r6,r16
 1001520:	1009883a 	mov	r4,r2
 1001524:	180b883a 	mov	r5,r3
 1001528:	dfc00217 	ldw	ra,8(sp)
 100152c:	dc400117 	ldw	r17,4(sp)
 1001530:	dc000017 	ldw	r16,0(sp)
 1001534:	dec00304 	addi	sp,sp,12
 1001538:	100145c1 	jmpi	100145c <gcvt>

0100153c <_printf_r>:
 100153c:	defffd04 	addi	sp,sp,-12
 1001540:	dfc00015 	stw	ra,0(sp)
 1001544:	d9800115 	stw	r6,4(sp)
 1001548:	d9c00215 	stw	r7,8(sp)
 100154c:	20c00217 	ldw	r3,8(r4)
 1001550:	01804034 	movhi	r6,256
 1001554:	31897904 	addi	r6,r6,9700
 1001558:	19800115 	stw	r6,4(r3)
 100155c:	280d883a 	mov	r6,r5
 1001560:	21400217 	ldw	r5,8(r4)
 1001564:	d9c00104 	addi	r7,sp,4
 1001568:	10016e00 	call	10016e0 <___vfprintf_internal_r>
 100156c:	dfc00017 	ldw	ra,0(sp)
 1001570:	dec00304 	addi	sp,sp,12
 1001574:	f800283a 	ret

01001578 <printf>:
 1001578:	defffc04 	addi	sp,sp,-16
 100157c:	dfc00015 	stw	ra,0(sp)
 1001580:	d9400115 	stw	r5,4(sp)
 1001584:	d9800215 	stw	r6,8(sp)
 1001588:	d9c00315 	stw	r7,12(sp)
 100158c:	00804074 	movhi	r2,257
 1001590:	10a68f04 	addi	r2,r2,-26052
 1001594:	10800017 	ldw	r2,0(r2)
 1001598:	01404034 	movhi	r5,256
 100159c:	29497904 	addi	r5,r5,9700
 10015a0:	10c00217 	ldw	r3,8(r2)
 10015a4:	d9800104 	addi	r6,sp,4
 10015a8:	19400115 	stw	r5,4(r3)
 10015ac:	200b883a 	mov	r5,r4
 10015b0:	11000217 	ldw	r4,8(r2)
 10015b4:	1001c0c0 	call	1001c0c <__vfprintf_internal>
 10015b8:	dfc00017 	ldw	ra,0(sp)
 10015bc:	dec00404 	addi	sp,sp,16
 10015c0:	f800283a 	ret

010015c4 <_puts_r>:
 10015c4:	defffd04 	addi	sp,sp,-12
 10015c8:	dc000015 	stw	r16,0(sp)
 10015cc:	2021883a 	mov	r16,r4
 10015d0:	2809883a 	mov	r4,r5
 10015d4:	dfc00215 	stw	ra,8(sp)
 10015d8:	dc400115 	stw	r17,4(sp)
 10015dc:	2823883a 	mov	r17,r5
 10015e0:	10016580 	call	1001658 <strlen>
 10015e4:	81400217 	ldw	r5,8(r16)
 10015e8:	01004034 	movhi	r4,256
 10015ec:	21097904 	addi	r4,r4,9700
 10015f0:	29000115 	stw	r4,4(r5)
 10015f4:	100f883a 	mov	r7,r2
 10015f8:	880d883a 	mov	r6,r17
 10015fc:	8009883a 	mov	r4,r16
 1001600:	10025e40 	call	10025e4 <__sfvwrite_small_dev>
 1001604:	00ffffc4 	movi	r3,-1
 1001608:	10c00926 	beq	r2,r3,1001630 <_puts_r+0x6c>
 100160c:	81400217 	ldw	r5,8(r16)
 1001610:	01804074 	movhi	r6,257
 1001614:	01c00044 	movi	r7,1
 1001618:	28800117 	ldw	r2,4(r5)
 100161c:	31a58704 	addi	r6,r6,-27108
 1001620:	8009883a 	mov	r4,r16
 1001624:	103ee83a 	callr	r2
 1001628:	10bfffe0 	cmpeqi	r2,r2,-1
 100162c:	0085c83a 	sub	r2,zero,r2
 1001630:	dfc00217 	ldw	ra,8(sp)
 1001634:	dc400117 	ldw	r17,4(sp)
 1001638:	dc000017 	ldw	r16,0(sp)
 100163c:	dec00304 	addi	sp,sp,12
 1001640:	f800283a 	ret

01001644 <puts>:
 1001644:	00804074 	movhi	r2,257
 1001648:	10a68f04 	addi	r2,r2,-26052
 100164c:	200b883a 	mov	r5,r4
 1001650:	11000017 	ldw	r4,0(r2)
 1001654:	10015c41 	jmpi	10015c4 <_puts_r>

01001658 <strlen>:
 1001658:	2005883a 	mov	r2,r4
 100165c:	10c00007 	ldb	r3,0(r2)
 1001660:	18000226 	beq	r3,zero,100166c <strlen+0x14>
 1001664:	10800044 	addi	r2,r2,1
 1001668:	003ffc06 	br	100165c <__alt_data_end+0xff48fb5c>
 100166c:	1105c83a 	sub	r2,r2,r4
 1001670:	f800283a 	ret

01001674 <print_repeat>:
 1001674:	defffb04 	addi	sp,sp,-20
 1001678:	dc800315 	stw	r18,12(sp)
 100167c:	dc400215 	stw	r17,8(sp)
 1001680:	dc000115 	stw	r16,4(sp)
 1001684:	dfc00415 	stw	ra,16(sp)
 1001688:	2025883a 	mov	r18,r4
 100168c:	2823883a 	mov	r17,r5
 1001690:	d9800005 	stb	r6,0(sp)
 1001694:	3821883a 	mov	r16,r7
 1001698:	04000a0e 	bge	zero,r16,10016c4 <print_repeat+0x50>
 100169c:	88800117 	ldw	r2,4(r17)
 10016a0:	01c00044 	movi	r7,1
 10016a4:	d80d883a 	mov	r6,sp
 10016a8:	880b883a 	mov	r5,r17
 10016ac:	9009883a 	mov	r4,r18
 10016b0:	103ee83a 	callr	r2
 10016b4:	843fffc4 	addi	r16,r16,-1
 10016b8:	103ff726 	beq	r2,zero,1001698 <__alt_data_end+0xff48fb98>
 10016bc:	00bfffc4 	movi	r2,-1
 10016c0:	00000106 	br	10016c8 <print_repeat+0x54>
 10016c4:	0005883a 	mov	r2,zero
 10016c8:	dfc00417 	ldw	ra,16(sp)
 10016cc:	dc800317 	ldw	r18,12(sp)
 10016d0:	dc400217 	ldw	r17,8(sp)
 10016d4:	dc000117 	ldw	r16,4(sp)
 10016d8:	dec00504 	addi	sp,sp,20
 10016dc:	f800283a 	ret

010016e0 <___vfprintf_internal_r>:
 10016e0:	deffe504 	addi	sp,sp,-108
 10016e4:	d8c00804 	addi	r3,sp,32
 10016e8:	ddc01815 	stw	r23,96(sp)
 10016ec:	dd801715 	stw	r22,92(sp)
 10016f0:	dd401615 	stw	r21,88(sp)
 10016f4:	dd001515 	stw	r20,84(sp)
 10016f8:	dcc01415 	stw	r19,80(sp)
 10016fc:	dc801315 	stw	r18,76(sp)
 1001700:	dc401215 	stw	r17,72(sp)
 1001704:	dc001115 	stw	r16,68(sp)
 1001708:	dfc01a15 	stw	ra,104(sp)
 100170c:	df001915 	stw	fp,100(sp)
 1001710:	2029883a 	mov	r20,r4
 1001714:	2823883a 	mov	r17,r5
 1001718:	382d883a 	mov	r22,r7
 100171c:	d9800f15 	stw	r6,60(sp)
 1001720:	0021883a 	mov	r16,zero
 1001724:	d8000e15 	stw	zero,56(sp)
 1001728:	d8000a15 	stw	zero,40(sp)
 100172c:	002b883a 	mov	r21,zero
 1001730:	0027883a 	mov	r19,zero
 1001734:	0025883a 	mov	r18,zero
 1001738:	d8000c15 	stw	zero,48(sp)
 100173c:	d8000b15 	stw	zero,44(sp)
 1001740:	002f883a 	mov	r23,zero
 1001744:	d8c00915 	stw	r3,36(sp)
 1001748:	d8c00f17 	ldw	r3,60(sp)
 100174c:	19000003 	ldbu	r4,0(r3)
 1001750:	20803fcc 	andi	r2,r4,255
 1001754:	1080201c 	xori	r2,r2,128
 1001758:	10bfe004 	addi	r2,r2,-128
 100175c:	10011e26 	beq	r2,zero,1001bd8 <___vfprintf_internal_r+0x4f8>
 1001760:	00c00044 	movi	r3,1
 1001764:	b8c01426 	beq	r23,r3,10017b8 <___vfprintf_internal_r+0xd8>
 1001768:	1dc00216 	blt	r3,r23,1001774 <___vfprintf_internal_r+0x94>
 100176c:	b8000626 	beq	r23,zero,1001788 <___vfprintf_internal_r+0xa8>
 1001770:	00011506 	br	1001bc8 <___vfprintf_internal_r+0x4e8>
 1001774:	01400084 	movi	r5,2
 1001778:	b9401d26 	beq	r23,r5,10017f0 <___vfprintf_internal_r+0x110>
 100177c:	014000c4 	movi	r5,3
 1001780:	b9402b26 	beq	r23,r5,1001830 <___vfprintf_internal_r+0x150>
 1001784:	00011006 	br	1001bc8 <___vfprintf_internal_r+0x4e8>
 1001788:	01400944 	movi	r5,37
 100178c:	1140fc26 	beq	r2,r5,1001b80 <___vfprintf_internal_r+0x4a0>
 1001790:	88800117 	ldw	r2,4(r17)
 1001794:	d9000005 	stb	r4,0(sp)
 1001798:	01c00044 	movi	r7,1
 100179c:	d80d883a 	mov	r6,sp
 10017a0:	880b883a 	mov	r5,r17
 10017a4:	a009883a 	mov	r4,r20
 10017a8:	103ee83a 	callr	r2
 10017ac:	1000d81e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 10017b0:	84000044 	addi	r16,r16,1
 10017b4:	00010406 	br	1001bc8 <___vfprintf_internal_r+0x4e8>
 10017b8:	01400c04 	movi	r5,48
 10017bc:	1140fa26 	beq	r2,r5,1001ba8 <___vfprintf_internal_r+0x4c8>
 10017c0:	01400944 	movi	r5,37
 10017c4:	11400a1e 	bne	r2,r5,10017f0 <___vfprintf_internal_r+0x110>
 10017c8:	d8800005 	stb	r2,0(sp)
 10017cc:	88800117 	ldw	r2,4(r17)
 10017d0:	b80f883a 	mov	r7,r23
 10017d4:	d80d883a 	mov	r6,sp
 10017d8:	880b883a 	mov	r5,r17
 10017dc:	a009883a 	mov	r4,r20
 10017e0:	103ee83a 	callr	r2
 10017e4:	1000ca1e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 10017e8:	84000044 	addi	r16,r16,1
 10017ec:	0000f506 	br	1001bc4 <___vfprintf_internal_r+0x4e4>
 10017f0:	25fff404 	addi	r23,r4,-48
 10017f4:	bdc03fcc 	andi	r23,r23,255
 10017f8:	00c00244 	movi	r3,9
 10017fc:	1dc00936 	bltu	r3,r23,1001824 <___vfprintf_internal_r+0x144>
 1001800:	00bfffc4 	movi	r2,-1
 1001804:	90800426 	beq	r18,r2,1001818 <___vfprintf_internal_r+0x138>
 1001808:	01400284 	movi	r5,10
 100180c:	9009883a 	mov	r4,r18
 1001810:	10013440 	call	1001344 <__mulsi3>
 1001814:	00000106 	br	100181c <___vfprintf_internal_r+0x13c>
 1001818:	0005883a 	mov	r2,zero
 100181c:	b8a5883a 	add	r18,r23,r2
 1001820:	0000e206 	br	1001bac <___vfprintf_internal_r+0x4cc>
 1001824:	01400b84 	movi	r5,46
 1001828:	1140e426 	beq	r2,r5,1001bbc <___vfprintf_internal_r+0x4dc>
 100182c:	05c00084 	movi	r23,2
 1001830:	213ff404 	addi	r4,r4,-48
 1001834:	27003fcc 	andi	fp,r4,255
 1001838:	00c00244 	movi	r3,9
 100183c:	1f000936 	bltu	r3,fp,1001864 <___vfprintf_internal_r+0x184>
 1001840:	00bfffc4 	movi	r2,-1
 1001844:	98800426 	beq	r19,r2,1001858 <___vfprintf_internal_r+0x178>
 1001848:	01400284 	movi	r5,10
 100184c:	9809883a 	mov	r4,r19
 1001850:	10013440 	call	1001344 <__mulsi3>
 1001854:	00000106 	br	100185c <___vfprintf_internal_r+0x17c>
 1001858:	0005883a 	mov	r2,zero
 100185c:	e0a7883a 	add	r19,fp,r2
 1001860:	0000d906 	br	1001bc8 <___vfprintf_internal_r+0x4e8>
 1001864:	00c01b04 	movi	r3,108
 1001868:	10c0d226 	beq	r2,r3,1001bb4 <___vfprintf_internal_r+0x4d4>
 100186c:	013fffc4 	movi	r4,-1
 1001870:	99000226 	beq	r19,r4,100187c <___vfprintf_internal_r+0x19c>
 1001874:	d8000b15 	stw	zero,44(sp)
 1001878:	00000106 	br	1001880 <___vfprintf_internal_r+0x1a0>
 100187c:	04c00044 	movi	r19,1
 1001880:	01001a44 	movi	r4,105
 1001884:	11001626 	beq	r2,r4,10018e0 <___vfprintf_internal_r+0x200>
 1001888:	20800916 	blt	r4,r2,10018b0 <___vfprintf_internal_r+0x1d0>
 100188c:	010018c4 	movi	r4,99
 1001890:	11008826 	beq	r2,r4,1001ab4 <___vfprintf_internal_r+0x3d4>
 1001894:	01001904 	movi	r4,100
 1001898:	11001126 	beq	r2,r4,10018e0 <___vfprintf_internal_r+0x200>
 100189c:	01001604 	movi	r4,88
 10018a0:	1100c81e 	bne	r2,r4,1001bc4 <___vfprintf_internal_r+0x4e4>
 10018a4:	00c00044 	movi	r3,1
 10018a8:	d8c00e15 	stw	r3,56(sp)
 10018ac:	00001506 	br	1001904 <___vfprintf_internal_r+0x224>
 10018b0:	01001cc4 	movi	r4,115
 10018b4:	11009826 	beq	r2,r4,1001b18 <___vfprintf_internal_r+0x438>
 10018b8:	20800416 	blt	r4,r2,10018cc <___vfprintf_internal_r+0x1ec>
 10018bc:	01001bc4 	movi	r4,111
 10018c0:	1100c01e 	bne	r2,r4,1001bc4 <___vfprintf_internal_r+0x4e4>
 10018c4:	05400204 	movi	r21,8
 10018c8:	00000f06 	br	1001908 <___vfprintf_internal_r+0x228>
 10018cc:	01001d44 	movi	r4,117
 10018d0:	11000d26 	beq	r2,r4,1001908 <___vfprintf_internal_r+0x228>
 10018d4:	01001e04 	movi	r4,120
 10018d8:	11000a26 	beq	r2,r4,1001904 <___vfprintf_internal_r+0x224>
 10018dc:	0000b906 	br	1001bc4 <___vfprintf_internal_r+0x4e4>
 10018e0:	d8c00a17 	ldw	r3,40(sp)
 10018e4:	b7000104 	addi	fp,r22,4
 10018e8:	18000726 	beq	r3,zero,1001908 <___vfprintf_internal_r+0x228>
 10018ec:	df000d15 	stw	fp,52(sp)
 10018f0:	b5c00017 	ldw	r23,0(r22)
 10018f4:	b800080e 	bge	r23,zero,1001918 <___vfprintf_internal_r+0x238>
 10018f8:	05efc83a 	sub	r23,zero,r23
 10018fc:	02400044 	movi	r9,1
 1001900:	00000606 	br	100191c <___vfprintf_internal_r+0x23c>
 1001904:	05400404 	movi	r21,16
 1001908:	b0c00104 	addi	r3,r22,4
 100190c:	d8c00d15 	stw	r3,52(sp)
 1001910:	b5c00017 	ldw	r23,0(r22)
 1001914:	d8000a15 	stw	zero,40(sp)
 1001918:	0013883a 	mov	r9,zero
 100191c:	d839883a 	mov	fp,sp
 1001920:	b8001726 	beq	r23,zero,1001980 <___vfprintf_internal_r+0x2a0>
 1001924:	a80b883a 	mov	r5,r21
 1001928:	b809883a 	mov	r4,r23
 100192c:	da401015 	stw	r9,64(sp)
 1001930:	100515c0 	call	100515c <__udivsi3>
 1001934:	a80b883a 	mov	r5,r21
 1001938:	1009883a 	mov	r4,r2
 100193c:	102d883a 	mov	r22,r2
 1001940:	10013440 	call	1001344 <__mulsi3>
 1001944:	b885c83a 	sub	r2,r23,r2
 1001948:	00c00244 	movi	r3,9
 100194c:	da401017 	ldw	r9,64(sp)
 1001950:	18800216 	blt	r3,r2,100195c <___vfprintf_internal_r+0x27c>
 1001954:	10800c04 	addi	r2,r2,48
 1001958:	00000506 	br	1001970 <___vfprintf_internal_r+0x290>
 100195c:	d8c00e17 	ldw	r3,56(sp)
 1001960:	18000226 	beq	r3,zero,100196c <___vfprintf_internal_r+0x28c>
 1001964:	10800dc4 	addi	r2,r2,55
 1001968:	00000106 	br	1001970 <___vfprintf_internal_r+0x290>
 100196c:	108015c4 	addi	r2,r2,87
 1001970:	e0800005 	stb	r2,0(fp)
 1001974:	b02f883a 	mov	r23,r22
 1001978:	e7000044 	addi	fp,fp,1
 100197c:	003fe806 	br	1001920 <__alt_data_end+0xff48fe20>
 1001980:	e6efc83a 	sub	r23,fp,sp
 1001984:	9dc5c83a 	sub	r2,r19,r23
 1001988:	0080090e 	bge	zero,r2,10019b0 <___vfprintf_internal_r+0x2d0>
 100198c:	e085883a 	add	r2,fp,r2
 1001990:	01400c04 	movi	r5,48
 1001994:	d8c00917 	ldw	r3,36(sp)
 1001998:	e009883a 	mov	r4,fp
 100199c:	e0c0032e 	bgeu	fp,r3,10019ac <___vfprintf_internal_r+0x2cc>
 10019a0:	e7000044 	addi	fp,fp,1
 10019a4:	21400005 	stb	r5,0(r4)
 10019a8:	e0bffa1e 	bne	fp,r2,1001994 <__alt_data_end+0xff48fe94>
 10019ac:	e6efc83a 	sub	r23,fp,sp
 10019b0:	d8c00b17 	ldw	r3,44(sp)
 10019b4:	4dd1883a 	add	r8,r9,r23
 10019b8:	922dc83a 	sub	r22,r18,r8
 10019bc:	18001626 	beq	r3,zero,1001a18 <___vfprintf_internal_r+0x338>
 10019c0:	48000a26 	beq	r9,zero,10019ec <___vfprintf_internal_r+0x30c>
 10019c4:	00800b44 	movi	r2,45
 10019c8:	d8800805 	stb	r2,32(sp)
 10019cc:	88800117 	ldw	r2,4(r17)
 10019d0:	01c00044 	movi	r7,1
 10019d4:	d9800804 	addi	r6,sp,32
 10019d8:	880b883a 	mov	r5,r17
 10019dc:	a009883a 	mov	r4,r20
 10019e0:	103ee83a 	callr	r2
 10019e4:	10004a1e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 10019e8:	84000044 	addi	r16,r16,1
 10019ec:	0580070e 	bge	zero,r22,1001a0c <___vfprintf_internal_r+0x32c>
 10019f0:	b00f883a 	mov	r7,r22
 10019f4:	01800c04 	movi	r6,48
 10019f8:	880b883a 	mov	r5,r17
 10019fc:	a009883a 	mov	r4,r20
 1001a00:	10016740 	call	1001674 <print_repeat>
 1001a04:	1000421e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 1001a08:	85a1883a 	add	r16,r16,r22
 1001a0c:	e02d883a 	mov	r22,fp
 1001a10:	bf2fc83a 	sub	r23,r23,fp
 1001a14:	00002006 	br	1001a98 <___vfprintf_internal_r+0x3b8>
 1001a18:	0580090e 	bge	zero,r22,1001a40 <___vfprintf_internal_r+0x360>
 1001a1c:	b00f883a 	mov	r7,r22
 1001a20:	01800804 	movi	r6,32
 1001a24:	880b883a 	mov	r5,r17
 1001a28:	a009883a 	mov	r4,r20
 1001a2c:	da401015 	stw	r9,64(sp)
 1001a30:	10016740 	call	1001674 <print_repeat>
 1001a34:	da401017 	ldw	r9,64(sp)
 1001a38:	1000351e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 1001a3c:	85a1883a 	add	r16,r16,r22
 1001a40:	483ff226 	beq	r9,zero,1001a0c <__alt_data_end+0xff48ff0c>
 1001a44:	00800b44 	movi	r2,45
 1001a48:	d8800805 	stb	r2,32(sp)
 1001a4c:	88800117 	ldw	r2,4(r17)
 1001a50:	01c00044 	movi	r7,1
 1001a54:	d9800804 	addi	r6,sp,32
 1001a58:	880b883a 	mov	r5,r17
 1001a5c:	a009883a 	mov	r4,r20
 1001a60:	103ee83a 	callr	r2
 1001a64:	10002a1e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 1001a68:	84000044 	addi	r16,r16,1
 1001a6c:	003fe706 	br	1001a0c <__alt_data_end+0xff48ff0c>
 1001a70:	b5bfffc4 	addi	r22,r22,-1
 1001a74:	b0800003 	ldbu	r2,0(r22)
 1001a78:	01c00044 	movi	r7,1
 1001a7c:	d9800804 	addi	r6,sp,32
 1001a80:	d8800805 	stb	r2,32(sp)
 1001a84:	88800117 	ldw	r2,4(r17)
 1001a88:	880b883a 	mov	r5,r17
 1001a8c:	a009883a 	mov	r4,r20
 1001a90:	103ee83a 	callr	r2
 1001a94:	10001e1e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 1001a98:	8585c83a 	sub	r2,r16,r22
 1001a9c:	b5c9883a 	add	r4,r22,r23
 1001aa0:	e085883a 	add	r2,fp,r2
 1001aa4:	013ff216 	blt	zero,r4,1001a70 <__alt_data_end+0xff48ff70>
 1001aa8:	1021883a 	mov	r16,r2
 1001aac:	dd800d17 	ldw	r22,52(sp)
 1001ab0:	00004406 	br	1001bc4 <___vfprintf_internal_r+0x4e4>
 1001ab4:	00800044 	movi	r2,1
 1001ab8:	1480080e 	bge	r2,r18,1001adc <___vfprintf_internal_r+0x3fc>
 1001abc:	95ffffc4 	addi	r23,r18,-1
 1001ac0:	b80f883a 	mov	r7,r23
 1001ac4:	01800804 	movi	r6,32
 1001ac8:	880b883a 	mov	r5,r17
 1001acc:	a009883a 	mov	r4,r20
 1001ad0:	10016740 	call	1001674 <print_repeat>
 1001ad4:	10000e1e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 1001ad8:	85e1883a 	add	r16,r16,r23
 1001adc:	b0800017 	ldw	r2,0(r22)
 1001ae0:	01c00044 	movi	r7,1
 1001ae4:	d80d883a 	mov	r6,sp
 1001ae8:	d8800005 	stb	r2,0(sp)
 1001aec:	88800117 	ldw	r2,4(r17)
 1001af0:	880b883a 	mov	r5,r17
 1001af4:	a009883a 	mov	r4,r20
 1001af8:	b5c00104 	addi	r23,r22,4
 1001afc:	103ee83a 	callr	r2
 1001b00:	1000031e 	bne	r2,zero,1001b10 <___vfprintf_internal_r+0x430>
 1001b04:	84000044 	addi	r16,r16,1
 1001b08:	b82d883a 	mov	r22,r23
 1001b0c:	00002d06 	br	1001bc4 <___vfprintf_internal_r+0x4e4>
 1001b10:	00bfffc4 	movi	r2,-1
 1001b14:	00003106 	br	1001bdc <___vfprintf_internal_r+0x4fc>
 1001b18:	b5c00017 	ldw	r23,0(r22)
 1001b1c:	b7000104 	addi	fp,r22,4
 1001b20:	b809883a 	mov	r4,r23
 1001b24:	10016580 	call	1001658 <strlen>
 1001b28:	9091c83a 	sub	r8,r18,r2
 1001b2c:	102d883a 	mov	r22,r2
 1001b30:	0200090e 	bge	zero,r8,1001b58 <___vfprintf_internal_r+0x478>
 1001b34:	400f883a 	mov	r7,r8
 1001b38:	01800804 	movi	r6,32
 1001b3c:	880b883a 	mov	r5,r17
 1001b40:	a009883a 	mov	r4,r20
 1001b44:	da001015 	stw	r8,64(sp)
 1001b48:	10016740 	call	1001674 <print_repeat>
 1001b4c:	da001017 	ldw	r8,64(sp)
 1001b50:	103fef1e 	bne	r2,zero,1001b10 <__alt_data_end+0xff490010>
 1001b54:	8221883a 	add	r16,r16,r8
 1001b58:	88800117 	ldw	r2,4(r17)
 1001b5c:	b00f883a 	mov	r7,r22
 1001b60:	b80d883a 	mov	r6,r23
 1001b64:	880b883a 	mov	r5,r17
 1001b68:	a009883a 	mov	r4,r20
 1001b6c:	103ee83a 	callr	r2
 1001b70:	103fe71e 	bne	r2,zero,1001b10 <__alt_data_end+0xff490010>
 1001b74:	85a1883a 	add	r16,r16,r22
 1001b78:	e02d883a 	mov	r22,fp
 1001b7c:	00001106 	br	1001bc4 <___vfprintf_internal_r+0x4e4>
 1001b80:	00c00044 	movi	r3,1
 1001b84:	04ffffc4 	movi	r19,-1
 1001b88:	d8000e15 	stw	zero,56(sp)
 1001b8c:	d8c00a15 	stw	r3,40(sp)
 1001b90:	05400284 	movi	r21,10
 1001b94:	9825883a 	mov	r18,r19
 1001b98:	d8000c15 	stw	zero,48(sp)
 1001b9c:	d8000b15 	stw	zero,44(sp)
 1001ba0:	182f883a 	mov	r23,r3
 1001ba4:	00000806 	br	1001bc8 <___vfprintf_internal_r+0x4e8>
 1001ba8:	ddc00b15 	stw	r23,44(sp)
 1001bac:	05c00084 	movi	r23,2
 1001bb0:	00000506 	br	1001bc8 <___vfprintf_internal_r+0x4e8>
 1001bb4:	00c00044 	movi	r3,1
 1001bb8:	d8c00c15 	stw	r3,48(sp)
 1001bbc:	05c000c4 	movi	r23,3
 1001bc0:	00000106 	br	1001bc8 <___vfprintf_internal_r+0x4e8>
 1001bc4:	002f883a 	mov	r23,zero
 1001bc8:	d8c00f17 	ldw	r3,60(sp)
 1001bcc:	18c00044 	addi	r3,r3,1
 1001bd0:	d8c00f15 	stw	r3,60(sp)
 1001bd4:	003edc06 	br	1001748 <__alt_data_end+0xff48fc48>
 1001bd8:	8005883a 	mov	r2,r16
 1001bdc:	dfc01a17 	ldw	ra,104(sp)
 1001be0:	df001917 	ldw	fp,100(sp)
 1001be4:	ddc01817 	ldw	r23,96(sp)
 1001be8:	dd801717 	ldw	r22,92(sp)
 1001bec:	dd401617 	ldw	r21,88(sp)
 1001bf0:	dd001517 	ldw	r20,84(sp)
 1001bf4:	dcc01417 	ldw	r19,80(sp)
 1001bf8:	dc801317 	ldw	r18,76(sp)
 1001bfc:	dc401217 	ldw	r17,72(sp)
 1001c00:	dc001117 	ldw	r16,68(sp)
 1001c04:	dec01b04 	addi	sp,sp,108
 1001c08:	f800283a 	ret

01001c0c <__vfprintf_internal>:
 1001c0c:	00804074 	movhi	r2,257
 1001c10:	10a68f04 	addi	r2,r2,-26052
 1001c14:	300f883a 	mov	r7,r6
 1001c18:	280d883a 	mov	r6,r5
 1001c1c:	200b883a 	mov	r5,r4
 1001c20:	11000017 	ldw	r4,0(r2)
 1001c24:	10016e01 	jmpi	10016e0 <___vfprintf_internal_r>

01001c28 <print_e>:
 1001c28:	defff404 	addi	sp,sp,-48
 1001c2c:	dc000715 	stw	r16,28(sp)
 1001c30:	d8c00504 	addi	r3,sp,20
 1001c34:	dc000c17 	ldw	r16,48(sp)
 1001c38:	d8c00315 	stw	r3,12(sp)
 1001c3c:	d8c00604 	addi	r3,sp,24
 1001c40:	d8c00215 	stw	r3,8(sp)
 1001c44:	d8c00404 	addi	r3,sp,16
 1001c48:	3805883a 	mov	r2,r7
 1001c4c:	d8c00115 	stw	r3,4(sp)
 1001c50:	80c00044 	addi	r3,r16,1
 1001c54:	dc800915 	stw	r18,36(sp)
 1001c58:	d8c00015 	stw	r3,0(sp)
 1001c5c:	2825883a 	mov	r18,r5
 1001c60:	01c00084 	movi	r7,2
 1001c64:	300b883a 	mov	r5,r6
 1001c68:	100d883a 	mov	r6,r2
 1001c6c:	dc400815 	stw	r17,32(sp)
 1001c70:	dfc00b15 	stw	ra,44(sp)
 1001c74:	dcc00a15 	stw	r19,40(sp)
 1001c78:	dc400d17 	ldw	r17,52(sp)
 1001c7c:	1003bfc0 	call	1003bfc <_dtoa_r>
 1001c80:	d8c00417 	ldw	r3,16(sp)
 1001c84:	0109c3c4 	movi	r4,9999
 1001c88:	1900041e 	bne	r3,r4,1001c9c <print_e+0x74>
 1001c8c:	100b883a 	mov	r5,r2
 1001c90:	9009883a 	mov	r4,r18
 1001c94:	10039580 	call	1003958 <strcpy>
 1001c98:	00005506 	br	1001df0 <print_e+0x1c8>
 1001c9c:	11800044 	addi	r6,r2,1
 1001ca0:	10800003 	ldbu	r2,0(r2)
 1001ca4:	8827883a 	mov	r19,r17
 1001ca8:	90800005 	stb	r2,0(r18)
 1001cac:	d8800e17 	ldw	r2,56(sp)
 1001cb0:	1000031e 	bne	r2,zero,1001cc0 <print_e+0x98>
 1001cb4:	8000021e 	bne	r16,zero,1001cc0 <print_e+0x98>
 1001cb8:	90800044 	addi	r2,r18,1
 1001cbc:	00000906 	br	1001ce4 <print_e+0xbc>
 1001cc0:	01000b84 	movi	r4,46
 1001cc4:	90800084 	addi	r2,r18,2
 1001cc8:	91000045 	stb	r4,1(r18)
 1001ccc:	00000506 	br	1001ce4 <print_e+0xbc>
 1001cd0:	04000a0e 	bge	zero,r16,1001cfc <print_e+0xd4>
 1001cd4:	11400005 	stb	r5,0(r2)
 1001cd8:	31800044 	addi	r6,r6,1
 1001cdc:	843fffc4 	addi	r16,r16,-1
 1001ce0:	10800044 	addi	r2,r2,1
 1001ce4:	31400003 	ldbu	r5,0(r6)
 1001ce8:	1009883a 	mov	r4,r2
 1001cec:	29c03fcc 	andi	r7,r5,255
 1001cf0:	39c0201c 	xori	r7,r7,128
 1001cf4:	39ffe004 	addi	r7,r7,-128
 1001cf8:	383ff51e 	bne	r7,zero,1001cd0 <__alt_data_end+0xff4901d0>
 1001cfc:	8c403fcc 	andi	r17,r17,255
 1001d00:	8c40201c 	xori	r17,r17,128
 1001d04:	8c7fe004 	addi	r17,r17,-128
 1001d08:	014019c4 	movi	r5,103
 1001d0c:	89400d26 	beq	r17,r5,1001d44 <print_e+0x11c>
 1001d10:	014011c4 	movi	r5,71
 1001d14:	89400d26 	beq	r17,r5,1001d4c <print_e+0x124>
 1001d18:	800b883a 	mov	r5,r16
 1001d1c:	01800c04 	movi	r6,48
 1001d20:	0140040e 	bge	zero,r5,1001d34 <print_e+0x10c>
 1001d24:	11800005 	stb	r6,0(r2)
 1001d28:	297fffc4 	addi	r5,r5,-1
 1001d2c:	10800044 	addi	r2,r2,1
 1001d30:	003ffb06 	br	1001d20 <__alt_data_end+0xff490220>
 1001d34:	8000010e 	bge	r16,zero,1001d3c <print_e+0x114>
 1001d38:	0021883a 	mov	r16,zero
 1001d3c:	2409883a 	add	r4,r4,r16
 1001d40:	00000306 	br	1001d50 <print_e+0x128>
 1001d44:	04c01944 	movi	r19,101
 1001d48:	00000106 	br	1001d50 <print_e+0x128>
 1001d4c:	04c01144 	movi	r19,69
 1001d50:	18bfffc4 	addi	r2,r3,-1
 1001d54:	24800084 	addi	r18,r4,2
 1001d58:	24c00005 	stb	r19,0(r4)
 1001d5c:	d8800415 	stw	r2,16(sp)
 1001d60:	9021883a 	mov	r16,r18
 1001d64:	1000050e 	bge	r2,zero,1001d7c <print_e+0x154>
 1001d68:	00c00b44 	movi	r3,45
 1001d6c:	0085c83a 	sub	r2,zero,r2
 1001d70:	20c00045 	stb	r3,1(r4)
 1001d74:	d8800415 	stw	r2,16(sp)
 1001d78:	00000206 	br	1001d84 <print_e+0x15c>
 1001d7c:	00800ac4 	movi	r2,43
 1001d80:	20800045 	stb	r2,1(r4)
 1001d84:	dc400417 	ldw	r17,16(sp)
 1001d88:	008018c4 	movi	r2,99
 1001d8c:	14400b0e 	bge	r2,r17,1001dbc <print_e+0x194>
 1001d90:	01401904 	movi	r5,100
 1001d94:	8809883a 	mov	r4,r17
 1001d98:	10050640 	call	1005064 <__divsi3>
 1001d9c:	10c00c04 	addi	r3,r2,48
 1001da0:	90c00005 	stb	r3,0(r18)
 1001da4:	017fe704 	movi	r5,-100
 1001da8:	1009883a 	mov	r4,r2
 1001dac:	10013440 	call	1001344 <__mulsi3>
 1001db0:	1445883a 	add	r2,r2,r17
 1001db4:	94000044 	addi	r16,r18,1
 1001db8:	d8800415 	stw	r2,16(sp)
 1001dbc:	dc400417 	ldw	r17,16(sp)
 1001dc0:	01400284 	movi	r5,10
 1001dc4:	8809883a 	mov	r4,r17
 1001dc8:	10050640 	call	1005064 <__divsi3>
 1001dcc:	10c00c04 	addi	r3,r2,48
 1001dd0:	80c00005 	stb	r3,0(r16)
 1001dd4:	017ffd84 	movi	r5,-10
 1001dd8:	1009883a 	mov	r4,r2
 1001ddc:	10013440 	call	1001344 <__mulsi3>
 1001de0:	1445883a 	add	r2,r2,r17
 1001de4:	10800c04 	addi	r2,r2,48
 1001de8:	80800045 	stb	r2,1(r16)
 1001dec:	80000085 	stb	zero,2(r16)
 1001df0:	dfc00b17 	ldw	ra,44(sp)
 1001df4:	dcc00a17 	ldw	r19,40(sp)
 1001df8:	dc800917 	ldw	r18,36(sp)
 1001dfc:	dc400817 	ldw	r17,32(sp)
 1001e00:	dc000717 	ldw	r16,28(sp)
 1001e04:	dec00c04 	addi	sp,sp,48
 1001e08:	f800283a 	ret

01001e0c <fcvtbuf>:
 1001e0c:	defff304 	addi	sp,sp,-52
 1001e10:	dc000515 	stw	r16,20(sp)
 1001e14:	dc000e17 	ldw	r16,56(sp)
 1001e18:	00804074 	movhi	r2,257
 1001e1c:	dd800b15 	stw	r22,44(sp)
 1001e20:	dd400a15 	stw	r21,40(sp)
 1001e24:	dd000915 	stw	r20,36(sp)
 1001e28:	dcc00815 	stw	r19,32(sp)
 1001e2c:	dc800715 	stw	r18,28(sp)
 1001e30:	dc400615 	stw	r17,24(sp)
 1001e34:	10a68f04 	addi	r2,r2,-26052
 1001e38:	dfc00c15 	stw	ra,48(sp)
 1001e3c:	2029883a 	mov	r20,r4
 1001e40:	2827883a 	mov	r19,r5
 1001e44:	3025883a 	mov	r18,r6
 1001e48:	382b883a 	mov	r21,r7
 1001e4c:	dd800d17 	ldw	r22,52(sp)
 1001e50:	14400017 	ldw	r17,0(r2)
 1001e54:	80000c1e 	bne	r16,zero,1001e88 <fcvtbuf+0x7c>
 1001e58:	88c00617 	ldw	r3,24(r17)
 1001e5c:	308008c4 	addi	r2,r6,35
 1001e60:	10c00816 	blt	r2,r3,1001e84 <fcvtbuf+0x78>
 1001e64:	89400717 	ldw	r5,28(r17)
 1001e68:	34000904 	addi	r16,r6,36
 1001e6c:	800d883a 	mov	r6,r16
 1001e70:	8809883a 	mov	r4,r17
 1001e74:	10038640 	call	1003864 <_realloc_r>
 1001e78:	10003426 	beq	r2,zero,1001f4c <fcvtbuf+0x140>
 1001e7c:	8c000615 	stw	r16,24(r17)
 1001e80:	88800715 	stw	r2,28(r17)
 1001e84:	8c000717 	ldw	r16,28(r17)
 1001e88:	000d883a 	mov	r6,zero
 1001e8c:	01cffc34 	movhi	r7,16368
 1001e90:	a009883a 	mov	r4,r20
 1001e94:	980b883a 	mov	r5,r19
 1001e98:	10065f80 	call	10065f8 <__ledf2>
 1001e9c:	10000d0e 	bge	r2,zero,1001ed4 <fcvtbuf+0xc8>
 1001ea0:	000d883a 	mov	r6,zero
 1001ea4:	01effc34 	movhi	r7,49136
 1001ea8:	a009883a 	mov	r4,r20
 1001eac:	980b883a 	mov	r5,r19
 1001eb0:	100651c0 	call	100651c <__gedf2>
 1001eb4:	0080070e 	bge	zero,r2,1001ed4 <fcvtbuf+0xc8>
 1001eb8:	d8800404 	addi	r2,sp,16
 1001ebc:	d8800315 	stw	r2,12(sp)
 1001ec0:	dd800215 	stw	r22,8(sp)
 1001ec4:	dd400115 	stw	r21,4(sp)
 1001ec8:	dc800015 	stw	r18,0(sp)
 1001ecc:	01c00084 	movi	r7,2
 1001ed0:	00000606 	br	1001eec <fcvtbuf+0xe0>
 1001ed4:	d8800404 	addi	r2,sp,16
 1001ed8:	d8800315 	stw	r2,12(sp)
 1001edc:	dd800215 	stw	r22,8(sp)
 1001ee0:	dd400115 	stw	r21,4(sp)
 1001ee4:	dc800015 	stw	r18,0(sp)
 1001ee8:	01c000c4 	movi	r7,3
 1001eec:	8809883a 	mov	r4,r17
 1001ef0:	a00b883a 	mov	r5,r20
 1001ef4:	980d883a 	mov	r6,r19
 1001ef8:	1003bfc0 	call	1003bfc <_dtoa_r>
 1001efc:	a9000017 	ldw	r4,0(r21)
 1001f00:	8007883a 	mov	r3,r16
 1001f04:	0109c83a 	sub	r4,zero,r4
 1001f08:	2409c83a 	sub	r4,r4,r16
 1001f0c:	d9400417 	ldw	r5,16(sp)
 1001f10:	1140052e 	bgeu	r2,r5,1001f28 <fcvtbuf+0x11c>
 1001f14:	11400003 	ldbu	r5,0(r2)
 1001f18:	18c00044 	addi	r3,r3,1
 1001f1c:	10800044 	addi	r2,r2,1
 1001f20:	197fffc5 	stb	r5,-1(r3)
 1001f24:	003ff906 	br	1001f0c <__alt_data_end+0xff49040c>
 1001f28:	01400c04 	movi	r5,48
 1001f2c:	1905883a 	add	r2,r3,r4
 1001f30:	1480030e 	bge	r2,r18,1001f40 <fcvtbuf+0x134>
 1001f34:	19400005 	stb	r5,0(r3)
 1001f38:	18c00044 	addi	r3,r3,1
 1001f3c:	003ffb06 	br	1001f2c <__alt_data_end+0xff49042c>
 1001f40:	18000005 	stb	zero,0(r3)
 1001f44:	8005883a 	mov	r2,r16
 1001f48:	00000106 	br	1001f50 <fcvtbuf+0x144>
 1001f4c:	0005883a 	mov	r2,zero
 1001f50:	dfc00c17 	ldw	ra,48(sp)
 1001f54:	dd800b17 	ldw	r22,44(sp)
 1001f58:	dd400a17 	ldw	r21,40(sp)
 1001f5c:	dd000917 	ldw	r20,36(sp)
 1001f60:	dcc00817 	ldw	r19,32(sp)
 1001f64:	dc800717 	ldw	r18,28(sp)
 1001f68:	dc400617 	ldw	r17,24(sp)
 1001f6c:	dc000517 	ldw	r16,20(sp)
 1001f70:	dec00d04 	addi	sp,sp,52
 1001f74:	f800283a 	ret

01001f78 <ecvtbuf>:
 1001f78:	defff404 	addi	sp,sp,-48
 1001f7c:	dc000515 	stw	r16,20(sp)
 1001f80:	dc000d17 	ldw	r16,52(sp)
 1001f84:	00804074 	movhi	r2,257
 1001f88:	dd400a15 	stw	r21,40(sp)
 1001f8c:	dd000915 	stw	r20,36(sp)
 1001f90:	dcc00815 	stw	r19,32(sp)
 1001f94:	dc800715 	stw	r18,28(sp)
 1001f98:	dc400615 	stw	r17,24(sp)
 1001f9c:	10a68f04 	addi	r2,r2,-26052
 1001fa0:	dfc00b15 	stw	ra,44(sp)
 1001fa4:	2029883a 	mov	r20,r4
 1001fa8:	2827883a 	mov	r19,r5
 1001fac:	3025883a 	mov	r18,r6
 1001fb0:	382b883a 	mov	r21,r7
 1001fb4:	14400017 	ldw	r17,0(r2)
 1001fb8:	80000b1e 	bne	r16,zero,1001fe8 <ecvtbuf+0x70>
 1001fbc:	88800617 	ldw	r2,24(r17)
 1001fc0:	30800816 	blt	r6,r2,1001fe4 <ecvtbuf+0x6c>
 1001fc4:	89400717 	ldw	r5,28(r17)
 1001fc8:	34000044 	addi	r16,r6,1
 1001fcc:	800d883a 	mov	r6,r16
 1001fd0:	8809883a 	mov	r4,r17
 1001fd4:	10038640 	call	1003864 <_realloc_r>
 1001fd8:	10001f26 	beq	r2,zero,1002058 <ecvtbuf+0xe0>
 1001fdc:	8c000615 	stw	r16,24(r17)
 1001fe0:	88800715 	stw	r2,28(r17)
 1001fe4:	8c000717 	ldw	r16,28(r17)
 1001fe8:	d8800404 	addi	r2,sp,16
 1001fec:	d8800315 	stw	r2,12(sp)
 1001ff0:	d8800c17 	ldw	r2,48(sp)
 1001ff4:	dd400115 	stw	r21,4(sp)
 1001ff8:	dc800015 	stw	r18,0(sp)
 1001ffc:	d8800215 	stw	r2,8(sp)
 1002000:	01c00084 	movi	r7,2
 1002004:	a00b883a 	mov	r5,r20
 1002008:	980d883a 	mov	r6,r19
 100200c:	8809883a 	mov	r4,r17
 1002010:	1003bfc0 	call	1003bfc <_dtoa_r>
 1002014:	8007883a 	mov	r3,r16
 1002018:	d9000417 	ldw	r4,16(sp)
 100201c:	1100052e 	bgeu	r2,r4,1002034 <ecvtbuf+0xbc>
 1002020:	11000003 	ldbu	r4,0(r2)
 1002024:	18c00044 	addi	r3,r3,1
 1002028:	10800044 	addi	r2,r2,1
 100202c:	193fffc5 	stb	r4,-1(r3)
 1002030:	003ff906 	br	1002018 <__alt_data_end+0xff490518>
 1002034:	01000c04 	movi	r4,48
 1002038:	1c05c83a 	sub	r2,r3,r16
 100203c:	1480030e 	bge	r2,r18,100204c <ecvtbuf+0xd4>
 1002040:	19000005 	stb	r4,0(r3)
 1002044:	18c00044 	addi	r3,r3,1
 1002048:	003ffb06 	br	1002038 <__alt_data_end+0xff490538>
 100204c:	18000005 	stb	zero,0(r3)
 1002050:	8005883a 	mov	r2,r16
 1002054:	00000106 	br	100205c <ecvtbuf+0xe4>
 1002058:	0005883a 	mov	r2,zero
 100205c:	dfc00b17 	ldw	ra,44(sp)
 1002060:	dd400a17 	ldw	r21,40(sp)
 1002064:	dd000917 	ldw	r20,36(sp)
 1002068:	dcc00817 	ldw	r19,32(sp)
 100206c:	dc800717 	ldw	r18,28(sp)
 1002070:	dc400617 	ldw	r17,24(sp)
 1002074:	dc000517 	ldw	r16,20(sp)
 1002078:	dec00c04 	addi	sp,sp,48
 100207c:	f800283a 	ret

01002080 <_gcvt>:
 1002080:	defff104 	addi	sp,sp,-60
 1002084:	dc400815 	stw	r17,32(sp)
 1002088:	3023883a 	mov	r17,r6
 100208c:	dd400c15 	stw	r21,48(sp)
 1002090:	dd000b15 	stw	r20,44(sp)
 1002094:	dc800915 	stw	r18,36(sp)
 1002098:	202b883a 	mov	r21,r4
 100209c:	2825883a 	mov	r18,r5
 10020a0:	3829883a 	mov	r20,r7
 10020a4:	2809883a 	mov	r4,r5
 10020a8:	000d883a 	mov	r6,zero
 10020ac:	000f883a 	mov	r7,zero
 10020b0:	880b883a 	mov	r5,r17
 10020b4:	dd800d15 	stw	r22,52(sp)
 10020b8:	dcc00a15 	stw	r19,40(sp)
 10020bc:	dc000715 	stw	r16,28(sp)
 10020c0:	dfc00e15 	stw	ra,56(sp)
 10020c4:	dc000f17 	ldw	r16,60(sp)
 10020c8:	dd801017 	ldw	r22,64(sp)
 10020cc:	dcc01117 	ldw	r19,68(sp)
 10020d0:	10065f80 	call	10065f8 <__ledf2>
 10020d4:	1000010e 	bge	r2,zero,10020dc <_gcvt+0x5c>
 10020d8:	8c60003c 	xorhi	r17,r17,32768
 10020dc:	000d883a 	mov	r6,zero
 10020e0:	000f883a 	mov	r7,zero
 10020e4:	9009883a 	mov	r4,r18
 10020e8:	880b883a 	mov	r5,r17
 10020ec:	10064940 	call	1006494 <__eqdf2>
 10020f0:	1000041e 	bne	r2,zero,1002104 <_gcvt+0x84>
 10020f4:	00800c04 	movi	r2,48
 10020f8:	80800005 	stb	r2,0(r16)
 10020fc:	80000045 	stb	zero,1(r16)
 1002100:	00009206 	br	100234c <_gcvt+0x2cc>
 1002104:	01bac734 	movhi	r6,60188
 1002108:	01cfc6b4 	movhi	r7,16154
 100210c:	3190cb44 	addi	r6,r6,17197
 1002110:	39cdb884 	addi	r7,r7,14050
 1002114:	9009883a 	mov	r4,r18
 1002118:	880b883a 	mov	r5,r17
 100211c:	10065f80 	call	10065f8 <__ledf2>
 1002120:	00800d16 	blt	zero,r2,1002158 <_gcvt+0xd8>
 1002124:	b5803fcc 	andi	r22,r22,255
 1002128:	b580201c 	xori	r22,r22,128
 100212c:	b5bfe004 	addi	r22,r22,-128
 1002130:	a53fffc4 	addi	r20,r20,-1
 1002134:	dcc00215 	stw	r19,8(sp)
 1002138:	dd800115 	stw	r22,4(sp)
 100213c:	dd000015 	stw	r20,0(sp)
 1002140:	900d883a 	mov	r6,r18
 1002144:	880f883a 	mov	r7,r17
 1002148:	800b883a 	mov	r5,r16
 100214c:	a809883a 	mov	r4,r21
 1002150:	1001c280 	call	1001c28 <print_e>
 1002154:	00007d06 	br	100234c <_gcvt+0x2cc>
 1002158:	a009883a 	mov	r4,r20
 100215c:	100357c0 	call	100357c <_mprec_log10>
 1002160:	100d883a 	mov	r6,r2
 1002164:	180f883a 	mov	r7,r3
 1002168:	9009883a 	mov	r4,r18
 100216c:	880b883a 	mov	r5,r17
 1002170:	100651c0 	call	100651c <__gedf2>
 1002174:	103feb0e 	bge	r2,zero,1002124 <__alt_data_end+0xff490624>
 1002178:	9009883a 	mov	r4,r18
 100217c:	000d883a 	mov	r6,zero
 1002180:	01cffc34 	movhi	r7,16368
 1002184:	880b883a 	mov	r5,r17
 1002188:	10065f80 	call	10065f8 <__ledf2>
 100218c:	d9000504 	addi	r4,sp,20
 1002190:	d8c00604 	addi	r3,sp,24
 1002194:	1000070e 	bge	r2,zero,10021b4 <_gcvt+0x134>
 1002198:	d8800404 	addi	r2,sp,16
 100219c:	d8800315 	stw	r2,12(sp)
 10021a0:	d9000215 	stw	r4,8(sp)
 10021a4:	d8c00115 	stw	r3,4(sp)
 10021a8:	dd000015 	stw	r20,0(sp)
 10021ac:	01c000c4 	movi	r7,3
 10021b0:	00000606 	br	10021cc <_gcvt+0x14c>
 10021b4:	d8800404 	addi	r2,sp,16
 10021b8:	d8800315 	stw	r2,12(sp)
 10021bc:	d9000215 	stw	r4,8(sp)
 10021c0:	d8c00115 	stw	r3,4(sp)
 10021c4:	dd000015 	stw	r20,0(sp)
 10021c8:	01c00084 	movi	r7,2
 10021cc:	a809883a 	mov	r4,r21
 10021d0:	900b883a 	mov	r5,r18
 10021d4:	880d883a 	mov	r6,r17
 10021d8:	1003bfc0 	call	1003bfc <_dtoa_r>
 10021dc:	d9000617 	ldw	r4,24(sp)
 10021e0:	00c9c3c4 	movi	r3,9999
 10021e4:	20c00226 	beq	r4,r3,10021f0 <_gcvt+0x170>
 10021e8:	8009883a 	mov	r4,r16
 10021ec:	00000a06 	br	1002218 <_gcvt+0x198>
 10021f0:	100b883a 	mov	r5,r2
 10021f4:	8009883a 	mov	r4,r16
 10021f8:	10039580 	call	1003958 <strcpy>
 10021fc:	00005306 	br	100234c <_gcvt+0x2cc>
 1002200:	01c01d0e 	bge	zero,r7,1002278 <_gcvt+0x1f8>
 1002204:	39ffffc4 	addi	r7,r7,-1
 1002208:	21800005 	stb	r6,0(r4)
 100220c:	10800044 	addi	r2,r2,1
 1002210:	d9c00615 	stw	r7,24(sp)
 1002214:	21000044 	addi	r4,r4,1
 1002218:	11800003 	ldbu	r6,0(r2)
 100221c:	a107c83a 	sub	r3,r20,r4
 1002220:	200b883a 	mov	r5,r4
 1002224:	32003fcc 	andi	r8,r6,255
 1002228:	4200201c 	xori	r8,r8,128
 100222c:	423fe004 	addi	r8,r8,-128
 1002230:	80c7883a 	add	r3,r16,r3
 1002234:	d9c00617 	ldw	r7,24(sp)
 1002238:	403ff11e 	bne	r8,zero,1002200 <__alt_data_end+0xff490700>
 100223c:	000d883a 	mov	r6,zero
 1002240:	38cfc83a 	sub	r7,r7,r3
 1002244:	02400c04 	movi	r9,48
 1002248:	00000506 	br	1002260 <_gcvt+0x1e0>
 100224c:	00c0070e 	bge	zero,r3,100226c <_gcvt+0x1ec>
 1002250:	22400005 	stb	r9,0(r4)
 1002254:	18ffffc4 	addi	r3,r3,-1
 1002258:	21000044 	addi	r4,r4,1
 100225c:	01800044 	movi	r6,1
 1002260:	38d1883a 	add	r8,r7,r3
 1002264:	200b883a 	mov	r5,r4
 1002268:	023ff816 	blt	zero,r8,100224c <__alt_data_end+0xff49074c>
 100226c:	31803fcc 	andi	r6,r6,255
 1002270:	30000126 	beq	r6,zero,1002278 <_gcvt+0x1f8>
 1002274:	da000615 	stw	r8,24(sp)
 1002278:	9800021e 	bne	r19,zero,1002284 <_gcvt+0x204>
 100227c:	11800007 	ldb	r6,0(r2)
 1002280:	30003126 	beq	r6,zero,1002348 <_gcvt+0x2c8>
 1002284:	8100031e 	bne	r16,r4,1002294 <_gcvt+0x214>
 1002288:	01000c04 	movi	r4,48
 100228c:	81400044 	addi	r5,r16,1
 1002290:	81000005 	stb	r4,0(r16)
 1002294:	d9800617 	ldw	r6,24(sp)
 1002298:	01000b84 	movi	r4,46
 100229c:	29000005 	stb	r4,0(r5)
 10022a0:	02000c04 	movi	r8,48
 10022a4:	29000044 	addi	r4,r5,1
 10022a8:	000b883a 	mov	r5,zero
 10022ac:	300f883a 	mov	r7,r6
 10022b0:	30000416 	blt	r6,zero,10022c4 <_gcvt+0x244>
 10022b4:	29403fcc 	andi	r5,r5,255
 10022b8:	28001226 	beq	r5,zero,1002304 <_gcvt+0x284>
 10022bc:	d9800615 	stw	r6,24(sp)
 10022c0:	00001006 	br	1002304 <_gcvt+0x284>
 10022c4:	31800044 	addi	r6,r6,1
 10022c8:	00c0050e 	bge	zero,r3,10022e0 <_gcvt+0x260>
 10022cc:	22000005 	stb	r8,0(r4)
 10022d0:	18ffffc4 	addi	r3,r3,-1
 10022d4:	21000044 	addi	r4,r4,1
 10022d8:	01400044 	movi	r5,1
 10022dc:	003ff306 	br	10022ac <__alt_data_end+0xff4907ac>
 10022e0:	29403fcc 	andi	r5,r5,255
 10022e4:	28000726 	beq	r5,zero,1002304 <_gcvt+0x284>
 10022e8:	d9c00615 	stw	r7,24(sp)
 10022ec:	00000506 	br	1002304 <_gcvt+0x284>
 10022f0:	00c00a0e 	bge	zero,r3,100231c <_gcvt+0x29c>
 10022f4:	21800005 	stb	r6,0(r4)
 10022f8:	10800044 	addi	r2,r2,1
 10022fc:	18ffffc4 	addi	r3,r3,-1
 1002300:	21000044 	addi	r4,r4,1
 1002304:	11800003 	ldbu	r6,0(r2)
 1002308:	200b883a 	mov	r5,r4
 100230c:	31c03fcc 	andi	r7,r6,255
 1002310:	39c0201c 	xori	r7,r7,128
 1002314:	39ffe004 	addi	r7,r7,-128
 1002318:	383ff51e 	bne	r7,zero,10022f0 <__alt_data_end+0xff4907f0>
 100231c:	98000a26 	beq	r19,zero,1002348 <_gcvt+0x2c8>
 1002320:	1805883a 	mov	r2,r3
 1002324:	01800c04 	movi	r6,48
 1002328:	0080040e 	bge	zero,r2,100233c <_gcvt+0x2bc>
 100232c:	21800005 	stb	r6,0(r4)
 1002330:	10bfffc4 	addi	r2,r2,-1
 1002334:	21000044 	addi	r4,r4,1
 1002338:	003ffb06 	br	1002328 <__alt_data_end+0xff490828>
 100233c:	1800010e 	bge	r3,zero,1002344 <_gcvt+0x2c4>
 1002340:	0007883a 	mov	r3,zero
 1002344:	28cb883a 	add	r5,r5,r3
 1002348:	28000005 	stb	zero,0(r5)
 100234c:	8005883a 	mov	r2,r16
 1002350:	dfc00e17 	ldw	ra,56(sp)
 1002354:	dd800d17 	ldw	r22,52(sp)
 1002358:	dd400c17 	ldw	r21,48(sp)
 100235c:	dd000b17 	ldw	r20,44(sp)
 1002360:	dcc00a17 	ldw	r19,40(sp)
 1002364:	dc800917 	ldw	r18,36(sp)
 1002368:	dc400817 	ldw	r17,32(sp)
 100236c:	dc000717 	ldw	r16,28(sp)
 1002370:	dec00f04 	addi	sp,sp,60
 1002374:	f800283a 	ret

01002378 <_dcvt>:
 1002378:	defff504 	addi	sp,sp,-44
 100237c:	d8800d07 	ldb	r2,52(sp)
 1002380:	dc400815 	stw	r17,32(sp)
 1002384:	dc000715 	stw	r16,28(sp)
 1002388:	2823883a 	mov	r17,r5
 100238c:	dfc00a15 	stw	ra,40(sp)
 1002390:	300b883a 	mov	r5,r6
 1002394:	dc800915 	stw	r18,36(sp)
 1002398:	018011c4 	movi	r6,71
 100239c:	3811883a 	mov	r8,r7
 10023a0:	dc000b17 	ldw	r16,44(sp)
 10023a4:	d8c00e17 	ldw	r3,56(sp)
 10023a8:	11807726 	beq	r2,r6,1002588 <_dcvt+0x210>
 10023ac:	30800516 	blt	r6,r2,10023c4 <_dcvt+0x4c>
 10023b0:	01801144 	movi	r6,69
 10023b4:	11807d26 	beq	r2,r6,10025ac <_dcvt+0x234>
 10023b8:	01801184 	movi	r6,70
 10023bc:	11800826 	beq	r2,r6,10023e0 <_dcvt+0x68>
 10023c0:	00008106 	br	10025c8 <_dcvt+0x250>
 10023c4:	01801984 	movi	r6,102
 10023c8:	11800526 	beq	r2,r6,10023e0 <_dcvt+0x68>
 10023cc:	018019c4 	movi	r6,103
 10023d0:	11806d26 	beq	r2,r6,1002588 <_dcvt+0x210>
 10023d4:	01801944 	movi	r6,101
 10023d8:	11807b1e 	bne	r2,r6,10025c8 <_dcvt+0x250>
 10023dc:	00007306 	br	10025ac <_dcvt+0x234>
 10023e0:	80000226 	beq	r16,zero,10023ec <_dcvt+0x74>
 10023e4:	04800044 	movi	r18,1
 10023e8:	00000106 	br	10023f0 <_dcvt+0x78>
 10023ec:	1825883a 	mov	r18,r3
 10023f0:	d8800404 	addi	r2,sp,16
 10023f4:	d8800315 	stw	r2,12(sp)
 10023f8:	d8800504 	addi	r2,sp,20
 10023fc:	d8800215 	stw	r2,8(sp)
 1002400:	d8800604 	addi	r2,sp,24
 1002404:	d8800115 	stw	r2,4(sp)
 1002408:	dc000015 	stw	r16,0(sp)
 100240c:	01c000c4 	movi	r7,3
 1002410:	400d883a 	mov	r6,r8
 1002414:	1003bfc0 	call	1003bfc <_dtoa_r>
 1002418:	d9000617 	ldw	r4,24(sp)
 100241c:	00c9c3c4 	movi	r3,9999
 1002420:	20c00326 	beq	r4,r3,1002430 <_dcvt+0xb8>
 1002424:	880f883a 	mov	r7,r17
 1002428:	100d883a 	mov	r6,r2
 100242c:	00000a06 	br	1002458 <_dcvt+0xe0>
 1002430:	100b883a 	mov	r5,r2
 1002434:	8809883a 	mov	r4,r17
 1002438:	10039580 	call	1003958 <strcpy>
 100243c:	00006206 	br	10025c8 <_dcvt+0x250>
 1002440:	01001c0e 	bge	zero,r4,10024b4 <_dcvt+0x13c>
 1002444:	213fffc4 	addi	r4,r4,-1
 1002448:	39400005 	stb	r5,0(r7)
 100244c:	31800044 	addi	r6,r6,1
 1002450:	d9000615 	stw	r4,24(sp)
 1002454:	39c00044 	addi	r7,r7,1
 1002458:	31400003 	ldbu	r5,0(r6)
 100245c:	3807883a 	mov	r3,r7
 1002460:	d9000617 	ldw	r4,24(sp)
 1002464:	2a003fcc 	andi	r8,r5,255
 1002468:	4200201c 	xori	r8,r8,128
 100246c:	423fe004 	addi	r8,r8,-128
 1002470:	403ff31e 	bne	r8,zero,1002440 <__alt_data_end+0xff490940>
 1002474:	02400c04 	movi	r9,48
 1002478:	21cbc83a 	sub	r5,r4,r7
 100247c:	194b883a 	add	r5,r3,r5
 1002480:	0140040e 	bge	zero,r5,1002494 <_dcvt+0x11c>
 1002484:	3a400005 	stb	r9,0(r7)
 1002488:	02000044 	movi	r8,1
 100248c:	39c00044 	addi	r7,r7,1
 1002490:	003ff906 	br	1002478 <__alt_data_end+0xff490978>
 1002494:	200b883a 	mov	r5,r4
 1002498:	2000010e 	bge	r4,zero,10024a0 <_dcvt+0x128>
 100249c:	000b883a 	mov	r5,zero
 10024a0:	42003fcc 	andi	r8,r8,255
 10024a4:	1947883a 	add	r3,r3,r5
 10024a8:	2149c83a 	sub	r4,r4,r5
 10024ac:	40000126 	beq	r8,zero,10024b4 <_dcvt+0x13c>
 10024b0:	d9000615 	stw	r4,24(sp)
 10024b4:	9000021e 	bne	r18,zero,10024c0 <_dcvt+0x148>
 10024b8:	31000007 	ldb	r4,0(r6)
 10024bc:	20003026 	beq	r4,zero,1002580 <_dcvt+0x208>
 10024c0:	1180031e 	bne	r2,r6,10024d0 <_dcvt+0x158>
 10024c4:	00800c04 	movi	r2,48
 10024c8:	18800005 	stb	r2,0(r3)
 10024cc:	18c00044 	addi	r3,r3,1
 10024d0:	d9000617 	ldw	r4,24(sp)
 10024d4:	00800b84 	movi	r2,46
 10024d8:	18800005 	stb	r2,0(r3)
 10024dc:	01c00c04 	movi	r7,48
 10024e0:	18800044 	addi	r2,r3,1
 10024e4:	0007883a 	mov	r3,zero
 10024e8:	200b883a 	mov	r5,r4
 10024ec:	20000416 	blt	r4,zero,1002500 <_dcvt+0x188>
 10024f0:	18c03fcc 	andi	r3,r3,255
 10024f4:	18001226 	beq	r3,zero,1002540 <_dcvt+0x1c8>
 10024f8:	d9000615 	stw	r4,24(sp)
 10024fc:	00001006 	br	1002540 <_dcvt+0x1c8>
 1002500:	21000044 	addi	r4,r4,1
 1002504:	0400050e 	bge	zero,r16,100251c <_dcvt+0x1a4>
 1002508:	11c00005 	stb	r7,0(r2)
 100250c:	843fffc4 	addi	r16,r16,-1
 1002510:	10800044 	addi	r2,r2,1
 1002514:	00c00044 	movi	r3,1
 1002518:	003ff306 	br	10024e8 <__alt_data_end+0xff4909e8>
 100251c:	18c03fcc 	andi	r3,r3,255
 1002520:	18000726 	beq	r3,zero,1002540 <_dcvt+0x1c8>
 1002524:	d9400615 	stw	r5,24(sp)
 1002528:	00000506 	br	1002540 <_dcvt+0x1c8>
 100252c:	0400140e 	bge	zero,r16,1002580 <_dcvt+0x208>
 1002530:	11000005 	stb	r4,0(r2)
 1002534:	31800044 	addi	r6,r6,1
 1002538:	843fffc4 	addi	r16,r16,-1
 100253c:	10800044 	addi	r2,r2,1
 1002540:	31000003 	ldbu	r4,0(r6)
 1002544:	1007883a 	mov	r3,r2
 1002548:	21403fcc 	andi	r5,r4,255
 100254c:	2940201c 	xori	r5,r5,128
 1002550:	297fe004 	addi	r5,r5,-128
 1002554:	283ff51e 	bne	r5,zero,100252c <__alt_data_end+0xff490a2c>
 1002558:	8009883a 	mov	r4,r16
 100255c:	01400c04 	movi	r5,48
 1002560:	0100040e 	bge	zero,r4,1002574 <_dcvt+0x1fc>
 1002564:	11400005 	stb	r5,0(r2)
 1002568:	213fffc4 	addi	r4,r4,-1
 100256c:	10800044 	addi	r2,r2,1
 1002570:	003ffb06 	br	1002560 <__alt_data_end+0xff490a60>
 1002574:	8000010e 	bge	r16,zero,100257c <_dcvt+0x204>
 1002578:	0021883a 	mov	r16,zero
 100257c:	1c07883a 	add	r3,r3,r16
 1002580:	18000005 	stb	zero,0(r3)
 1002584:	00001006 	br	10025c8 <_dcvt+0x250>
 1002588:	8000011e 	bne	r16,zero,1002590 <_dcvt+0x218>
 100258c:	04000044 	movi	r16,1
 1002590:	d8c00215 	stw	r3,8(sp)
 1002594:	d8800115 	stw	r2,4(sp)
 1002598:	dc400015 	stw	r17,0(sp)
 100259c:	800f883a 	mov	r7,r16
 10025a0:	400d883a 	mov	r6,r8
 10025a4:	10020800 	call	1002080 <_gcvt>
 10025a8:	00000706 	br	10025c8 <_dcvt+0x250>
 10025ac:	280d883a 	mov	r6,r5
 10025b0:	d8c00215 	stw	r3,8(sp)
 10025b4:	d8800115 	stw	r2,4(sp)
 10025b8:	dc000015 	stw	r16,0(sp)
 10025bc:	400f883a 	mov	r7,r8
 10025c0:	880b883a 	mov	r5,r17
 10025c4:	1001c280 	call	1001c28 <print_e>
 10025c8:	8805883a 	mov	r2,r17
 10025cc:	dfc00a17 	ldw	ra,40(sp)
 10025d0:	dc800917 	ldw	r18,36(sp)
 10025d4:	dc400817 	ldw	r17,32(sp)
 10025d8:	dc000717 	ldw	r16,28(sp)
 10025dc:	dec00b04 	addi	sp,sp,44
 10025e0:	f800283a 	ret

010025e4 <__sfvwrite_small_dev>:
 10025e4:	2880000b 	ldhu	r2,0(r5)
 10025e8:	1080020c 	andi	r2,r2,8
 10025ec:	10002126 	beq	r2,zero,1002674 <__sfvwrite_small_dev+0x90>
 10025f0:	2880008f 	ldh	r2,2(r5)
 10025f4:	defffa04 	addi	sp,sp,-24
 10025f8:	dc000015 	stw	r16,0(sp)
 10025fc:	dfc00515 	stw	ra,20(sp)
 1002600:	dd000415 	stw	r20,16(sp)
 1002604:	dcc00315 	stw	r19,12(sp)
 1002608:	dc800215 	stw	r18,8(sp)
 100260c:	dc400115 	stw	r17,4(sp)
 1002610:	2821883a 	mov	r16,r5
 1002614:	10001216 	blt	r2,zero,1002660 <__sfvwrite_small_dev+0x7c>
 1002618:	2027883a 	mov	r19,r4
 100261c:	3025883a 	mov	r18,r6
 1002620:	3823883a 	mov	r17,r7
 1002624:	05010004 	movi	r20,1024
 1002628:	04400b0e 	bge	zero,r17,1002658 <__sfvwrite_small_dev+0x74>
 100262c:	880f883a 	mov	r7,r17
 1002630:	a440010e 	bge	r20,r17,1002638 <__sfvwrite_small_dev+0x54>
 1002634:	01c10004 	movi	r7,1024
 1002638:	8140008f 	ldh	r5,2(r16)
 100263c:	900d883a 	mov	r6,r18
 1002640:	9809883a 	mov	r4,r19
 1002644:	10039840 	call	1003984 <_write_r>
 1002648:	0080050e 	bge	zero,r2,1002660 <__sfvwrite_small_dev+0x7c>
 100264c:	88a3c83a 	sub	r17,r17,r2
 1002650:	90a5883a 	add	r18,r18,r2
 1002654:	003ff406 	br	1002628 <__alt_data_end+0xff490b28>
 1002658:	0005883a 	mov	r2,zero
 100265c:	00000706 	br	100267c <__sfvwrite_small_dev+0x98>
 1002660:	8080000b 	ldhu	r2,0(r16)
 1002664:	10801014 	ori	r2,r2,64
 1002668:	8080000d 	sth	r2,0(r16)
 100266c:	00bfffc4 	movi	r2,-1
 1002670:	00000206 	br	100267c <__sfvwrite_small_dev+0x98>
 1002674:	00bfffc4 	movi	r2,-1
 1002678:	f800283a 	ret
 100267c:	dfc00517 	ldw	ra,20(sp)
 1002680:	dd000417 	ldw	r20,16(sp)
 1002684:	dcc00317 	ldw	r19,12(sp)
 1002688:	dc800217 	ldw	r18,8(sp)
 100268c:	dc400117 	ldw	r17,4(sp)
 1002690:	dc000017 	ldw	r16,0(sp)
 1002694:	dec00604 	addi	sp,sp,24
 1002698:	f800283a 	ret

0100269c <_Balloc>:
 100269c:	20800417 	ldw	r2,16(r4)
 10026a0:	defffc04 	addi	sp,sp,-16
 10026a4:	dc400115 	stw	r17,4(sp)
 10026a8:	dc000015 	stw	r16,0(sp)
 10026ac:	dfc00315 	stw	ra,12(sp)
 10026b0:	dc800215 	stw	r18,8(sp)
 10026b4:	2021883a 	mov	r16,r4
 10026b8:	2823883a 	mov	r17,r5
 10026bc:	1000071e 	bne	r2,zero,10026dc <_Balloc+0x40>
 10026c0:	01000404 	movi	r4,16
 10026c4:	1004ef40 	call	1004ef4 <malloc>
 10026c8:	80800415 	stw	r2,16(r16)
 10026cc:	10000115 	stw	zero,4(r2)
 10026d0:	10000215 	stw	zero,8(r2)
 10026d4:	10000015 	stw	zero,0(r2)
 10026d8:	10000315 	stw	zero,12(r2)
 10026dc:	84800417 	ldw	r18,16(r16)
 10026e0:	90800317 	ldw	r2,12(r18)
 10026e4:	10000a26 	beq	r2,zero,1002710 <_Balloc+0x74>
 10026e8:	80800417 	ldw	r2,16(r16)
 10026ec:	8c47883a 	add	r3,r17,r17
 10026f0:	18c7883a 	add	r3,r3,r3
 10026f4:	10800317 	ldw	r2,12(r2)
 10026f8:	10c7883a 	add	r3,r2,r3
 10026fc:	18800017 	ldw	r2,0(r3)
 1002700:	10000d26 	beq	r2,zero,1002738 <_Balloc+0x9c>
 1002704:	11000017 	ldw	r4,0(r2)
 1002708:	19000015 	stw	r4,0(r3)
 100270c:	00001406 	br	1002760 <_Balloc+0xc4>
 1002710:	01800844 	movi	r6,33
 1002714:	01400104 	movi	r5,4
 1002718:	8009883a 	mov	r4,r16
 100271c:	10036ac0 	call	10036ac <_calloc_r>
 1002720:	90800315 	stw	r2,12(r18)
 1002724:	80800417 	ldw	r2,16(r16)
 1002728:	10800317 	ldw	r2,12(r2)
 100272c:	103fee1e 	bne	r2,zero,10026e8 <__alt_data_end+0xff490be8>
 1002730:	0005883a 	mov	r2,zero
 1002734:	00000c06 	br	1002768 <_Balloc+0xcc>
 1002738:	01400044 	movi	r5,1
 100273c:	2c64983a 	sll	r18,r5,r17
 1002740:	8009883a 	mov	r4,r16
 1002744:	91800144 	addi	r6,r18,5
 1002748:	318d883a 	add	r6,r6,r6
 100274c:	318d883a 	add	r6,r6,r6
 1002750:	10036ac0 	call	10036ac <_calloc_r>
 1002754:	103ff626 	beq	r2,zero,1002730 <__alt_data_end+0xff490c30>
 1002758:	14400115 	stw	r17,4(r2)
 100275c:	14800215 	stw	r18,8(r2)
 1002760:	10000415 	stw	zero,16(r2)
 1002764:	10000315 	stw	zero,12(r2)
 1002768:	dfc00317 	ldw	ra,12(sp)
 100276c:	dc800217 	ldw	r18,8(sp)
 1002770:	dc400117 	ldw	r17,4(sp)
 1002774:	dc000017 	ldw	r16,0(sp)
 1002778:	dec00404 	addi	sp,sp,16
 100277c:	f800283a 	ret

01002780 <_Bfree>:
 1002780:	20800417 	ldw	r2,16(r4)
 1002784:	defffd04 	addi	sp,sp,-12
 1002788:	dc400115 	stw	r17,4(sp)
 100278c:	dc000015 	stw	r16,0(sp)
 1002790:	dfc00215 	stw	ra,8(sp)
 1002794:	2023883a 	mov	r17,r4
 1002798:	2821883a 	mov	r16,r5
 100279c:	1000071e 	bne	r2,zero,10027bc <_Bfree+0x3c>
 10027a0:	01000404 	movi	r4,16
 10027a4:	1004ef40 	call	1004ef4 <malloc>
 10027a8:	88800415 	stw	r2,16(r17)
 10027ac:	10000115 	stw	zero,4(r2)
 10027b0:	10000215 	stw	zero,8(r2)
 10027b4:	10000015 	stw	zero,0(r2)
 10027b8:	10000315 	stw	zero,12(r2)
 10027bc:	80000926 	beq	r16,zero,10027e4 <_Bfree+0x64>
 10027c0:	88c00417 	ldw	r3,16(r17)
 10027c4:	80800117 	ldw	r2,4(r16)
 10027c8:	18c00317 	ldw	r3,12(r3)
 10027cc:	1085883a 	add	r2,r2,r2
 10027d0:	1085883a 	add	r2,r2,r2
 10027d4:	1885883a 	add	r2,r3,r2
 10027d8:	10c00017 	ldw	r3,0(r2)
 10027dc:	80c00015 	stw	r3,0(r16)
 10027e0:	14000015 	stw	r16,0(r2)
 10027e4:	dfc00217 	ldw	ra,8(sp)
 10027e8:	dc400117 	ldw	r17,4(sp)
 10027ec:	dc000017 	ldw	r16,0(sp)
 10027f0:	dec00304 	addi	sp,sp,12
 10027f4:	f800283a 	ret

010027f8 <__multadd>:
 10027f8:	defff604 	addi	sp,sp,-40
 10027fc:	dc400115 	stw	r17,4(sp)
 1002800:	2c400417 	ldw	r17,16(r5)
 1002804:	ddc00715 	stw	r23,28(sp)
 1002808:	dd800615 	stw	r22,24(sp)
 100280c:	dd400515 	stw	r21,20(sp)
 1002810:	dd000415 	stw	r20,16(sp)
 1002814:	dcc00315 	stw	r19,12(sp)
 1002818:	dc000015 	stw	r16,0(sp)
 100281c:	dfc00915 	stw	ra,36(sp)
 1002820:	df000815 	stw	fp,32(sp)
 1002824:	dc800215 	stw	r18,8(sp)
 1002828:	2027883a 	mov	r19,r4
 100282c:	2821883a 	mov	r16,r5
 1002830:	3029883a 	mov	r20,r6
 1002834:	382b883a 	mov	r21,r7
 1002838:	2d800504 	addi	r22,r5,20
 100283c:	002f883a 	mov	r23,zero
 1002840:	b7000017 	ldw	fp,0(r22)
 1002844:	a00b883a 	mov	r5,r20
 1002848:	bdc00044 	addi	r23,r23,1
 100284c:	e13fffcc 	andi	r4,fp,65535
 1002850:	10013440 	call	1001344 <__mulsi3>
 1002854:	e008d43a 	srli	r4,fp,16
 1002858:	a00b883a 	mov	r5,r20
 100285c:	1565883a 	add	r18,r2,r21
 1002860:	10013440 	call	1001344 <__mulsi3>
 1002864:	9006d43a 	srli	r3,r18,16
 1002868:	94bfffcc 	andi	r18,r18,65535
 100286c:	b5800104 	addi	r22,r22,4
 1002870:	10c5883a 	add	r2,r2,r3
 1002874:	102ad43a 	srli	r21,r2,16
 1002878:	1004943a 	slli	r2,r2,16
 100287c:	14a5883a 	add	r18,r2,r18
 1002880:	b4bfff15 	stw	r18,-4(r22)
 1002884:	bc7fee16 	blt	r23,r17,1002840 <__alt_data_end+0xff490d40>
 1002888:	a8001926 	beq	r21,zero,10028f0 <__multadd+0xf8>
 100288c:	80800217 	ldw	r2,8(r16)
 1002890:	88801016 	blt	r17,r2,10028d4 <__multadd+0xdc>
 1002894:	81400117 	ldw	r5,4(r16)
 1002898:	9809883a 	mov	r4,r19
 100289c:	29400044 	addi	r5,r5,1
 10028a0:	100269c0 	call	100269c <_Balloc>
 10028a4:	81800417 	ldw	r6,16(r16)
 10028a8:	81400304 	addi	r5,r16,12
 10028ac:	11000304 	addi	r4,r2,12
 10028b0:	31800084 	addi	r6,r6,2
 10028b4:	318d883a 	add	r6,r6,r6
 10028b8:	318d883a 	add	r6,r6,r6
 10028bc:	1025883a 	mov	r18,r2
 10028c0:	1004f1c0 	call	1004f1c <memcpy>
 10028c4:	800b883a 	mov	r5,r16
 10028c8:	9809883a 	mov	r4,r19
 10028cc:	10027800 	call	1002780 <_Bfree>
 10028d0:	9021883a 	mov	r16,r18
 10028d4:	88800144 	addi	r2,r17,5
 10028d8:	1085883a 	add	r2,r2,r2
 10028dc:	1085883a 	add	r2,r2,r2
 10028e0:	8085883a 	add	r2,r16,r2
 10028e4:	15400015 	stw	r21,0(r2)
 10028e8:	8c400044 	addi	r17,r17,1
 10028ec:	84400415 	stw	r17,16(r16)
 10028f0:	8005883a 	mov	r2,r16
 10028f4:	dfc00917 	ldw	ra,36(sp)
 10028f8:	df000817 	ldw	fp,32(sp)
 10028fc:	ddc00717 	ldw	r23,28(sp)
 1002900:	dd800617 	ldw	r22,24(sp)
 1002904:	dd400517 	ldw	r21,20(sp)
 1002908:	dd000417 	ldw	r20,16(sp)
 100290c:	dcc00317 	ldw	r19,12(sp)
 1002910:	dc800217 	ldw	r18,8(sp)
 1002914:	dc400117 	ldw	r17,4(sp)
 1002918:	dc000017 	ldw	r16,0(sp)
 100291c:	dec00a04 	addi	sp,sp,40
 1002920:	f800283a 	ret

01002924 <__s2b>:
 1002924:	defff904 	addi	sp,sp,-28
 1002928:	dc800215 	stw	r18,8(sp)
 100292c:	dc000015 	stw	r16,0(sp)
 1002930:	2025883a 	mov	r18,r4
 1002934:	2821883a 	mov	r16,r5
 1002938:	39000204 	addi	r4,r7,8
 100293c:	01400244 	movi	r5,9
 1002940:	dcc00315 	stw	r19,12(sp)
 1002944:	dc400115 	stw	r17,4(sp)
 1002948:	dfc00615 	stw	ra,24(sp)
 100294c:	dd400515 	stw	r21,20(sp)
 1002950:	dd000415 	stw	r20,16(sp)
 1002954:	3023883a 	mov	r17,r6
 1002958:	3827883a 	mov	r19,r7
 100295c:	10050640 	call	1005064 <__divsi3>
 1002960:	00c00044 	movi	r3,1
 1002964:	000b883a 	mov	r5,zero
 1002968:	1880030e 	bge	r3,r2,1002978 <__s2b+0x54>
 100296c:	18c7883a 	add	r3,r3,r3
 1002970:	29400044 	addi	r5,r5,1
 1002974:	003ffc06 	br	1002968 <__alt_data_end+0xff490e68>
 1002978:	9009883a 	mov	r4,r18
 100297c:	100269c0 	call	100269c <_Balloc>
 1002980:	d8c00717 	ldw	r3,28(sp)
 1002984:	10c00515 	stw	r3,20(r2)
 1002988:	00c00044 	movi	r3,1
 100298c:	10c00415 	stw	r3,16(r2)
 1002990:	00c00244 	movi	r3,9
 1002994:	1c400e0e 	bge	r3,r17,10029d0 <__s2b+0xac>
 1002998:	80e9883a 	add	r20,r16,r3
 100299c:	a02b883a 	mov	r21,r20
 10029a0:	8461883a 	add	r16,r16,r17
 10029a4:	a9c00007 	ldb	r7,0(r21)
 10029a8:	01800284 	movi	r6,10
 10029ac:	100b883a 	mov	r5,r2
 10029b0:	39fff404 	addi	r7,r7,-48
 10029b4:	9009883a 	mov	r4,r18
 10029b8:	ad400044 	addi	r21,r21,1
 10029bc:	10027f80 	call	10027f8 <__multadd>
 10029c0:	ac3ff81e 	bne	r21,r16,10029a4 <__alt_data_end+0xff490ea4>
 10029c4:	a461883a 	add	r16,r20,r17
 10029c8:	843ffe04 	addi	r16,r16,-8
 10029cc:	00000206 	br	10029d8 <__s2b+0xb4>
 10029d0:	84000284 	addi	r16,r16,10
 10029d4:	1823883a 	mov	r17,r3
 10029d8:	8c23c83a 	sub	r17,r17,r16
 10029dc:	8c07883a 	add	r3,r17,r16
 10029e0:	1cc0080e 	bge	r3,r19,1002a04 <__s2b+0xe0>
 10029e4:	81c00007 	ldb	r7,0(r16)
 10029e8:	01800284 	movi	r6,10
 10029ec:	100b883a 	mov	r5,r2
 10029f0:	39fff404 	addi	r7,r7,-48
 10029f4:	9009883a 	mov	r4,r18
 10029f8:	10027f80 	call	10027f8 <__multadd>
 10029fc:	84000044 	addi	r16,r16,1
 1002a00:	003ff606 	br	10029dc <__alt_data_end+0xff490edc>
 1002a04:	dfc00617 	ldw	ra,24(sp)
 1002a08:	dd400517 	ldw	r21,20(sp)
 1002a0c:	dd000417 	ldw	r20,16(sp)
 1002a10:	dcc00317 	ldw	r19,12(sp)
 1002a14:	dc800217 	ldw	r18,8(sp)
 1002a18:	dc400117 	ldw	r17,4(sp)
 1002a1c:	dc000017 	ldw	r16,0(sp)
 1002a20:	dec00704 	addi	sp,sp,28
 1002a24:	f800283a 	ret

01002a28 <__hi0bits>:
 1002a28:	20bfffec 	andhi	r2,r4,65535
 1002a2c:	1000031e 	bne	r2,zero,1002a3c <__hi0bits+0x14>
 1002a30:	2008943a 	slli	r4,r4,16
 1002a34:	00800404 	movi	r2,16
 1002a38:	00000106 	br	1002a40 <__hi0bits+0x18>
 1002a3c:	0005883a 	mov	r2,zero
 1002a40:	20ffc02c 	andhi	r3,r4,65280
 1002a44:	1800021e 	bne	r3,zero,1002a50 <__hi0bits+0x28>
 1002a48:	2008923a 	slli	r4,r4,8
 1002a4c:	10800204 	addi	r2,r2,8
 1002a50:	20fc002c 	andhi	r3,r4,61440
 1002a54:	1800021e 	bne	r3,zero,1002a60 <__hi0bits+0x38>
 1002a58:	2008913a 	slli	r4,r4,4
 1002a5c:	10800104 	addi	r2,r2,4
 1002a60:	20f0002c 	andhi	r3,r4,49152
 1002a64:	1800031e 	bne	r3,zero,1002a74 <__hi0bits+0x4c>
 1002a68:	2109883a 	add	r4,r4,r4
 1002a6c:	10800084 	addi	r2,r2,2
 1002a70:	2109883a 	add	r4,r4,r4
 1002a74:	20000516 	blt	r4,zero,1002a8c <__hi0bits+0x64>
 1002a78:	2110002c 	andhi	r4,r4,16384
 1002a7c:	20000226 	beq	r4,zero,1002a88 <__hi0bits+0x60>
 1002a80:	10800044 	addi	r2,r2,1
 1002a84:	f800283a 	ret
 1002a88:	00800804 	movi	r2,32
 1002a8c:	f800283a 	ret

01002a90 <__lo0bits>:
 1002a90:	20c00017 	ldw	r3,0(r4)
 1002a94:	188001cc 	andi	r2,r3,7
 1002a98:	10000c26 	beq	r2,zero,1002acc <__lo0bits+0x3c>
 1002a9c:	1880004c 	andi	r2,r3,1
 1002aa0:	1000231e 	bne	r2,zero,1002b30 <__lo0bits+0xa0>
 1002aa4:	1880008c 	andi	r2,r3,2
 1002aa8:	10000426 	beq	r2,zero,1002abc <__lo0bits+0x2c>
 1002aac:	1806d07a 	srli	r3,r3,1
 1002ab0:	00800044 	movi	r2,1
 1002ab4:	20c00015 	stw	r3,0(r4)
 1002ab8:	f800283a 	ret
 1002abc:	1806d0ba 	srli	r3,r3,2
 1002ac0:	00800084 	movi	r2,2
 1002ac4:	20c00015 	stw	r3,0(r4)
 1002ac8:	f800283a 	ret
 1002acc:	18bfffcc 	andi	r2,r3,65535
 1002ad0:	1000031e 	bne	r2,zero,1002ae0 <__lo0bits+0x50>
 1002ad4:	1806d43a 	srli	r3,r3,16
 1002ad8:	00800404 	movi	r2,16
 1002adc:	00000106 	br	1002ae4 <__lo0bits+0x54>
 1002ae0:	0005883a 	mov	r2,zero
 1002ae4:	19403fcc 	andi	r5,r3,255
 1002ae8:	2800021e 	bne	r5,zero,1002af4 <__lo0bits+0x64>
 1002aec:	1806d23a 	srli	r3,r3,8
 1002af0:	10800204 	addi	r2,r2,8
 1002af4:	194003cc 	andi	r5,r3,15
 1002af8:	2800021e 	bne	r5,zero,1002b04 <__lo0bits+0x74>
 1002afc:	1806d13a 	srli	r3,r3,4
 1002b00:	10800104 	addi	r2,r2,4
 1002b04:	194000cc 	andi	r5,r3,3
 1002b08:	2800021e 	bne	r5,zero,1002b14 <__lo0bits+0x84>
 1002b0c:	1806d0ba 	srli	r3,r3,2
 1002b10:	10800084 	addi	r2,r2,2
 1002b14:	1940004c 	andi	r5,r3,1
 1002b18:	2800031e 	bne	r5,zero,1002b28 <__lo0bits+0x98>
 1002b1c:	1806d07a 	srli	r3,r3,1
 1002b20:	18000526 	beq	r3,zero,1002b38 <__lo0bits+0xa8>
 1002b24:	10800044 	addi	r2,r2,1
 1002b28:	20c00015 	stw	r3,0(r4)
 1002b2c:	f800283a 	ret
 1002b30:	0005883a 	mov	r2,zero
 1002b34:	f800283a 	ret
 1002b38:	00800804 	movi	r2,32
 1002b3c:	f800283a 	ret

01002b40 <__i2b>:
 1002b40:	defffd04 	addi	sp,sp,-12
 1002b44:	dc000015 	stw	r16,0(sp)
 1002b48:	04000044 	movi	r16,1
 1002b4c:	dc400115 	stw	r17,4(sp)
 1002b50:	2823883a 	mov	r17,r5
 1002b54:	800b883a 	mov	r5,r16
 1002b58:	dfc00215 	stw	ra,8(sp)
 1002b5c:	100269c0 	call	100269c <_Balloc>
 1002b60:	14400515 	stw	r17,20(r2)
 1002b64:	14000415 	stw	r16,16(r2)
 1002b68:	dfc00217 	ldw	ra,8(sp)
 1002b6c:	dc400117 	ldw	r17,4(sp)
 1002b70:	dc000017 	ldw	r16,0(sp)
 1002b74:	dec00304 	addi	sp,sp,12
 1002b78:	f800283a 	ret

01002b7c <__multiply>:
 1002b7c:	28c00417 	ldw	r3,16(r5)
 1002b80:	30800417 	ldw	r2,16(r6)
 1002b84:	deffef04 	addi	sp,sp,-68
 1002b88:	dc800915 	stw	r18,36(sp)
 1002b8c:	dc000715 	stw	r16,28(sp)
 1002b90:	dfc01015 	stw	ra,64(sp)
 1002b94:	df000f15 	stw	fp,60(sp)
 1002b98:	ddc00e15 	stw	r23,56(sp)
 1002b9c:	dd800d15 	stw	r22,52(sp)
 1002ba0:	dd400c15 	stw	r21,48(sp)
 1002ba4:	dd000b15 	stw	r20,44(sp)
 1002ba8:	dcc00a15 	stw	r19,40(sp)
 1002bac:	dc400815 	stw	r17,32(sp)
 1002bb0:	2825883a 	mov	r18,r5
 1002bb4:	3021883a 	mov	r16,r6
 1002bb8:	1880020e 	bge	r3,r2,1002bc4 <__multiply+0x48>
 1002bbc:	3025883a 	mov	r18,r6
 1002bc0:	2821883a 	mov	r16,r5
 1002bc4:	94c00417 	ldw	r19,16(r18)
 1002bc8:	85000417 	ldw	r20,16(r16)
 1002bcc:	90800217 	ldw	r2,8(r18)
 1002bd0:	91400117 	ldw	r5,4(r18)
 1002bd4:	9d2f883a 	add	r23,r19,r20
 1002bd8:	15c0010e 	bge	r2,r23,1002be0 <__multiply+0x64>
 1002bdc:	29400044 	addi	r5,r5,1
 1002be0:	100269c0 	call	100269c <_Balloc>
 1002be4:	bdeb883a 	add	r21,r23,r23
 1002be8:	15800504 	addi	r22,r2,20
 1002bec:	ad6b883a 	add	r21,r21,r21
 1002bf0:	100f883a 	mov	r7,r2
 1002bf4:	b56b883a 	add	r21,r22,r21
 1002bf8:	b005883a 	mov	r2,r22
 1002bfc:	1540032e 	bgeu	r2,r21,1002c0c <__multiply+0x90>
 1002c00:	10000015 	stw	zero,0(r2)
 1002c04:	10800104 	addi	r2,r2,4
 1002c08:	003ffc06 	br	1002bfc <__alt_data_end+0xff4910fc>
 1002c0c:	9ce7883a 	add	r19,r19,r19
 1002c10:	a529883a 	add	r20,r20,r20
 1002c14:	94800504 	addi	r18,r18,20
 1002c18:	9ce7883a 	add	r19,r19,r19
 1002c1c:	84000504 	addi	r16,r16,20
 1002c20:	a529883a 	add	r20,r20,r20
 1002c24:	94e7883a 	add	r19,r18,r19
 1002c28:	8529883a 	add	r20,r16,r20
 1002c2c:	dcc00015 	stw	r19,0(sp)
 1002c30:	dd000115 	stw	r20,4(sp)
 1002c34:	d8800117 	ldw	r2,4(sp)
 1002c38:	80805f2e 	bgeu	r16,r2,1002db8 <__multiply+0x23c>
 1002c3c:	8240000b 	ldhu	r9,0(r16)
 1002c40:	48002726 	beq	r9,zero,1002ce0 <__multiply+0x164>
 1002c44:	b00d883a 	mov	r6,r22
 1002c48:	9027883a 	mov	r19,r18
 1002c4c:	0029883a 	mov	r20,zero
 1002c50:	9ac00017 	ldw	r11,0(r19)
 1002c54:	480b883a 	mov	r5,r9
 1002c58:	37000017 	ldw	fp,0(r6)
 1002c5c:	593fffcc 	andi	r4,r11,65535
 1002c60:	d9800215 	stw	r6,8(sp)
 1002c64:	d9c00615 	stw	r7,24(sp)
 1002c68:	d9800515 	stw	r6,20(sp)
 1002c6c:	da400315 	stw	r9,12(sp)
 1002c70:	dac00415 	stw	r11,16(sp)
 1002c74:	10013440 	call	1001344 <__mulsi3>
 1002c78:	dac00417 	ldw	r11,16(sp)
 1002c7c:	da400317 	ldw	r9,12(sp)
 1002c80:	e47fffcc 	andi	r17,fp,65535
 1002c84:	5808d43a 	srli	r4,r11,16
 1002c88:	1445883a 	add	r2,r2,r17
 1002c8c:	480b883a 	mov	r5,r9
 1002c90:	1523883a 	add	r17,r2,r20
 1002c94:	e038d43a 	srli	fp,fp,16
 1002c98:	10013440 	call	1001344 <__mulsi3>
 1002c9c:	8806d43a 	srli	r3,r17,16
 1002ca0:	1705883a 	add	r2,r2,fp
 1002ca4:	d9800217 	ldw	r6,8(sp)
 1002ca8:	10c5883a 	add	r2,r2,r3
 1002cac:	1028d43a 	srli	r20,r2,16
 1002cb0:	1004943a 	slli	r2,r2,16
 1002cb4:	8c7fffcc 	andi	r17,r17,65535
 1002cb8:	9cc00104 	addi	r19,r19,4
 1002cbc:	1462b03a 	or	r17,r2,r17
 1002cc0:	d8800017 	ldw	r2,0(sp)
 1002cc4:	34400015 	stw	r17,0(r6)
 1002cc8:	d9c00617 	ldw	r7,24(sp)
 1002ccc:	31800104 	addi	r6,r6,4
 1002cd0:	da000517 	ldw	r8,20(sp)
 1002cd4:	da400317 	ldw	r9,12(sp)
 1002cd8:	98bfdd36 	bltu	r19,r2,1002c50 <__alt_data_end+0xff491150>
 1002cdc:	45000115 	stw	r20,4(r8)
 1002ce0:	82000017 	ldw	r8,0(r16)
 1002ce4:	4010d43a 	srli	r8,r8,16
 1002ce8:	40002c26 	beq	r8,zero,1002d9c <__multiply+0x220>
 1002cec:	b4400017 	ldw	r17,0(r22)
 1002cf0:	9027883a 	mov	r19,r18
 1002cf4:	b015883a 	mov	r10,r22
 1002cf8:	b029883a 	mov	r20,r22
 1002cfc:	0039883a 	mov	fp,zero
 1002d00:	9900000b 	ldhu	r4,0(r19)
 1002d04:	400b883a 	mov	r5,r8
 1002d08:	d9c00615 	stw	r7,24(sp)
 1002d0c:	da000515 	stw	r8,20(sp)
 1002d10:	da800215 	stw	r10,8(sp)
 1002d14:	10013440 	call	1001344 <__mulsi3>
 1002d18:	a0c00017 	ldw	r3,0(r20)
 1002d1c:	da800217 	ldw	r10,8(sp)
 1002d20:	8c7fffcc 	andi	r17,r17,65535
 1002d24:	1806d43a 	srli	r3,r3,16
 1002d28:	da000517 	ldw	r8,20(sp)
 1002d2c:	a2c00104 	addi	r11,r20,4
 1002d30:	10c5883a 	add	r2,r2,r3
 1002d34:	1739883a 	add	fp,r2,fp
 1002d38:	e004943a 	slli	r2,fp,16
 1002d3c:	400b883a 	mov	r5,r8
 1002d40:	e038d43a 	srli	fp,fp,16
 1002d44:	1444b03a 	or	r2,r2,r17
 1002d48:	50800015 	stw	r2,0(r10)
 1002d4c:	99000017 	ldw	r4,0(r19)
 1002d50:	da800215 	stw	r10,8(sp)
 1002d54:	dac00415 	stw	r11,16(sp)
 1002d58:	2008d43a 	srli	r4,r4,16
 1002d5c:	9cc00104 	addi	r19,r19,4
 1002d60:	10013440 	call	1001344 <__mulsi3>
 1002d64:	dac00417 	ldw	r11,16(sp)
 1002d68:	da800217 	ldw	r10,8(sp)
 1002d6c:	d9c00617 	ldw	r7,24(sp)
 1002d70:	58c0000b 	ldhu	r3,0(r11)
 1002d74:	52800104 	addi	r10,r10,4
 1002d78:	da000517 	ldw	r8,20(sp)
 1002d7c:	10c5883a 	add	r2,r2,r3
 1002d80:	1723883a 	add	r17,r2,fp
 1002d84:	d8800017 	ldw	r2,0(sp)
 1002d88:	8838d43a 	srli	fp,r17,16
 1002d8c:	9880022e 	bgeu	r19,r2,1002d98 <__multiply+0x21c>
 1002d90:	5829883a 	mov	r20,r11
 1002d94:	003fda06 	br	1002d00 <__alt_data_end+0xff491200>
 1002d98:	a4400115 	stw	r17,4(r20)
 1002d9c:	84000104 	addi	r16,r16,4
 1002da0:	b5800104 	addi	r22,r22,4
 1002da4:	003fa306 	br	1002c34 <__alt_data_end+0xff491134>
 1002da8:	ad7fff04 	addi	r21,r21,-4
 1002dac:	a8800017 	ldw	r2,0(r21)
 1002db0:	1000021e 	bne	r2,zero,1002dbc <__multiply+0x240>
 1002db4:	bdffffc4 	addi	r23,r23,-1
 1002db8:	05fffb16 	blt	zero,r23,1002da8 <__alt_data_end+0xff4912a8>
 1002dbc:	3805883a 	mov	r2,r7
 1002dc0:	3dc00415 	stw	r23,16(r7)
 1002dc4:	dfc01017 	ldw	ra,64(sp)
 1002dc8:	df000f17 	ldw	fp,60(sp)
 1002dcc:	ddc00e17 	ldw	r23,56(sp)
 1002dd0:	dd800d17 	ldw	r22,52(sp)
 1002dd4:	dd400c17 	ldw	r21,48(sp)
 1002dd8:	dd000b17 	ldw	r20,44(sp)
 1002ddc:	dcc00a17 	ldw	r19,40(sp)
 1002de0:	dc800917 	ldw	r18,36(sp)
 1002de4:	dc400817 	ldw	r17,32(sp)
 1002de8:	dc000717 	ldw	r16,28(sp)
 1002dec:	dec01104 	addi	sp,sp,68
 1002df0:	f800283a 	ret

01002df4 <__pow5mult>:
 1002df4:	defffa04 	addi	sp,sp,-24
 1002df8:	dc800215 	stw	r18,8(sp)
 1002dfc:	dc400115 	stw	r17,4(sp)
 1002e00:	dfc00515 	stw	ra,20(sp)
 1002e04:	dd000415 	stw	r20,16(sp)
 1002e08:	dcc00315 	stw	r19,12(sp)
 1002e0c:	dc000015 	stw	r16,0(sp)
 1002e10:	308000cc 	andi	r2,r6,3
 1002e14:	2025883a 	mov	r18,r4
 1002e18:	3023883a 	mov	r17,r6
 1002e1c:	10000b26 	beq	r2,zero,1002e4c <__pow5mult+0x58>
 1002e20:	10bfffc4 	addi	r2,r2,-1
 1002e24:	1085883a 	add	r2,r2,r2
 1002e28:	00c04074 	movhi	r3,257
 1002e2c:	18e58804 	addi	r3,r3,-27104
 1002e30:	1085883a 	add	r2,r2,r2
 1002e34:	1885883a 	add	r2,r3,r2
 1002e38:	11800017 	ldw	r6,0(r2)
 1002e3c:	000f883a 	mov	r7,zero
 1002e40:	10027f80 	call	10027f8 <__multadd>
 1002e44:	1029883a 	mov	r20,r2
 1002e48:	00000106 	br	1002e50 <__pow5mult+0x5c>
 1002e4c:	2829883a 	mov	r20,r5
 1002e50:	8823d0ba 	srai	r17,r17,2
 1002e54:	88002b26 	beq	r17,zero,1002f04 <__pow5mult+0x110>
 1002e58:	90800417 	ldw	r2,16(r18)
 1002e5c:	1000071e 	bne	r2,zero,1002e7c <__pow5mult+0x88>
 1002e60:	01000404 	movi	r4,16
 1002e64:	1004ef40 	call	1004ef4 <malloc>
 1002e68:	90800415 	stw	r2,16(r18)
 1002e6c:	10000115 	stw	zero,4(r2)
 1002e70:	10000215 	stw	zero,8(r2)
 1002e74:	10000015 	stw	zero,0(r2)
 1002e78:	10000315 	stw	zero,12(r2)
 1002e7c:	94c00417 	ldw	r19,16(r18)
 1002e80:	9c000217 	ldw	r16,8(r19)
 1002e84:	80000c1e 	bne	r16,zero,1002eb8 <__pow5mult+0xc4>
 1002e88:	01409c44 	movi	r5,625
 1002e8c:	9009883a 	mov	r4,r18
 1002e90:	1002b400 	call	1002b40 <__i2b>
 1002e94:	98800215 	stw	r2,8(r19)
 1002e98:	1021883a 	mov	r16,r2
 1002e9c:	10000015 	stw	zero,0(r2)
 1002ea0:	00000506 	br	1002eb8 <__pow5mult+0xc4>
 1002ea4:	8823d07a 	srai	r17,r17,1
 1002ea8:	88001626 	beq	r17,zero,1002f04 <__pow5mult+0x110>
 1002eac:	80800017 	ldw	r2,0(r16)
 1002eb0:	10000d26 	beq	r2,zero,1002ee8 <__pow5mult+0xf4>
 1002eb4:	1021883a 	mov	r16,r2
 1002eb8:	8880004c 	andi	r2,r17,1
 1002ebc:	103ff926 	beq	r2,zero,1002ea4 <__alt_data_end+0xff4913a4>
 1002ec0:	a00b883a 	mov	r5,r20
 1002ec4:	800d883a 	mov	r6,r16
 1002ec8:	9009883a 	mov	r4,r18
 1002ecc:	1002b7c0 	call	1002b7c <__multiply>
 1002ed0:	1027883a 	mov	r19,r2
 1002ed4:	a00b883a 	mov	r5,r20
 1002ed8:	9009883a 	mov	r4,r18
 1002edc:	10027800 	call	1002780 <_Bfree>
 1002ee0:	9829883a 	mov	r20,r19
 1002ee4:	003fef06 	br	1002ea4 <__alt_data_end+0xff4913a4>
 1002ee8:	800d883a 	mov	r6,r16
 1002eec:	800b883a 	mov	r5,r16
 1002ef0:	9009883a 	mov	r4,r18
 1002ef4:	1002b7c0 	call	1002b7c <__multiply>
 1002ef8:	80800015 	stw	r2,0(r16)
 1002efc:	10000015 	stw	zero,0(r2)
 1002f00:	003fec06 	br	1002eb4 <__alt_data_end+0xff4913b4>
 1002f04:	a005883a 	mov	r2,r20
 1002f08:	dfc00517 	ldw	ra,20(sp)
 1002f0c:	dd000417 	ldw	r20,16(sp)
 1002f10:	dcc00317 	ldw	r19,12(sp)
 1002f14:	dc800217 	ldw	r18,8(sp)
 1002f18:	dc400117 	ldw	r17,4(sp)
 1002f1c:	dc000017 	ldw	r16,0(sp)
 1002f20:	dec00604 	addi	sp,sp,24
 1002f24:	f800283a 	ret

01002f28 <__lshift>:
 1002f28:	defff804 	addi	sp,sp,-32
 1002f2c:	dc400215 	stw	r17,8(sp)
 1002f30:	2823883a 	mov	r17,r5
 1002f34:	dd000515 	stw	r20,20(sp)
 1002f38:	dc000115 	stw	r16,4(sp)
 1002f3c:	8d000417 	ldw	r20,16(r17)
 1002f40:	3021d17a 	srai	r16,r6,5
 1002f44:	29400117 	ldw	r5,4(r5)
 1002f48:	88800217 	ldw	r2,8(r17)
 1002f4c:	8529883a 	add	r20,r16,r20
 1002f50:	dd400615 	stw	r21,24(sp)
 1002f54:	dcc00415 	stw	r19,16(sp)
 1002f58:	dc800315 	stw	r18,12(sp)
 1002f5c:	dfc00715 	stw	ra,28(sp)
 1002f60:	2025883a 	mov	r18,r4
 1002f64:	302b883a 	mov	r21,r6
 1002f68:	a4c00044 	addi	r19,r20,1
 1002f6c:	14c0030e 	bge	r2,r19,1002f7c <__lshift+0x54>
 1002f70:	29400044 	addi	r5,r5,1
 1002f74:	1085883a 	add	r2,r2,r2
 1002f78:	003ffc06 	br	1002f6c <__alt_data_end+0xff49146c>
 1002f7c:	9009883a 	mov	r4,r18
 1002f80:	100269c0 	call	100269c <_Balloc>
 1002f84:	10c00504 	addi	r3,r2,20
 1002f88:	180d883a 	mov	r6,r3
 1002f8c:	000b883a 	mov	r5,zero
 1002f90:	2c00040e 	bge	r5,r16,1002fa4 <__lshift+0x7c>
 1002f94:	30000015 	stw	zero,0(r6)
 1002f98:	29400044 	addi	r5,r5,1
 1002f9c:	31800104 	addi	r6,r6,4
 1002fa0:	003ffb06 	br	1002f90 <__alt_data_end+0xff491490>
 1002fa4:	8009883a 	mov	r4,r16
 1002fa8:	8000010e 	bge	r16,zero,1002fb0 <__lshift+0x88>
 1002fac:	0009883a 	mov	r4,zero
 1002fb0:	89400417 	ldw	r5,16(r17)
 1002fb4:	2109883a 	add	r4,r4,r4
 1002fb8:	2109883a 	add	r4,r4,r4
 1002fbc:	294b883a 	add	r5,r5,r5
 1002fc0:	1907883a 	add	r3,r3,r4
 1002fc4:	294b883a 	add	r5,r5,r5
 1002fc8:	89000504 	addi	r4,r17,20
 1002fcc:	a98007cc 	andi	r6,r21,31
 1002fd0:	214b883a 	add	r5,r4,r5
 1002fd4:	30001126 	beq	r6,zero,100301c <__lshift+0xf4>
 1002fd8:	02000804 	movi	r8,32
 1002fdc:	4191c83a 	sub	r8,r8,r6
 1002fe0:	000f883a 	mov	r7,zero
 1002fe4:	22400017 	ldw	r9,0(r4)
 1002fe8:	21000104 	addi	r4,r4,4
 1002fec:	1815883a 	mov	r10,r3
 1002ff0:	4992983a 	sll	r9,r9,r6
 1002ff4:	18c00104 	addi	r3,r3,4
 1002ff8:	49ceb03a 	or	r7,r9,r7
 1002ffc:	19ffff15 	stw	r7,-4(r3)
 1003000:	21ffff17 	ldw	r7,-4(r4)
 1003004:	3a0ed83a 	srl	r7,r7,r8
 1003008:	217ff636 	bltu	r4,r5,1002fe4 <__alt_data_end+0xff4914e4>
 100300c:	51c00115 	stw	r7,4(r10)
 1003010:	38000726 	beq	r7,zero,1003030 <__lshift+0x108>
 1003014:	a4c00084 	addi	r19,r20,2
 1003018:	00000506 	br	1003030 <__lshift+0x108>
 100301c:	21800017 	ldw	r6,0(r4)
 1003020:	21000104 	addi	r4,r4,4
 1003024:	18c00104 	addi	r3,r3,4
 1003028:	19bfff15 	stw	r6,-4(r3)
 100302c:	217ffb36 	bltu	r4,r5,100301c <__alt_data_end+0xff49151c>
 1003030:	9cffffc4 	addi	r19,r19,-1
 1003034:	14c00415 	stw	r19,16(r2)
 1003038:	880b883a 	mov	r5,r17
 100303c:	9009883a 	mov	r4,r18
 1003040:	d8800015 	stw	r2,0(sp)
 1003044:	10027800 	call	1002780 <_Bfree>
 1003048:	d8800017 	ldw	r2,0(sp)
 100304c:	dfc00717 	ldw	ra,28(sp)
 1003050:	dd400617 	ldw	r21,24(sp)
 1003054:	dd000517 	ldw	r20,20(sp)
 1003058:	dcc00417 	ldw	r19,16(sp)
 100305c:	dc800317 	ldw	r18,12(sp)
 1003060:	dc400217 	ldw	r17,8(sp)
 1003064:	dc000117 	ldw	r16,4(sp)
 1003068:	dec00804 	addi	sp,sp,32
 100306c:	f800283a 	ret

01003070 <__mcmp>:
 1003070:	20800417 	ldw	r2,16(r4)
 1003074:	28c00417 	ldw	r3,16(r5)
 1003078:	10c5c83a 	sub	r2,r2,r3
 100307c:	1000121e 	bne	r2,zero,10030c8 <__mcmp+0x58>
 1003080:	18c7883a 	add	r3,r3,r3
 1003084:	18c7883a 	add	r3,r3,r3
 1003088:	21000504 	addi	r4,r4,20
 100308c:	29400504 	addi	r5,r5,20
 1003090:	20c5883a 	add	r2,r4,r3
 1003094:	28cb883a 	add	r5,r5,r3
 1003098:	10bfff04 	addi	r2,r2,-4
 100309c:	297fff04 	addi	r5,r5,-4
 10030a0:	11800017 	ldw	r6,0(r2)
 10030a4:	28c00017 	ldw	r3,0(r5)
 10030a8:	30c00326 	beq	r6,r3,10030b8 <__mcmp+0x48>
 10030ac:	30c00536 	bltu	r6,r3,10030c4 <__mcmp+0x54>
 10030b0:	00800044 	movi	r2,1
 10030b4:	f800283a 	ret
 10030b8:	20bff736 	bltu	r4,r2,1003098 <__alt_data_end+0xff491598>
 10030bc:	0005883a 	mov	r2,zero
 10030c0:	f800283a 	ret
 10030c4:	00bfffc4 	movi	r2,-1
 10030c8:	f800283a 	ret

010030cc <__mdiff>:
 10030cc:	defffb04 	addi	sp,sp,-20
 10030d0:	dc000015 	stw	r16,0(sp)
 10030d4:	2821883a 	mov	r16,r5
 10030d8:	dcc00315 	stw	r19,12(sp)
 10030dc:	300b883a 	mov	r5,r6
 10030e0:	2027883a 	mov	r19,r4
 10030e4:	8009883a 	mov	r4,r16
 10030e8:	dc400115 	stw	r17,4(sp)
 10030ec:	dfc00415 	stw	ra,16(sp)
 10030f0:	dc800215 	stw	r18,8(sp)
 10030f4:	3023883a 	mov	r17,r6
 10030f8:	10030700 	call	1003070 <__mcmp>
 10030fc:	1000071e 	bne	r2,zero,100311c <__mdiff+0x50>
 1003100:	000b883a 	mov	r5,zero
 1003104:	9809883a 	mov	r4,r19
 1003108:	100269c0 	call	100269c <_Balloc>
 100310c:	00c00044 	movi	r3,1
 1003110:	10c00415 	stw	r3,16(r2)
 1003114:	10000515 	stw	zero,20(r2)
 1003118:	00004206 	br	1003224 <__mdiff+0x158>
 100311c:	1000050e 	bge	r2,zero,1003134 <__mdiff+0x68>
 1003120:	8005883a 	mov	r2,r16
 1003124:	04800044 	movi	r18,1
 1003128:	8821883a 	mov	r16,r17
 100312c:	1023883a 	mov	r17,r2
 1003130:	00000106 	br	1003138 <__mdiff+0x6c>
 1003134:	0025883a 	mov	r18,zero
 1003138:	81400117 	ldw	r5,4(r16)
 100313c:	9809883a 	mov	r4,r19
 1003140:	100269c0 	call	100269c <_Balloc>
 1003144:	82000417 	ldw	r8,16(r16)
 1003148:	88c00417 	ldw	r3,16(r17)
 100314c:	81400504 	addi	r5,r16,20
 1003150:	420f883a 	add	r7,r8,r8
 1003154:	18c7883a 	add	r3,r3,r3
 1003158:	39cf883a 	add	r7,r7,r7
 100315c:	8a800504 	addi	r10,r17,20
 1003160:	18c7883a 	add	r3,r3,r3
 1003164:	14800315 	stw	r18,12(r2)
 1003168:	29cf883a 	add	r7,r5,r7
 100316c:	50c9883a 	add	r4,r10,r3
 1003170:	13000504 	addi	r12,r2,20
 1003174:	0017883a 	mov	r11,zero
 1003178:	29800017 	ldw	r6,0(r5)
 100317c:	52400017 	ldw	r9,0(r10)
 1003180:	52800104 	addi	r10,r10,4
 1003184:	30ffffcc 	andi	r3,r6,65535
 1003188:	1ac7883a 	add	r3,r3,r11
 100318c:	300cd43a 	srli	r6,r6,16
 1003190:	4affffcc 	andi	r11,r9,65535
 1003194:	4812d43a 	srli	r9,r9,16
 1003198:	1ac7c83a 	sub	r3,r3,r11
 100319c:	29400104 	addi	r5,r5,4
 10031a0:	3253c83a 	sub	r9,r6,r9
 10031a4:	180dd43a 	srai	r6,r3,16
 10031a8:	18ffffcc 	andi	r3,r3,65535
 10031ac:	498d883a 	add	r6,r9,r6
 10031b0:	3017d43a 	srai	r11,r6,16
 10031b4:	300c943a 	slli	r6,r6,16
 10031b8:	62400104 	addi	r9,r12,4
 10031bc:	30c6b03a 	or	r3,r6,r3
 10031c0:	60c00015 	stw	r3,0(r12)
 10031c4:	4819883a 	mov	r12,r9
 10031c8:	513feb36 	bltu	r10,r4,1003178 <__alt_data_end+0xff491678>
 10031cc:	4807883a 	mov	r3,r9
 10031d0:	29c00e2e 	bgeu	r5,r7,100320c <__mdiff+0x140>
 10031d4:	29800017 	ldw	r6,0(r5)
 10031d8:	4a400104 	addi	r9,r9,4
 10031dc:	29400104 	addi	r5,r5,4
 10031e0:	313fffcc 	andi	r4,r6,65535
 10031e4:	22c9883a 	add	r4,r4,r11
 10031e8:	2007d43a 	srai	r3,r4,16
 10031ec:	300cd43a 	srli	r6,r6,16
 10031f0:	213fffcc 	andi	r4,r4,65535
 10031f4:	30cd883a 	add	r6,r6,r3
 10031f8:	3017d43a 	srai	r11,r6,16
 10031fc:	300c943a 	slli	r6,r6,16
 1003200:	3108b03a 	or	r4,r6,r4
 1003204:	493fff15 	stw	r4,-4(r9)
 1003208:	003ff006 	br	10031cc <__alt_data_end+0xff4916cc>
 100320c:	18ffff04 	addi	r3,r3,-4
 1003210:	19000017 	ldw	r4,0(r3)
 1003214:	2000021e 	bne	r4,zero,1003220 <__mdiff+0x154>
 1003218:	423fffc4 	addi	r8,r8,-1
 100321c:	003ffb06 	br	100320c <__alt_data_end+0xff49170c>
 1003220:	12000415 	stw	r8,16(r2)
 1003224:	dfc00417 	ldw	ra,16(sp)
 1003228:	dcc00317 	ldw	r19,12(sp)
 100322c:	dc800217 	ldw	r18,8(sp)
 1003230:	dc400117 	ldw	r17,4(sp)
 1003234:	dc000017 	ldw	r16,0(sp)
 1003238:	dec00504 	addi	sp,sp,20
 100323c:	f800283a 	ret

01003240 <__ulp>:
 1003240:	295ffc2c 	andhi	r5,r5,32752
 1003244:	00bf3034 	movhi	r2,64704
 1003248:	2887883a 	add	r3,r5,r2
 100324c:	00c00616 	blt	zero,r3,1003268 <__ulp+0x28>
 1003250:	00c7c83a 	sub	r3,zero,r3
 1003254:	1805d53a 	srai	r2,r3,20
 1003258:	00c004c4 	movi	r3,19
 100325c:	18800416 	blt	r3,r2,1003270 <__ulp+0x30>
 1003260:	00c00234 	movhi	r3,8
 1003264:	1887d83a 	sra	r3,r3,r2
 1003268:	0005883a 	mov	r2,zero
 100326c:	f800283a 	ret
 1003270:	117ffb04 	addi	r5,r2,-20
 1003274:	01000784 	movi	r4,30
 1003278:	0007883a 	mov	r3,zero
 100327c:	00800044 	movi	r2,1
 1003280:	21400316 	blt	r4,r5,1003290 <__ulp+0x50>
 1003284:	010007c4 	movi	r4,31
 1003288:	214bc83a 	sub	r5,r4,r5
 100328c:	1144983a 	sll	r2,r2,r5
 1003290:	f800283a 	ret

01003294 <__b2d>:
 1003294:	defffa04 	addi	sp,sp,-24
 1003298:	dc000015 	stw	r16,0(sp)
 100329c:	24000417 	ldw	r16,16(r4)
 10032a0:	dcc00315 	stw	r19,12(sp)
 10032a4:	24c00504 	addi	r19,r4,20
 10032a8:	8421883a 	add	r16,r16,r16
 10032ac:	8421883a 	add	r16,r16,r16
 10032b0:	9c21883a 	add	r16,r19,r16
 10032b4:	dc400115 	stw	r17,4(sp)
 10032b8:	847fff17 	ldw	r17,-4(r16)
 10032bc:	dd000415 	stw	r20,16(sp)
 10032c0:	dc800215 	stw	r18,8(sp)
 10032c4:	8809883a 	mov	r4,r17
 10032c8:	2829883a 	mov	r20,r5
 10032cc:	dfc00515 	stw	ra,20(sp)
 10032d0:	1002a280 	call	1002a28 <__hi0bits>
 10032d4:	01000804 	movi	r4,32
 10032d8:	2087c83a 	sub	r3,r4,r2
 10032dc:	a0c00015 	stw	r3,0(r20)
 10032e0:	00c00284 	movi	r3,10
 10032e4:	84bfff04 	addi	r18,r16,-4
 10032e8:	18800d16 	blt	r3,r2,1003320 <__b2d+0x8c>
 10032ec:	018002c4 	movi	r6,11
 10032f0:	308bc83a 	sub	r5,r6,r2
 10032f4:	8946d83a 	srl	r3,r17,r5
 10032f8:	18cffc34 	orhi	r3,r3,16368
 10032fc:	9c80022e 	bgeu	r19,r18,1003308 <__b2d+0x74>
 1003300:	81bffe17 	ldw	r6,-8(r16)
 1003304:	00000106 	br	100330c <__b2d+0x78>
 1003308:	000d883a 	mov	r6,zero
 100330c:	10800544 	addi	r2,r2,21
 1003310:	8884983a 	sll	r2,r17,r2
 1003314:	314cd83a 	srl	r6,r6,r5
 1003318:	1184b03a 	or	r2,r2,r6
 100331c:	00001606 	br	1003378 <__b2d+0xe4>
 1003320:	9c80032e 	bgeu	r19,r18,1003330 <__b2d+0x9c>
 1003324:	84bffe04 	addi	r18,r16,-8
 1003328:	817ffe17 	ldw	r5,-8(r16)
 100332c:	00000106 	br	1003334 <__b2d+0xa0>
 1003330:	000b883a 	mov	r5,zero
 1003334:	10bffd44 	addi	r2,r2,-11
 1003338:	10000d26 	beq	r2,zero,1003370 <__b2d+0xdc>
 100333c:	2089c83a 	sub	r4,r4,r2
 1003340:	88a2983a 	sll	r17,r17,r2
 1003344:	2906d83a 	srl	r3,r5,r4
 1003348:	8c4ffc34 	orhi	r17,r17,16368
 100334c:	88c6b03a 	or	r3,r17,r3
 1003350:	9c80022e 	bgeu	r19,r18,100335c <__b2d+0xc8>
 1003354:	91bfff17 	ldw	r6,-4(r18)
 1003358:	00000106 	br	1003360 <__b2d+0xcc>
 100335c:	000d883a 	mov	r6,zero
 1003360:	288a983a 	sll	r5,r5,r2
 1003364:	3104d83a 	srl	r2,r6,r4
 1003368:	2884b03a 	or	r2,r5,r2
 100336c:	00000206 	br	1003378 <__b2d+0xe4>
 1003370:	88cffc34 	orhi	r3,r17,16368
 1003374:	2805883a 	mov	r2,r5
 1003378:	dfc00517 	ldw	ra,20(sp)
 100337c:	dd000417 	ldw	r20,16(sp)
 1003380:	dcc00317 	ldw	r19,12(sp)
 1003384:	dc800217 	ldw	r18,8(sp)
 1003388:	dc400117 	ldw	r17,4(sp)
 100338c:	dc000017 	ldw	r16,0(sp)
 1003390:	dec00604 	addi	sp,sp,24
 1003394:	f800283a 	ret

01003398 <__d2b>:
 1003398:	defff804 	addi	sp,sp,-32
 100339c:	dc000215 	stw	r16,8(sp)
 10033a0:	2821883a 	mov	r16,r5
 10033a4:	01400044 	movi	r5,1
 10033a8:	dd000615 	stw	r20,24(sp)
 10033ac:	dcc00515 	stw	r19,20(sp)
 10033b0:	dc800415 	stw	r18,16(sp)
 10033b4:	dc400315 	stw	r17,12(sp)
 10033b8:	dfc00715 	stw	ra,28(sp)
 10033bc:	3023883a 	mov	r17,r6
 10033c0:	3827883a 	mov	r19,r7
 10033c4:	dc800817 	ldw	r18,32(sp)
 10033c8:	100269c0 	call	100269c <_Balloc>
 10033cc:	1029883a 	mov	r20,r2
 10033d0:	00800434 	movhi	r2,16
 10033d4:	10bfffc4 	addi	r2,r2,-1
 10033d8:	8884703a 	and	r2,r17,r2
 10033dc:	8822907a 	slli	r17,r17,1
 10033e0:	8822d57a 	srli	r17,r17,21
 10033e4:	88000126 	beq	r17,zero,10033ec <__d2b+0x54>
 10033e8:	10800434 	orhi	r2,r2,16
 10033ec:	d8800015 	stw	r2,0(sp)
 10033f0:	80001526 	beq	r16,zero,1003448 <__d2b+0xb0>
 10033f4:	d9000104 	addi	r4,sp,4
 10033f8:	dc000115 	stw	r16,4(sp)
 10033fc:	1002a900 	call	1002a90 <__lo0bits>
 1003400:	d9000117 	ldw	r4,4(sp)
 1003404:	10000926 	beq	r2,zero,100342c <__d2b+0x94>
 1003408:	d9400017 	ldw	r5,0(sp)
 100340c:	00c00804 	movi	r3,32
 1003410:	1887c83a 	sub	r3,r3,r2
 1003414:	28c6983a 	sll	r3,r5,r3
 1003418:	288ad83a 	srl	r5,r5,r2
 100341c:	1906b03a 	or	r3,r3,r4
 1003420:	a0c00515 	stw	r3,20(r20)
 1003424:	d9400015 	stw	r5,0(sp)
 1003428:	00000106 	br	1003430 <__d2b+0x98>
 100342c:	a1000515 	stw	r4,20(r20)
 1003430:	dc000017 	ldw	r16,0(sp)
 1003434:	a4000615 	stw	r16,24(r20)
 1003438:	8020c03a 	cmpne	r16,r16,zero
 100343c:	84000044 	addi	r16,r16,1
 1003440:	a4000415 	stw	r16,16(r20)
 1003444:	00000706 	br	1003464 <__d2b+0xcc>
 1003448:	d809883a 	mov	r4,sp
 100344c:	1002a900 	call	1002a90 <__lo0bits>
 1003450:	d8c00017 	ldw	r3,0(sp)
 1003454:	04000044 	movi	r16,1
 1003458:	a4000415 	stw	r16,16(r20)
 100345c:	a0c00515 	stw	r3,20(r20)
 1003460:	10800804 	addi	r2,r2,32
 1003464:	88000626 	beq	r17,zero,1003480 <__d2b+0xe8>
 1003468:	8c7ef344 	addi	r17,r17,-1075
 100346c:	88a3883a 	add	r17,r17,r2
 1003470:	00c00d44 	movi	r3,53
 1003474:	9c400015 	stw	r17,0(r19)
 1003478:	1885c83a 	sub	r2,r3,r2
 100347c:	00000c06 	br	10034b0 <__d2b+0x118>
 1003480:	10bef384 	addi	r2,r2,-1074
 1003484:	98800015 	stw	r2,0(r19)
 1003488:	00900034 	movhi	r2,16384
 100348c:	10bfffc4 	addi	r2,r2,-1
 1003490:	8085883a 	add	r2,r16,r2
 1003494:	1085883a 	add	r2,r2,r2
 1003498:	1085883a 	add	r2,r2,r2
 100349c:	a085883a 	add	r2,r20,r2
 10034a0:	11000517 	ldw	r4,20(r2)
 10034a4:	8020917a 	slli	r16,r16,5
 10034a8:	1002a280 	call	1002a28 <__hi0bits>
 10034ac:	8085c83a 	sub	r2,r16,r2
 10034b0:	90800015 	stw	r2,0(r18)
 10034b4:	a005883a 	mov	r2,r20
 10034b8:	dfc00717 	ldw	ra,28(sp)
 10034bc:	dd000617 	ldw	r20,24(sp)
 10034c0:	dcc00517 	ldw	r19,20(sp)
 10034c4:	dc800417 	ldw	r18,16(sp)
 10034c8:	dc400317 	ldw	r17,12(sp)
 10034cc:	dc000217 	ldw	r16,8(sp)
 10034d0:	dec00804 	addi	sp,sp,32
 10034d4:	f800283a 	ret

010034d8 <__ratio>:
 10034d8:	defff904 	addi	sp,sp,-28
 10034dc:	dc400315 	stw	r17,12(sp)
 10034e0:	2823883a 	mov	r17,r5
 10034e4:	d9400104 	addi	r5,sp,4
 10034e8:	dfc00615 	stw	ra,24(sp)
 10034ec:	dcc00515 	stw	r19,20(sp)
 10034f0:	dc800415 	stw	r18,16(sp)
 10034f4:	2027883a 	mov	r19,r4
 10034f8:	dc000215 	stw	r16,8(sp)
 10034fc:	10032940 	call	1003294 <__b2d>
 1003500:	d80b883a 	mov	r5,sp
 1003504:	8809883a 	mov	r4,r17
 1003508:	1025883a 	mov	r18,r2
 100350c:	1821883a 	mov	r16,r3
 1003510:	10032940 	call	1003294 <__b2d>
 1003514:	8a000417 	ldw	r8,16(r17)
 1003518:	99000417 	ldw	r4,16(r19)
 100351c:	d9400117 	ldw	r5,4(sp)
 1003520:	2209c83a 	sub	r4,r4,r8
 1003524:	2010917a 	slli	r8,r4,5
 1003528:	d9000017 	ldw	r4,0(sp)
 100352c:	2909c83a 	sub	r4,r5,r4
 1003530:	4109883a 	add	r4,r8,r4
 1003534:	0100030e 	bge	zero,r4,1003544 <__ratio+0x6c>
 1003538:	2008953a 	slli	r4,r4,20
 100353c:	2421883a 	add	r16,r4,r16
 1003540:	00000206 	br	100354c <__ratio+0x74>
 1003544:	2008953a 	slli	r4,r4,20
 1003548:	1907c83a 	sub	r3,r3,r4
 100354c:	100d883a 	mov	r6,r2
 1003550:	180f883a 	mov	r7,r3
 1003554:	9009883a 	mov	r4,r18
 1003558:	800b883a 	mov	r5,r16
 100355c:	1005ac40 	call	1005ac4 <__divdf3>
 1003560:	dfc00617 	ldw	ra,24(sp)
 1003564:	dcc00517 	ldw	r19,20(sp)
 1003568:	dc800417 	ldw	r18,16(sp)
 100356c:	dc400317 	ldw	r17,12(sp)
 1003570:	dc000217 	ldw	r16,8(sp)
 1003574:	dec00704 	addi	sp,sp,28
 1003578:	f800283a 	ret

0100357c <_mprec_log10>:
 100357c:	defffe04 	addi	sp,sp,-8
 1003580:	dc000015 	stw	r16,0(sp)
 1003584:	dfc00115 	stw	ra,4(sp)
 1003588:	008005c4 	movi	r2,23
 100358c:	2021883a 	mov	r16,r4
 1003590:	11000716 	blt	r2,r4,10035b0 <_mprec_log10+0x34>
 1003594:	202090fa 	slli	r16,r4,3
 1003598:	00804074 	movhi	r2,257
 100359c:	10a59f04 	addi	r2,r2,-27012
 10035a0:	1421883a 	add	r16,r2,r16
 10035a4:	80800017 	ldw	r2,0(r16)
 10035a8:	80c00117 	ldw	r3,4(r16)
 10035ac:	00000906 	br	10035d4 <_mprec_log10+0x58>
 10035b0:	0005883a 	mov	r2,zero
 10035b4:	00cffc34 	movhi	r3,16368
 10035b8:	000d883a 	mov	r6,zero
 10035bc:	01d00934 	movhi	r7,16420
 10035c0:	1009883a 	mov	r4,r2
 10035c4:	180b883a 	mov	r5,r3
 10035c8:	843fffc4 	addi	r16,r16,-1
 10035cc:	10066ec0 	call	10066ec <__muldf3>
 10035d0:	803ff91e 	bne	r16,zero,10035b8 <__alt_data_end+0xff491ab8>
 10035d4:	dfc00117 	ldw	ra,4(sp)
 10035d8:	dc000017 	ldw	r16,0(sp)
 10035dc:	dec00204 	addi	sp,sp,8
 10035e0:	f800283a 	ret

010035e4 <__copybits>:
 10035e4:	297fffc4 	addi	r5,r5,-1
 10035e8:	280bd17a 	srai	r5,r5,5
 10035ec:	30800417 	ldw	r2,16(r6)
 10035f0:	30c00504 	addi	r3,r6,20
 10035f4:	29400044 	addi	r5,r5,1
 10035f8:	294b883a 	add	r5,r5,r5
 10035fc:	1085883a 	add	r2,r2,r2
 1003600:	294b883a 	add	r5,r5,r5
 1003604:	1085883a 	add	r2,r2,r2
 1003608:	214b883a 	add	r5,r4,r5
 100360c:	1885883a 	add	r2,r3,r2
 1003610:	1880052e 	bgeu	r3,r2,1003628 <__copybits+0x44>
 1003614:	19800017 	ldw	r6,0(r3)
 1003618:	21000104 	addi	r4,r4,4
 100361c:	18c00104 	addi	r3,r3,4
 1003620:	21bfff15 	stw	r6,-4(r4)
 1003624:	003ffa06 	br	1003610 <__alt_data_end+0xff491b10>
 1003628:	2140032e 	bgeu	r4,r5,1003638 <__copybits+0x54>
 100362c:	20000015 	stw	zero,0(r4)
 1003630:	21000104 	addi	r4,r4,4
 1003634:	003ffc06 	br	1003628 <__alt_data_end+0xff491b28>
 1003638:	f800283a 	ret

0100363c <__any_on>:
 100363c:	20c00417 	ldw	r3,16(r4)
 1003640:	2805d17a 	srai	r2,r5,5
 1003644:	21800504 	addi	r6,r4,20
 1003648:	18800b16 	blt	r3,r2,1003678 <__any_on+0x3c>
 100364c:	10c00b0e 	bge	r2,r3,100367c <__any_on+0x40>
 1003650:	294007cc 	andi	r5,r5,31
 1003654:	28000926 	beq	r5,zero,100367c <__any_on+0x40>
 1003658:	1087883a 	add	r3,r2,r2
 100365c:	18c7883a 	add	r3,r3,r3
 1003660:	30c7883a 	add	r3,r6,r3
 1003664:	19000017 	ldw	r4,0(r3)
 1003668:	2146d83a 	srl	r3,r4,r5
 100366c:	194a983a 	sll	r5,r3,r5
 1003670:	21400c1e 	bne	r4,r5,10036a4 <__any_on+0x68>
 1003674:	00000106 	br	100367c <__any_on+0x40>
 1003678:	1805883a 	mov	r2,r3
 100367c:	1085883a 	add	r2,r2,r2
 1003680:	1085883a 	add	r2,r2,r2
 1003684:	3085883a 	add	r2,r6,r2
 1003688:	3080042e 	bgeu	r6,r2,100369c <__any_on+0x60>
 100368c:	10bfff04 	addi	r2,r2,-4
 1003690:	10c00017 	ldw	r3,0(r2)
 1003694:	183ffc26 	beq	r3,zero,1003688 <__alt_data_end+0xff491b88>
 1003698:	00000206 	br	10036a4 <__any_on+0x68>
 100369c:	0005883a 	mov	r2,zero
 10036a0:	f800283a 	ret
 10036a4:	00800044 	movi	r2,1
 10036a8:	f800283a 	ret

010036ac <_calloc_r>:
 10036ac:	defffd04 	addi	sp,sp,-12
 10036b0:	dc000015 	stw	r16,0(sp)
 10036b4:	2021883a 	mov	r16,r4
 10036b8:	2809883a 	mov	r4,r5
 10036bc:	300b883a 	mov	r5,r6
 10036c0:	dfc00215 	stw	ra,8(sp)
 10036c4:	dc400115 	stw	r17,4(sp)
 10036c8:	10013440 	call	1001344 <__mulsi3>
 10036cc:	8009883a 	mov	r4,r16
 10036d0:	100b883a 	mov	r5,r2
 10036d4:	1023883a 	mov	r17,r2
 10036d8:	100370c0 	call	100370c <_malloc_r>
 10036dc:	1021883a 	mov	r16,r2
 10036e0:	10000426 	beq	r2,zero,10036f4 <_calloc_r+0x48>
 10036e4:	880d883a 	mov	r6,r17
 10036e8:	000b883a 	mov	r5,zero
 10036ec:	1009883a 	mov	r4,r2
 10036f0:	1004f440 	call	1004f44 <memset>
 10036f4:	8005883a 	mov	r2,r16
 10036f8:	dfc00217 	ldw	ra,8(sp)
 10036fc:	dc400117 	ldw	r17,4(sp)
 1003700:	dc000017 	ldw	r16,0(sp)
 1003704:	dec00304 	addi	sp,sp,12
 1003708:	f800283a 	ret

0100370c <_malloc_r>:
 100370c:	defffb04 	addi	sp,sp,-20
 1003710:	00bfff04 	movi	r2,-4
 1003714:	dc400115 	stw	r17,4(sp)
 1003718:	2c4000c4 	addi	r17,r5,3
 100371c:	88a2703a 	and	r17,r17,r2
 1003720:	dc800215 	stw	r18,8(sp)
 1003724:	dfc00415 	stw	ra,16(sp)
 1003728:	dcc00315 	stw	r19,12(sp)
 100372c:	dc000015 	stw	r16,0(sp)
 1003730:	8c400204 	addi	r17,r17,8
 1003734:	00800304 	movi	r2,12
 1003738:	2025883a 	mov	r18,r4
 100373c:	8880022e 	bgeu	r17,r2,1003748 <_malloc_r+0x3c>
 1003740:	1023883a 	mov	r17,r2
 1003744:	00000506 	br	100375c <_malloc_r+0x50>
 1003748:	8800040e 	bge	r17,zero,100375c <_malloc_r+0x50>
 100374c:	00800304 	movi	r2,12
 1003750:	90800015 	stw	r2,0(r18)
 1003754:	0005883a 	mov	r2,zero
 1003758:	00003b06 	br	1003848 <_malloc_r+0x13c>
 100375c:	897ffb36 	bltu	r17,r5,100374c <__alt_data_end+0xff491c4c>
 1003760:	00804074 	movhi	r2,257
 1003764:	10a75404 	addi	r2,r2,-25264
 1003768:	10c00017 	ldw	r3,0(r2)
 100376c:	1009883a 	mov	r4,r2
 1003770:	1821883a 	mov	r16,r3
 1003774:	80000926 	beq	r16,zero,100379c <_malloc_r+0x90>
 1003778:	80800017 	ldw	r2,0(r16)
 100377c:	1445c83a 	sub	r2,r2,r17
 1003780:	10001516 	blt	r2,zero,10037d8 <_malloc_r+0xcc>
 1003784:	014002c4 	movi	r5,11
 1003788:	28800d2e 	bgeu	r5,r2,10037c0 <_malloc_r+0xb4>
 100378c:	80800015 	stw	r2,0(r16)
 1003790:	80a1883a 	add	r16,r16,r2
 1003794:	84400015 	stw	r17,0(r16)
 1003798:	8000221e 	bne	r16,zero,1003824 <_malloc_r+0x118>
 100379c:	04004074 	movhi	r16,257
 10037a0:	84275304 	addi	r16,r16,-25268
 10037a4:	80800017 	ldw	r2,0(r16)
 10037a8:	10000e1e 	bne	r2,zero,10037e4 <_malloc_r+0xd8>
 10037ac:	000b883a 	mov	r5,zero
 10037b0:	9009883a 	mov	r4,r18
 10037b4:	10039080 	call	1003908 <_sbrk_r>
 10037b8:	80800015 	stw	r2,0(r16)
 10037bc:	00000906 	br	10037e4 <_malloc_r+0xd8>
 10037c0:	80800117 	ldw	r2,4(r16)
 10037c4:	1c00021e 	bne	r3,r16,10037d0 <_malloc_r+0xc4>
 10037c8:	20800015 	stw	r2,0(r4)
 10037cc:	00001506 	br	1003824 <_malloc_r+0x118>
 10037d0:	18800115 	stw	r2,4(r3)
 10037d4:	00001306 	br	1003824 <_malloc_r+0x118>
 10037d8:	8007883a 	mov	r3,r16
 10037dc:	84000117 	ldw	r16,4(r16)
 10037e0:	003fe406 	br	1003774 <__alt_data_end+0xff491c74>
 10037e4:	880b883a 	mov	r5,r17
 10037e8:	9009883a 	mov	r4,r18
 10037ec:	10039080 	call	1003908 <_sbrk_r>
 10037f0:	04ffffc4 	movi	r19,-1
 10037f4:	14ffd526 	beq	r2,r19,100374c <__alt_data_end+0xff491c4c>
 10037f8:	140000c4 	addi	r16,r2,3
 10037fc:	00ffff04 	movi	r3,-4
 1003800:	80e0703a 	and	r16,r16,r3
 1003804:	1400021e 	bne	r2,r16,1003810 <_malloc_r+0x104>
 1003808:	84400015 	stw	r17,0(r16)
 100380c:	00000506 	br	1003824 <_malloc_r+0x118>
 1003810:	808bc83a 	sub	r5,r16,r2
 1003814:	9009883a 	mov	r4,r18
 1003818:	10039080 	call	1003908 <_sbrk_r>
 100381c:	14fffa1e 	bne	r2,r19,1003808 <__alt_data_end+0xff491d08>
 1003820:	003fca06 	br	100374c <__alt_data_end+0xff491c4c>
 1003824:	810002c4 	addi	r4,r16,11
 1003828:	00bffe04 	movi	r2,-8
 100382c:	80c00104 	addi	r3,r16,4
 1003830:	2084703a 	and	r2,r4,r2
 1003834:	10c7c83a 	sub	r3,r2,r3
 1003838:	18000326 	beq	r3,zero,1003848 <_malloc_r+0x13c>
 100383c:	80e1883a 	add	r16,r16,r3
 1003840:	00c7c83a 	sub	r3,zero,r3
 1003844:	80c00015 	stw	r3,0(r16)
 1003848:	dfc00417 	ldw	ra,16(sp)
 100384c:	dcc00317 	ldw	r19,12(sp)
 1003850:	dc800217 	ldw	r18,8(sp)
 1003854:	dc400117 	ldw	r17,4(sp)
 1003858:	dc000017 	ldw	r16,0(sp)
 100385c:	dec00504 	addi	sp,sp,20
 1003860:	f800283a 	ret

01003864 <_realloc_r>:
 1003864:	2800021e 	bne	r5,zero,1003870 <_realloc_r+0xc>
 1003868:	300b883a 	mov	r5,r6
 100386c:	100370c1 	jmpi	100370c <_malloc_r>
 1003870:	defffb04 	addi	sp,sp,-20
 1003874:	dc400115 	stw	r17,4(sp)
 1003878:	dc000015 	stw	r16,0(sp)
 100387c:	dfc00415 	stw	ra,16(sp)
 1003880:	dcc00315 	stw	r19,12(sp)
 1003884:	dc800215 	stw	r18,8(sp)
 1003888:	3023883a 	mov	r17,r6
 100388c:	2821883a 	mov	r16,r5
 1003890:	3000021e 	bne	r6,zero,100389c <_realloc_r+0x38>
 1003894:	1004f640 	call	1004f64 <_free_r>
 1003898:	00001306 	br	10038e8 <_realloc_r+0x84>
 100389c:	2025883a 	mov	r18,r4
 10038a0:	10050480 	call	1005048 <_malloc_usable_size_r>
 10038a4:	14400e2e 	bgeu	r2,r17,10038e0 <_realloc_r+0x7c>
 10038a8:	880b883a 	mov	r5,r17
 10038ac:	9009883a 	mov	r4,r18
 10038b0:	100370c0 	call	100370c <_malloc_r>
 10038b4:	1027883a 	mov	r19,r2
 10038b8:	10000b26 	beq	r2,zero,10038e8 <_realloc_r+0x84>
 10038bc:	880d883a 	mov	r6,r17
 10038c0:	800b883a 	mov	r5,r16
 10038c4:	1009883a 	mov	r4,r2
 10038c8:	1004f1c0 	call	1004f1c <memcpy>
 10038cc:	800b883a 	mov	r5,r16
 10038d0:	9009883a 	mov	r4,r18
 10038d4:	1004f640 	call	1004f64 <_free_r>
 10038d8:	9805883a 	mov	r2,r19
 10038dc:	00000306 	br	10038ec <_realloc_r+0x88>
 10038e0:	8005883a 	mov	r2,r16
 10038e4:	00000106 	br	10038ec <_realloc_r+0x88>
 10038e8:	0005883a 	mov	r2,zero
 10038ec:	dfc00417 	ldw	ra,16(sp)
 10038f0:	dcc00317 	ldw	r19,12(sp)
 10038f4:	dc800217 	ldw	r18,8(sp)
 10038f8:	dc400117 	ldw	r17,4(sp)
 10038fc:	dc000017 	ldw	r16,0(sp)
 1003900:	dec00504 	addi	sp,sp,20
 1003904:	f800283a 	ret

01003908 <_sbrk_r>:
 1003908:	defffd04 	addi	sp,sp,-12
 100390c:	dc000015 	stw	r16,0(sp)
 1003910:	04004074 	movhi	r16,257
 1003914:	dc400115 	stw	r17,4(sp)
 1003918:	84275504 	addi	r16,r16,-25260
 100391c:	2023883a 	mov	r17,r4
 1003920:	2809883a 	mov	r4,r5
 1003924:	dfc00215 	stw	ra,8(sp)
 1003928:	80000015 	stw	zero,0(r16)
 100392c:	1007cfc0 	call	1007cfc <sbrk>
 1003930:	00ffffc4 	movi	r3,-1
 1003934:	10c0031e 	bne	r2,r3,1003944 <_sbrk_r+0x3c>
 1003938:	80c00017 	ldw	r3,0(r16)
 100393c:	18000126 	beq	r3,zero,1003944 <_sbrk_r+0x3c>
 1003940:	88c00015 	stw	r3,0(r17)
 1003944:	dfc00217 	ldw	ra,8(sp)
 1003948:	dc400117 	ldw	r17,4(sp)
 100394c:	dc000017 	ldw	r16,0(sp)
 1003950:	dec00304 	addi	sp,sp,12
 1003954:	f800283a 	ret

01003958 <strcpy>:
 1003958:	2005883a 	mov	r2,r4
 100395c:	200d883a 	mov	r6,r4
 1003960:	28c00003 	ldbu	r3,0(r5)
 1003964:	31800044 	addi	r6,r6,1
 1003968:	29400044 	addi	r5,r5,1
 100396c:	30ffffc5 	stb	r3,-1(r6)
 1003970:	18c03fcc 	andi	r3,r3,255
 1003974:	18c0201c 	xori	r3,r3,128
 1003978:	18ffe004 	addi	r3,r3,-128
 100397c:	183ff81e 	bne	r3,zero,1003960 <__alt_data_end+0xff491e60>
 1003980:	f800283a 	ret

01003984 <_write_r>:
 1003984:	defffd04 	addi	sp,sp,-12
 1003988:	dc000015 	stw	r16,0(sp)
 100398c:	04004074 	movhi	r16,257
 1003990:	dc400115 	stw	r17,4(sp)
 1003994:	84275504 	addi	r16,r16,-25260
 1003998:	2023883a 	mov	r17,r4
 100399c:	2809883a 	mov	r4,r5
 10039a0:	300b883a 	mov	r5,r6
 10039a4:	380d883a 	mov	r6,r7
 10039a8:	dfc00215 	stw	ra,8(sp)
 10039ac:	80000015 	stw	zero,0(r16)
 10039b0:	1007e9c0 	call	1007e9c <write>
 10039b4:	00ffffc4 	movi	r3,-1
 10039b8:	10c0031e 	bne	r2,r3,10039c8 <_write_r+0x44>
 10039bc:	80c00017 	ldw	r3,0(r16)
 10039c0:	18000126 	beq	r3,zero,10039c8 <_write_r+0x44>
 10039c4:	88c00015 	stw	r3,0(r17)
 10039c8:	dfc00217 	ldw	ra,8(sp)
 10039cc:	dc400117 	ldw	r17,4(sp)
 10039d0:	dc000017 	ldw	r16,0(sp)
 10039d4:	dec00304 	addi	sp,sp,12
 10039d8:	f800283a 	ret

010039dc <quorem>:
 10039dc:	defff204 	addi	sp,sp,-56
 10039e0:	dc000415 	stw	r16,16(sp)
 10039e4:	20800417 	ldw	r2,16(r4)
 10039e8:	2c000417 	ldw	r16,16(r5)
 10039ec:	dfc00d15 	stw	ra,52(sp)
 10039f0:	df000c15 	stw	fp,48(sp)
 10039f4:	ddc00b15 	stw	r23,44(sp)
 10039f8:	dd800a15 	stw	r22,40(sp)
 10039fc:	dd400915 	stw	r21,36(sp)
 1003a00:	dd000815 	stw	r20,32(sp)
 1003a04:	dcc00715 	stw	r19,28(sp)
 1003a08:	dc800615 	stw	r18,24(sp)
 1003a0c:	dc400515 	stw	r17,20(sp)
 1003a10:	14006d16 	blt	r2,r16,1003bc8 <quorem+0x1ec>
 1003a14:	843fffc4 	addi	r16,r16,-1
 1003a18:	8423883a 	add	r17,r16,r16
 1003a1c:	2cc00504 	addi	r19,r5,20
 1003a20:	8c63883a 	add	r17,r17,r17
 1003a24:	9c6b883a 	add	r21,r19,r17
 1003a28:	25c00504 	addi	r23,r4,20
 1003a2c:	2829883a 	mov	r20,r5
 1003a30:	bc63883a 	add	r17,r23,r17
 1003a34:	a9400017 	ldw	r5,0(r21)
 1003a38:	2025883a 	mov	r18,r4
 1003a3c:	89000017 	ldw	r4,0(r17)
 1003a40:	29400044 	addi	r5,r5,1
 1003a44:	100515c0 	call	100515c <__udivsi3>
 1003a48:	102d883a 	mov	r22,r2
 1003a4c:	10003526 	beq	r2,zero,1003b24 <quorem+0x148>
 1003a50:	b80d883a 	mov	r6,r23
 1003a54:	9839883a 	mov	fp,r19
 1003a58:	000f883a 	mov	r7,zero
 1003a5c:	0011883a 	mov	r8,zero
 1003a60:	e2400017 	ldw	r9,0(fp)
 1003a64:	b00b883a 	mov	r5,r22
 1003a68:	d9800315 	stw	r6,12(sp)
 1003a6c:	493fffcc 	andi	r4,r9,65535
 1003a70:	da000215 	stw	r8,8(sp)
 1003a74:	d9c00015 	stw	r7,0(sp)
 1003a78:	da400115 	stw	r9,4(sp)
 1003a7c:	10013440 	call	1001344 <__mulsi3>
 1003a80:	da400117 	ldw	r9,4(sp)
 1003a84:	d9c00017 	ldw	r7,0(sp)
 1003a88:	b00b883a 	mov	r5,r22
 1003a8c:	4808d43a 	srli	r4,r9,16
 1003a90:	11c7883a 	add	r3,r2,r7
 1003a94:	d8c00015 	stw	r3,0(sp)
 1003a98:	10013440 	call	1001344 <__mulsi3>
 1003a9c:	d8c00017 	ldw	r3,0(sp)
 1003aa0:	d9800317 	ldw	r6,12(sp)
 1003aa4:	da000217 	ldw	r8,8(sp)
 1003aa8:	180ad43a 	srli	r5,r3,16
 1003aac:	18ffffcc 	andi	r3,r3,65535
 1003ab0:	e7000104 	addi	fp,fp,4
 1003ab4:	1145883a 	add	r2,r2,r5
 1003ab8:	31400017 	ldw	r5,0(r6)
 1003abc:	100ed43a 	srli	r7,r2,16
 1003ac0:	10bfffcc 	andi	r2,r2,65535
 1003ac4:	293fffcc 	andi	r4,r5,65535
 1003ac8:	2209883a 	add	r4,r4,r8
 1003acc:	20c7c83a 	sub	r3,r4,r3
 1003ad0:	280ad43a 	srli	r5,r5,16
 1003ad4:	1809d43a 	srai	r4,r3,16
 1003ad8:	18ffffcc 	andi	r3,r3,65535
 1003adc:	2885c83a 	sub	r2,r5,r2
 1003ae0:	1105883a 	add	r2,r2,r4
 1003ae4:	1011d43a 	srai	r8,r2,16
 1003ae8:	1004943a 	slli	r2,r2,16
 1003aec:	31800104 	addi	r6,r6,4
 1003af0:	10c6b03a 	or	r3,r2,r3
 1003af4:	30ffff15 	stw	r3,-4(r6)
 1003af8:	af3fd92e 	bgeu	r21,fp,1003a60 <__alt_data_end+0xff491f60>
 1003afc:	88800017 	ldw	r2,0(r17)
 1003b00:	1000081e 	bne	r2,zero,1003b24 <quorem+0x148>
 1003b04:	8c7fff04 	addi	r17,r17,-4
 1003b08:	bc400236 	bltu	r23,r17,1003b14 <quorem+0x138>
 1003b0c:	94000415 	stw	r16,16(r18)
 1003b10:	00000406 	br	1003b24 <quorem+0x148>
 1003b14:	88800017 	ldw	r2,0(r17)
 1003b18:	103ffc1e 	bne	r2,zero,1003b0c <__alt_data_end+0xff49200c>
 1003b1c:	843fffc4 	addi	r16,r16,-1
 1003b20:	003ff806 	br	1003b04 <__alt_data_end+0xff492004>
 1003b24:	a00b883a 	mov	r5,r20
 1003b28:	9009883a 	mov	r4,r18
 1003b2c:	10030700 	call	1003070 <__mcmp>
 1003b30:	10002316 	blt	r2,zero,1003bc0 <quorem+0x1e4>
 1003b34:	b5800044 	addi	r22,r22,1
 1003b38:	b80b883a 	mov	r5,r23
 1003b3c:	000d883a 	mov	r6,zero
 1003b40:	28c00017 	ldw	r3,0(r5)
 1003b44:	99000017 	ldw	r4,0(r19)
 1003b48:	9cc00104 	addi	r19,r19,4
 1003b4c:	18bfffcc 	andi	r2,r3,65535
 1003b50:	118d883a 	add	r6,r2,r6
 1003b54:	1806d43a 	srli	r3,r3,16
 1003b58:	20bfffcc 	andi	r2,r4,65535
 1003b5c:	2008d43a 	srli	r4,r4,16
 1003b60:	3085c83a 	sub	r2,r6,r2
 1003b64:	29400104 	addi	r5,r5,4
 1003b68:	1909c83a 	sub	r4,r3,r4
 1003b6c:	1007d43a 	srai	r3,r2,16
 1003b70:	10bfffcc 	andi	r2,r2,65535
 1003b74:	20c7883a 	add	r3,r4,r3
 1003b78:	180dd43a 	srai	r6,r3,16
 1003b7c:	1806943a 	slli	r3,r3,16
 1003b80:	1884b03a 	or	r2,r3,r2
 1003b84:	28bfff15 	stw	r2,-4(r5)
 1003b88:	acffed2e 	bgeu	r21,r19,1003b40 <__alt_data_end+0xff492040>
 1003b8c:	8407883a 	add	r3,r16,r16
 1003b90:	18c7883a 	add	r3,r3,r3
 1003b94:	b8c7883a 	add	r3,r23,r3
 1003b98:	18800017 	ldw	r2,0(r3)
 1003b9c:	1000081e 	bne	r2,zero,1003bc0 <quorem+0x1e4>
 1003ba0:	18ffff04 	addi	r3,r3,-4
 1003ba4:	b8c00236 	bltu	r23,r3,1003bb0 <quorem+0x1d4>
 1003ba8:	94000415 	stw	r16,16(r18)
 1003bac:	00000406 	br	1003bc0 <quorem+0x1e4>
 1003bb0:	18800017 	ldw	r2,0(r3)
 1003bb4:	103ffc1e 	bne	r2,zero,1003ba8 <__alt_data_end+0xff4920a8>
 1003bb8:	843fffc4 	addi	r16,r16,-1
 1003bbc:	003ff806 	br	1003ba0 <__alt_data_end+0xff4920a0>
 1003bc0:	b005883a 	mov	r2,r22
 1003bc4:	00000106 	br	1003bcc <quorem+0x1f0>
 1003bc8:	0005883a 	mov	r2,zero
 1003bcc:	dfc00d17 	ldw	ra,52(sp)
 1003bd0:	df000c17 	ldw	fp,48(sp)
 1003bd4:	ddc00b17 	ldw	r23,44(sp)
 1003bd8:	dd800a17 	ldw	r22,40(sp)
 1003bdc:	dd400917 	ldw	r21,36(sp)
 1003be0:	dd000817 	ldw	r20,32(sp)
 1003be4:	dcc00717 	ldw	r19,28(sp)
 1003be8:	dc800617 	ldw	r18,24(sp)
 1003bec:	dc400517 	ldw	r17,20(sp)
 1003bf0:	dc000417 	ldw	r16,16(sp)
 1003bf4:	dec00e04 	addi	sp,sp,56
 1003bf8:	f800283a 	ret

01003bfc <_dtoa_r>:
 1003bfc:	20800417 	ldw	r2,16(r4)
 1003c00:	deffe004 	addi	sp,sp,-128
 1003c04:	dd001a15 	stw	r20,104(sp)
 1003c08:	dcc01915 	stw	r19,100(sp)
 1003c0c:	dc801815 	stw	r18,96(sp)
 1003c10:	dc401715 	stw	r17,92(sp)
 1003c14:	dc001615 	stw	r16,88(sp)
 1003c18:	dfc01f15 	stw	ra,124(sp)
 1003c1c:	df001e15 	stw	fp,120(sp)
 1003c20:	ddc01d15 	stw	r23,116(sp)
 1003c24:	dd801c15 	stw	r22,112(sp)
 1003c28:	dd401b15 	stw	r21,108(sp)
 1003c2c:	d9400915 	stw	r5,36(sp)
 1003c30:	d9c00815 	stw	r7,32(sp)
 1003c34:	2021883a 	mov	r16,r4
 1003c38:	3029883a 	mov	r20,r6
 1003c3c:	dc802217 	ldw	r18,136(sp)
 1003c40:	2823883a 	mov	r17,r5
 1003c44:	3027883a 	mov	r19,r6
 1003c48:	1000071e 	bne	r2,zero,1003c68 <_dtoa_r+0x6c>
 1003c4c:	01000404 	movi	r4,16
 1003c50:	1004ef40 	call	1004ef4 <malloc>
 1003c54:	80800415 	stw	r2,16(r16)
 1003c58:	10000115 	stw	zero,4(r2)
 1003c5c:	10000215 	stw	zero,8(r2)
 1003c60:	10000015 	stw	zero,0(r2)
 1003c64:	10000315 	stw	zero,12(r2)
 1003c68:	80800417 	ldw	r2,16(r16)
 1003c6c:	11400017 	ldw	r5,0(r2)
 1003c70:	28000926 	beq	r5,zero,1003c98 <_dtoa_r+0x9c>
 1003c74:	10c00117 	ldw	r3,4(r2)
 1003c78:	00800044 	movi	r2,1
 1003c7c:	8009883a 	mov	r4,r16
 1003c80:	10c4983a 	sll	r2,r2,r3
 1003c84:	28c00115 	stw	r3,4(r5)
 1003c88:	28800215 	stw	r2,8(r5)
 1003c8c:	10027800 	call	1002780 <_Bfree>
 1003c90:	80800417 	ldw	r2,16(r16)
 1003c94:	10000015 	stw	zero,0(r2)
 1003c98:	a000060e 	bge	r20,zero,1003cb4 <_dtoa_r+0xb8>
 1003c9c:	04e00034 	movhi	r19,32768
 1003ca0:	00800044 	movi	r2,1
 1003ca4:	9cffffc4 	addi	r19,r19,-1
 1003ca8:	90800015 	stw	r2,0(r18)
 1003cac:	a4e6703a 	and	r19,r20,r19
 1003cb0:	00000106 	br	1003cb8 <_dtoa_r+0xbc>
 1003cb4:	90000015 	stw	zero,0(r18)
 1003cb8:	989ffc2c 	andhi	r2,r19,32752
 1003cbc:	00dffc34 	movhi	r3,32752
 1003cc0:	10c0181e 	bne	r2,r3,1003d24 <_dtoa_r+0x128>
 1003cc4:	d8c02117 	ldw	r3,132(sp)
 1003cc8:	d9000917 	ldw	r4,36(sp)
 1003ccc:	0089c3c4 	movi	r2,9999
 1003cd0:	18800015 	stw	r2,0(r3)
 1003cd4:	2000071e 	bne	r4,zero,1003cf4 <_dtoa_r+0xf8>
 1003cd8:	00800434 	movhi	r2,16
 1003cdc:	10bfffc4 	addi	r2,r2,-1
 1003ce0:	98a6703a 	and	r19,r19,r2
 1003ce4:	9800031e 	bne	r19,zero,1003cf4 <_dtoa_r+0xf8>
 1003ce8:	00804074 	movhi	r2,257
 1003cec:	10a5d104 	addi	r2,r2,-26812
 1003cf0:	00000206 	br	1003cfc <_dtoa_r+0x100>
 1003cf4:	00804074 	movhi	r2,257
 1003cf8:	10a5d404 	addi	r2,r2,-26800
 1003cfc:	d8c02317 	ldw	r3,140(sp)
 1003d00:	18047026 	beq	r3,zero,1004ec4 <_dtoa_r+0x12c8>
 1003d04:	10c000c7 	ldb	r3,3(r2)
 1003d08:	18000226 	beq	r3,zero,1003d14 <_dtoa_r+0x118>
 1003d0c:	10c00204 	addi	r3,r2,8
 1003d10:	00000106 	br	1003d18 <_dtoa_r+0x11c>
 1003d14:	10c000c4 	addi	r3,r2,3
 1003d18:	d9002317 	ldw	r4,140(sp)
 1003d1c:	20c00015 	stw	r3,0(r4)
 1003d20:	00046806 	br	1004ec4 <_dtoa_r+0x12c8>
 1003d24:	d9000917 	ldw	r4,36(sp)
 1003d28:	000d883a 	mov	r6,zero
 1003d2c:	000f883a 	mov	r7,zero
 1003d30:	980b883a 	mov	r5,r19
 1003d34:	10064940 	call	1006494 <__eqdf2>
 1003d38:	10000a1e 	bne	r2,zero,1003d64 <_dtoa_r+0x168>
 1003d3c:	d8c02117 	ldw	r3,132(sp)
 1003d40:	d9002317 	ldw	r4,140(sp)
 1003d44:	00800044 	movi	r2,1
 1003d48:	18800015 	stw	r2,0(r3)
 1003d4c:	20044926 	beq	r4,zero,1004e74 <_dtoa_r+0x1278>
 1003d50:	00804074 	movhi	r2,257
 1003d54:	10a5d544 	addi	r2,r2,-26795
 1003d58:	20800015 	stw	r2,0(r4)
 1003d5c:	10bfffc4 	addi	r2,r2,-1
 1003d60:	00045806 	br	1004ec4 <_dtoa_r+0x12c8>
 1003d64:	d9400917 	ldw	r5,36(sp)
 1003d68:	d8800204 	addi	r2,sp,8
 1003d6c:	9824d53a 	srli	r18,r19,20
 1003d70:	d8800015 	stw	r2,0(sp)
 1003d74:	d9c00104 	addi	r7,sp,4
 1003d78:	980d883a 	mov	r6,r19
 1003d7c:	8009883a 	mov	r4,r16
 1003d80:	10033980 	call	1003398 <__d2b>
 1003d84:	d8800315 	stw	r2,12(sp)
 1003d88:	9481ffcc 	andi	r18,r18,2047
 1003d8c:	dd000217 	ldw	r20,8(sp)
 1003d90:	90000826 	beq	r18,zero,1003db4 <_dtoa_r+0x1b8>
 1003d94:	01400434 	movhi	r5,16
 1003d98:	297fffc4 	addi	r5,r5,-1
 1003d9c:	994a703a 	and	r5,r19,r5
 1003da0:	d8800917 	ldw	r2,36(sp)
 1003da4:	294ffc34 	orhi	r5,r5,16368
 1003da8:	94bf0044 	addi	r18,r18,-1023
 1003dac:	d8001015 	stw	zero,64(sp)
 1003db0:	00001606 	br	1003e0c <_dtoa_r+0x210>
 1003db4:	dc800117 	ldw	r18,4(sp)
 1003db8:	00800804 	movi	r2,32
 1003dbc:	a4a5883a 	add	r18,r20,r18
 1003dc0:	91010c84 	addi	r4,r18,1074
 1003dc4:	1100080e 	bge	r2,r4,1003de8 <_dtoa_r+0x1ec>
 1003dc8:	d8800917 	ldw	r2,36(sp)
 1003dcc:	91410484 	addi	r5,r18,1042
 1003dd0:	00c01004 	movi	r3,64
 1003dd4:	114ad83a 	srl	r5,r2,r5
 1003dd8:	1905c83a 	sub	r2,r3,r4
 1003ddc:	9884983a 	sll	r2,r19,r2
 1003de0:	2888b03a 	or	r4,r5,r2
 1003de4:	00000306 	br	1003df4 <_dtoa_r+0x1f8>
 1003de8:	d8c00917 	ldw	r3,36(sp)
 1003dec:	1109c83a 	sub	r4,r2,r4
 1003df0:	1908983a 	sll	r4,r3,r4
 1003df4:	10079b00 	call	10079b0 <__floatunsidf>
 1003df8:	017f8434 	movhi	r5,65040
 1003dfc:	01000044 	movi	r4,1
 1003e00:	194b883a 	add	r5,r3,r5
 1003e04:	94bfffc4 	addi	r18,r18,-1
 1003e08:	d9001015 	stw	r4,64(sp)
 1003e0c:	000d883a 	mov	r6,zero
 1003e10:	01cffe34 	movhi	r7,16376
 1003e14:	1009883a 	mov	r4,r2
 1003e18:	1006f580 	call	1006f58 <__subdf3>
 1003e1c:	0198dbf4 	movhi	r6,25455
 1003e20:	01cff4f4 	movhi	r7,16339
 1003e24:	3190d844 	addi	r6,r6,17249
 1003e28:	39e1e9c4 	addi	r7,r7,-30809
 1003e2c:	1009883a 	mov	r4,r2
 1003e30:	180b883a 	mov	r5,r3
 1003e34:	10066ec0 	call	10066ec <__muldf3>
 1003e38:	01a2d874 	movhi	r6,35681
 1003e3c:	01cff1f4 	movhi	r7,16327
 1003e40:	31b22cc4 	addi	r6,r6,-14157
 1003e44:	39e28a04 	addi	r7,r7,-30168
 1003e48:	180b883a 	mov	r5,r3
 1003e4c:	1009883a 	mov	r4,r2
 1003e50:	10052180 	call	1005218 <__adddf3>
 1003e54:	9009883a 	mov	r4,r18
 1003e58:	102d883a 	mov	r22,r2
 1003e5c:	182b883a 	mov	r21,r3
 1003e60:	10078d40 	call	10078d4 <__floatsidf>
 1003e64:	019427f4 	movhi	r6,20639
 1003e68:	01cff4f4 	movhi	r7,16339
 1003e6c:	319e7ec4 	addi	r6,r6,31227
 1003e70:	39d104c4 	addi	r7,r7,17427
 1003e74:	1009883a 	mov	r4,r2
 1003e78:	180b883a 	mov	r5,r3
 1003e7c:	10066ec0 	call	10066ec <__muldf3>
 1003e80:	100d883a 	mov	r6,r2
 1003e84:	180f883a 	mov	r7,r3
 1003e88:	b009883a 	mov	r4,r22
 1003e8c:	a80b883a 	mov	r5,r21
 1003e90:	10052180 	call	1005218 <__adddf3>
 1003e94:	1009883a 	mov	r4,r2
 1003e98:	180b883a 	mov	r5,r3
 1003e9c:	102d883a 	mov	r22,r2
 1003ea0:	182b883a 	mov	r21,r3
 1003ea4:	10078540 	call	1007854 <__fixdfsi>
 1003ea8:	000d883a 	mov	r6,zero
 1003eac:	000f883a 	mov	r7,zero
 1003eb0:	b009883a 	mov	r4,r22
 1003eb4:	a80b883a 	mov	r5,r21
 1003eb8:	1039883a 	mov	fp,r2
 1003ebc:	10065f80 	call	10065f8 <__ledf2>
 1003ec0:	1000090e 	bge	r2,zero,1003ee8 <_dtoa_r+0x2ec>
 1003ec4:	e009883a 	mov	r4,fp
 1003ec8:	10078d40 	call	10078d4 <__floatsidf>
 1003ecc:	100d883a 	mov	r6,r2
 1003ed0:	180f883a 	mov	r7,r3
 1003ed4:	b009883a 	mov	r4,r22
 1003ed8:	a80b883a 	mov	r5,r21
 1003edc:	10064940 	call	1006494 <__eqdf2>
 1003ee0:	10000126 	beq	r2,zero,1003ee8 <_dtoa_r+0x2ec>
 1003ee4:	e73fffc4 	addi	fp,fp,-1
 1003ee8:	00800584 	movi	r2,22
 1003eec:	17000c36 	bltu	r2,fp,1003f20 <_dtoa_r+0x324>
 1003ef0:	e00490fa 	slli	r2,fp,3
 1003ef4:	00c04074 	movhi	r3,257
 1003ef8:	18e59f04 	addi	r3,r3,-27012
 1003efc:	1885883a 	add	r2,r3,r2
 1003f00:	d9800917 	ldw	r6,36(sp)
 1003f04:	11000017 	ldw	r4,0(r2)
 1003f08:	11400117 	ldw	r5,4(r2)
 1003f0c:	980f883a 	mov	r7,r19
 1003f10:	100651c0 	call	100651c <__gedf2>
 1003f14:	0080050e 	bge	zero,r2,1003f2c <_dtoa_r+0x330>
 1003f18:	e73fffc4 	addi	fp,fp,-1
 1003f1c:	00000306 	br	1003f2c <_dtoa_r+0x330>
 1003f20:	00800044 	movi	r2,1
 1003f24:	d8800f15 	stw	r2,60(sp)
 1003f28:	00000106 	br	1003f30 <_dtoa_r+0x334>
 1003f2c:	d8000f15 	stw	zero,60(sp)
 1003f30:	a4afc83a 	sub	r23,r20,r18
 1003f34:	bdffffc4 	addi	r23,r23,-1
 1003f38:	b800040e 	bge	r23,zero,1003f4c <_dtoa_r+0x350>
 1003f3c:	05efc83a 	sub	r23,zero,r23
 1003f40:	ddc00615 	stw	r23,24(sp)
 1003f44:	002f883a 	mov	r23,zero
 1003f48:	00000106 	br	1003f50 <_dtoa_r+0x354>
 1003f4c:	d8000615 	stw	zero,24(sp)
 1003f50:	e0000416 	blt	fp,zero,1003f64 <_dtoa_r+0x368>
 1003f54:	bf2f883a 	add	r23,r23,fp
 1003f58:	df000d15 	stw	fp,52(sp)
 1003f5c:	d8000a15 	stw	zero,40(sp)
 1003f60:	00000606 	br	1003f7c <_dtoa_r+0x380>
 1003f64:	d8c00617 	ldw	r3,24(sp)
 1003f68:	0709c83a 	sub	r4,zero,fp
 1003f6c:	d9000a15 	stw	r4,40(sp)
 1003f70:	1f07c83a 	sub	r3,r3,fp
 1003f74:	d8c00615 	stw	r3,24(sp)
 1003f78:	d8000d15 	stw	zero,52(sp)
 1003f7c:	d8c00817 	ldw	r3,32(sp)
 1003f80:	00800244 	movi	r2,9
 1003f84:	10c02736 	bltu	r2,r3,1004024 <_dtoa_r+0x428>
 1003f88:	00800144 	movi	r2,5
 1003f8c:	10c0040e 	bge	r2,r3,1003fa0 <_dtoa_r+0x3a4>
 1003f90:	18ffff04 	addi	r3,r3,-4
 1003f94:	d8c00815 	stw	r3,32(sp)
 1003f98:	0025883a 	mov	r18,zero
 1003f9c:	00000106 	br	1003fa4 <_dtoa_r+0x3a8>
 1003fa0:	04800044 	movi	r18,1
 1003fa4:	d9000817 	ldw	r4,32(sp)
 1003fa8:	00c000c4 	movi	r3,3
 1003fac:	20c01426 	beq	r4,r3,1004000 <_dtoa_r+0x404>
 1003fb0:	19000416 	blt	r3,r4,1003fc4 <_dtoa_r+0x3c8>
 1003fb4:	00800084 	movi	r2,2
 1003fb8:	2080211e 	bne	r4,r2,1004040 <_dtoa_r+0x444>
 1003fbc:	d8000b15 	stw	zero,44(sp)
 1003fc0:	00000906 	br	1003fe8 <_dtoa_r+0x3ec>
 1003fc4:	d9000817 	ldw	r4,32(sp)
 1003fc8:	00c00104 	movi	r3,4
 1003fcc:	20c00426 	beq	r4,r3,1003fe0 <_dtoa_r+0x3e4>
 1003fd0:	20801b1e 	bne	r4,r2,1004040 <_dtoa_r+0x444>
 1003fd4:	00c00044 	movi	r3,1
 1003fd8:	d8c00b15 	stw	r3,44(sp)
 1003fdc:	00000906 	br	1004004 <_dtoa_r+0x408>
 1003fe0:	00800044 	movi	r2,1
 1003fe4:	d8800b15 	stw	r2,44(sp)
 1003fe8:	d9002017 	ldw	r4,128(sp)
 1003fec:	01001c0e 	bge	zero,r4,1004060 <_dtoa_r+0x464>
 1003ff0:	d9000515 	stw	r4,20(sp)
 1003ff4:	d9000415 	stw	r4,16(sp)
 1003ff8:	2005883a 	mov	r2,r4
 1003ffc:	00001f06 	br	100407c <_dtoa_r+0x480>
 1004000:	d8000b15 	stw	zero,44(sp)
 1004004:	d8802017 	ldw	r2,128(sp)
 1004008:	e085883a 	add	r2,fp,r2
 100400c:	10c00044 	addi	r3,r2,1
 1004010:	d8800515 	stw	r2,20(sp)
 1004014:	d8c00415 	stw	r3,16(sp)
 1004018:	00c0170e 	bge	zero,r3,1004078 <_dtoa_r+0x47c>
 100401c:	1805883a 	mov	r2,r3
 1004020:	00001606 	br	100407c <_dtoa_r+0x480>
 1004024:	013fffc4 	movi	r4,-1
 1004028:	04800044 	movi	r18,1
 100402c:	d8000815 	stw	zero,32(sp)
 1004030:	dc800b15 	stw	r18,44(sp)
 1004034:	d9000515 	stw	r4,20(sp)
 1004038:	d9000415 	stw	r4,16(sp)
 100403c:	00000506 	br	1004054 <_dtoa_r+0x458>
 1004040:	00ffffc4 	movi	r3,-1
 1004044:	00800044 	movi	r2,1
 1004048:	d8800b15 	stw	r2,44(sp)
 100404c:	d8c00515 	stw	r3,20(sp)
 1004050:	d8c00415 	stw	r3,16(sp)
 1004054:	00800484 	movi	r2,18
 1004058:	d8002015 	stw	zero,128(sp)
 100405c:	00000706 	br	100407c <_dtoa_r+0x480>
 1004060:	01000044 	movi	r4,1
 1004064:	d9000515 	stw	r4,20(sp)
 1004068:	d9000415 	stw	r4,16(sp)
 100406c:	2005883a 	mov	r2,r4
 1004070:	d9002015 	stw	r4,128(sp)
 1004074:	00000106 	br	100407c <_dtoa_r+0x480>
 1004078:	00800044 	movi	r2,1
 100407c:	85000417 	ldw	r20,16(r16)
 1004080:	00c00104 	movi	r3,4
 1004084:	a0000115 	stw	zero,4(r20)
 1004088:	19000504 	addi	r4,r3,20
 100408c:	a1400117 	ldw	r5,4(r20)
 1004090:	11000436 	bltu	r2,r4,10040a4 <_dtoa_r+0x4a8>
 1004094:	29400044 	addi	r5,r5,1
 1004098:	a1400115 	stw	r5,4(r20)
 100409c:	18c7883a 	add	r3,r3,r3
 10040a0:	003ff906 	br	1004088 <__alt_data_end+0xff492588>
 10040a4:	8009883a 	mov	r4,r16
 10040a8:	100269c0 	call	100269c <_Balloc>
 10040ac:	a0800015 	stw	r2,0(r20)
 10040b0:	80800417 	ldw	r2,16(r16)
 10040b4:	d8c00417 	ldw	r3,16(sp)
 10040b8:	10800017 	ldw	r2,0(r2)
 10040bc:	d8800715 	stw	r2,28(sp)
 10040c0:	00800384 	movi	r2,14
 10040c4:	10c13436 	bltu	r2,r3,1004598 <_dtoa_r+0x99c>
 10040c8:	90013326 	beq	r18,zero,1004598 <_dtoa_r+0x99c>
 10040cc:	dcc01315 	stw	r19,76(sp)
 10040d0:	0700330e 	bge	zero,fp,10041a0 <_dtoa_r+0x5a4>
 10040d4:	e08003cc 	andi	r2,fp,15
 10040d8:	100490fa 	slli	r2,r2,3
 10040dc:	00c04074 	movhi	r3,257
 10040e0:	e029d13a 	srai	r20,fp,4
 10040e4:	18e59f04 	addi	r3,r3,-27012
 10040e8:	1885883a 	add	r2,r3,r2
 10040ec:	15800017 	ldw	r22,0(r2)
 10040f0:	15400117 	ldw	r21,4(r2)
 10040f4:	a080040c 	andi	r2,r20,16
 10040f8:	10000c26 	beq	r2,zero,100412c <_dtoa_r+0x530>
 10040fc:	00804074 	movhi	r2,257
 1004100:	10a59504 	addi	r2,r2,-27052
 1004104:	11800817 	ldw	r6,32(r2)
 1004108:	11c00917 	ldw	r7,36(r2)
 100410c:	d9000917 	ldw	r4,36(sp)
 1004110:	980b883a 	mov	r5,r19
 1004114:	a50003cc 	andi	r20,r20,15
 1004118:	1005ac40 	call	1005ac4 <__divdf3>
 100411c:	1023883a 	mov	r17,r2
 1004120:	1827883a 	mov	r19,r3
 1004124:	048000c4 	movi	r18,3
 1004128:	00000106 	br	1004130 <_dtoa_r+0x534>
 100412c:	04800084 	movi	r18,2
 1004130:	02404074 	movhi	r9,257
 1004134:	0011883a 	mov	r8,zero
 1004138:	4a659504 	addi	r9,r9,-27052
 100413c:	a0001226 	beq	r20,zero,1004188 <_dtoa_r+0x58c>
 1004140:	a080004c 	andi	r2,r20,1
 1004144:	10000d26 	beq	r2,zero,100417c <_dtoa_r+0x580>
 1004148:	4245883a 	add	r2,r8,r9
 100414c:	11800017 	ldw	r6,0(r2)
 1004150:	11c00117 	ldw	r7,4(r2)
 1004154:	b009883a 	mov	r4,r22
 1004158:	a80b883a 	mov	r5,r21
 100415c:	da001415 	stw	r8,80(sp)
 1004160:	da401515 	stw	r9,84(sp)
 1004164:	10066ec0 	call	10066ec <__muldf3>
 1004168:	da401517 	ldw	r9,84(sp)
 100416c:	da001417 	ldw	r8,80(sp)
 1004170:	94800044 	addi	r18,r18,1
 1004174:	102d883a 	mov	r22,r2
 1004178:	182b883a 	mov	r21,r3
 100417c:	a029d07a 	srai	r20,r20,1
 1004180:	42000204 	addi	r8,r8,8
 1004184:	003fed06 	br	100413c <__alt_data_end+0xff49263c>
 1004188:	b00d883a 	mov	r6,r22
 100418c:	a80f883a 	mov	r7,r21
 1004190:	8809883a 	mov	r4,r17
 1004194:	980b883a 	mov	r5,r19
 1004198:	1005ac40 	call	1005ac4 <__divdf3>
 100419c:	00002406 	br	1004230 <_dtoa_r+0x634>
 10041a0:	0729c83a 	sub	r20,zero,fp
 10041a4:	a0002526 	beq	r20,zero,100423c <_dtoa_r+0x640>
 10041a8:	a08003cc 	andi	r2,r20,15
 10041ac:	100490fa 	slli	r2,r2,3
 10041b0:	00c04074 	movhi	r3,257
 10041b4:	18e59f04 	addi	r3,r3,-27012
 10041b8:	1885883a 	add	r2,r3,r2
 10041bc:	d9000917 	ldw	r4,36(sp)
 10041c0:	11800017 	ldw	r6,0(r2)
 10041c4:	11c00117 	ldw	r7,4(r2)
 10041c8:	980b883a 	mov	r5,r19
 10041cc:	a029d13a 	srai	r20,r20,4
 10041d0:	10066ec0 	call	10066ec <__muldf3>
 10041d4:	05804074 	movhi	r22,257
 10041d8:	1023883a 	mov	r17,r2
 10041dc:	1827883a 	mov	r19,r3
 10041e0:	002b883a 	mov	r21,zero
 10041e4:	0009883a 	mov	r4,zero
 10041e8:	04800084 	movi	r18,2
 10041ec:	b5a59504 	addi	r22,r22,-27052
 10041f0:	a0000d26 	beq	r20,zero,1004228 <_dtoa_r+0x62c>
 10041f4:	a140004c 	andi	r5,r20,1
 10041f8:	28000826 	beq	r5,zero,100421c <_dtoa_r+0x620>
 10041fc:	ad89883a 	add	r4,r21,r22
 1004200:	21800017 	ldw	r6,0(r4)
 1004204:	21c00117 	ldw	r7,4(r4)
 1004208:	180b883a 	mov	r5,r3
 100420c:	1009883a 	mov	r4,r2
 1004210:	10066ec0 	call	10066ec <__muldf3>
 1004214:	94800044 	addi	r18,r18,1
 1004218:	01000044 	movi	r4,1
 100421c:	a029d07a 	srai	r20,r20,1
 1004220:	ad400204 	addi	r21,r21,8
 1004224:	003ff206 	br	10041f0 <__alt_data_end+0xff4926f0>
 1004228:	21003fcc 	andi	r4,r4,255
 100422c:	20000426 	beq	r4,zero,1004240 <_dtoa_r+0x644>
 1004230:	1023883a 	mov	r17,r2
 1004234:	1827883a 	mov	r19,r3
 1004238:	00000106 	br	1004240 <_dtoa_r+0x644>
 100423c:	04800084 	movi	r18,2
 1004240:	d9000f17 	ldw	r4,60(sp)
 1004244:	20001626 	beq	r4,zero,10042a0 <_dtoa_r+0x6a4>
 1004248:	000d883a 	mov	r6,zero
 100424c:	01cffc34 	movhi	r7,16368
 1004250:	8809883a 	mov	r4,r17
 1004254:	980b883a 	mov	r5,r19
 1004258:	10065f80 	call	10065f8 <__ledf2>
 100425c:	1000140e 	bge	r2,zero,10042b0 <_dtoa_r+0x6b4>
 1004260:	d8800417 	ldw	r2,16(sp)
 1004264:	10001626 	beq	r2,zero,10042c0 <_dtoa_r+0x6c4>
 1004268:	d8c00517 	ldw	r3,20(sp)
 100426c:	00c0c90e 	bge	zero,r3,1004594 <_dtoa_r+0x998>
 1004270:	8809883a 	mov	r4,r17
 1004274:	980b883a 	mov	r5,r19
 1004278:	000d883a 	mov	r6,zero
 100427c:	01d00934 	movhi	r7,16420
 1004280:	10066ec0 	call	10066ec <__muldf3>
 1004284:	d9000517 	ldw	r4,20(sp)
 1004288:	e57fffc4 	addi	r21,fp,-1
 100428c:	1023883a 	mov	r17,r2
 1004290:	1827883a 	mov	r19,r3
 1004294:	94800044 	addi	r18,r18,1
 1004298:	d9000c15 	stw	r4,48(sp)
 100429c:	00000a06 	br	10042c8 <_dtoa_r+0x6cc>
 10042a0:	d8800417 	ldw	r2,16(sp)
 10042a4:	e02b883a 	mov	r21,fp
 10042a8:	d8800c15 	stw	r2,48(sp)
 10042ac:	00000606 	br	10042c8 <_dtoa_r+0x6cc>
 10042b0:	d8c00417 	ldw	r3,16(sp)
 10042b4:	e02b883a 	mov	r21,fp
 10042b8:	d8c00c15 	stw	r3,48(sp)
 10042bc:	00000206 	br	10042c8 <_dtoa_r+0x6cc>
 10042c0:	e02b883a 	mov	r21,fp
 10042c4:	d8000c15 	stw	zero,48(sp)
 10042c8:	9009883a 	mov	r4,r18
 10042cc:	dc400e15 	stw	r17,56(sp)
 10042d0:	10078d40 	call	10078d4 <__floatsidf>
 10042d4:	880d883a 	mov	r6,r17
 10042d8:	980f883a 	mov	r7,r19
 10042dc:	1009883a 	mov	r4,r2
 10042e0:	180b883a 	mov	r5,r3
 10042e4:	10066ec0 	call	10066ec <__muldf3>
 10042e8:	1009883a 	mov	r4,r2
 10042ec:	000d883a 	mov	r6,zero
 10042f0:	01d00734 	movhi	r7,16412
 10042f4:	180b883a 	mov	r5,r3
 10042f8:	10052180 	call	1005218 <__adddf3>
 10042fc:	d9000c17 	ldw	r4,48(sp)
 1004300:	04bf3034 	movhi	r18,64704
 1004304:	9829883a 	mov	r20,r19
 1004308:	102d883a 	mov	r22,r2
 100430c:	1ca5883a 	add	r18,r3,r18
 1004310:	2000141e 	bne	r4,zero,1004364 <_dtoa_r+0x768>
 1004314:	8809883a 	mov	r4,r17
 1004318:	980b883a 	mov	r5,r19
 100431c:	000d883a 	mov	r6,zero
 1004320:	01d00534 	movhi	r7,16404
 1004324:	1006f580 	call	1006f58 <__subdf3>
 1004328:	b00d883a 	mov	r6,r22
 100432c:	900f883a 	mov	r7,r18
 1004330:	1009883a 	mov	r4,r2
 1004334:	180b883a 	mov	r5,r3
 1004338:	1027883a 	mov	r19,r2
 100433c:	1823883a 	mov	r17,r3
 1004340:	100651c0 	call	100651c <__gedf2>
 1004344:	0081dc16 	blt	zero,r2,1004ab8 <_dtoa_r+0xebc>
 1004348:	91e0003c 	xorhi	r7,r18,32768
 100434c:	b00d883a 	mov	r6,r22
 1004350:	9809883a 	mov	r4,r19
 1004354:	880b883a 	mov	r5,r17
 1004358:	10065f80 	call	10065f8 <__ledf2>
 100435c:	1001d016 	blt	r2,zero,1004aa0 <_dtoa_r+0xea4>
 1004360:	00008c06 	br	1004594 <_dtoa_r+0x998>
 1004364:	d9000c17 	ldw	r4,48(sp)
 1004368:	00804074 	movhi	r2,257
 100436c:	10a59f04 	addi	r2,r2,-27012
 1004370:	20ffffc4 	addi	r3,r4,-1
 1004374:	180690fa 	slli	r3,r3,3
 1004378:	d9000b17 	ldw	r4,44(sp)
 100437c:	10c5883a 	add	r2,r2,r3
 1004380:	20004526 	beq	r4,zero,1004498 <_dtoa_r+0x89c>
 1004384:	11800017 	ldw	r6,0(r2)
 1004388:	11c00117 	ldw	r7,4(r2)
 100438c:	0009883a 	mov	r4,zero
 1004390:	014ff834 	movhi	r5,16352
 1004394:	1005ac40 	call	1005ac4 <__divdf3>
 1004398:	900f883a 	mov	r7,r18
 100439c:	b00d883a 	mov	r6,r22
 10043a0:	1009883a 	mov	r4,r2
 10043a4:	180b883a 	mov	r5,r3
 10043a8:	1006f580 	call	1006f58 <__subdf3>
 10043ac:	da400717 	ldw	r9,28(sp)
 10043b0:	1025883a 	mov	r18,r2
 10043b4:	1823883a 	mov	r17,r3
 10043b8:	d9000e17 	ldw	r4,56(sp)
 10043bc:	a00b883a 	mov	r5,r20
 10043c0:	da401515 	stw	r9,84(sp)
 10043c4:	10078540 	call	1007854 <__fixdfsi>
 10043c8:	1009883a 	mov	r4,r2
 10043cc:	d8801415 	stw	r2,80(sp)
 10043d0:	10078d40 	call	10078d4 <__floatsidf>
 10043d4:	d9000e17 	ldw	r4,56(sp)
 10043d8:	a00b883a 	mov	r5,r20
 10043dc:	100d883a 	mov	r6,r2
 10043e0:	180f883a 	mov	r7,r3
 10043e4:	1006f580 	call	1006f58 <__subdf3>
 10043e8:	da001417 	ldw	r8,80(sp)
 10043ec:	da401517 	ldw	r9,84(sp)
 10043f0:	900d883a 	mov	r6,r18
 10043f4:	42000c04 	addi	r8,r8,48
 10043f8:	4a000005 	stb	r8,0(r9)
 10043fc:	880f883a 	mov	r7,r17
 1004400:	1009883a 	mov	r4,r2
 1004404:	180b883a 	mov	r5,r3
 1004408:	1029883a 	mov	r20,r2
 100440c:	1827883a 	mov	r19,r3
 1004410:	4d800044 	addi	r22,r9,1
 1004414:	10065f80 	call	10065f8 <__ledf2>
 1004418:	10028a16 	blt	r2,zero,1004e44 <_dtoa_r+0x1248>
 100441c:	a00d883a 	mov	r6,r20
 1004420:	980f883a 	mov	r7,r19
 1004424:	0009883a 	mov	r4,zero
 1004428:	014ffc34 	movhi	r5,16368
 100442c:	1006f580 	call	1006f58 <__subdf3>
 1004430:	900d883a 	mov	r6,r18
 1004434:	880f883a 	mov	r7,r17
 1004438:	1009883a 	mov	r4,r2
 100443c:	180b883a 	mov	r5,r3
 1004440:	10065f80 	call	10065f8 <__ledf2>
 1004444:	1000a716 	blt	r2,zero,10046e4 <_dtoa_r+0xae8>
 1004448:	d8c00717 	ldw	r3,28(sp)
 100444c:	d9000c17 	ldw	r4,48(sp)
 1004450:	b0c5c83a 	sub	r2,r22,r3
 1004454:	11004f0e 	bge	r2,r4,1004594 <_dtoa_r+0x998>
 1004458:	9009883a 	mov	r4,r18
 100445c:	880b883a 	mov	r5,r17
 1004460:	000d883a 	mov	r6,zero
 1004464:	01d00934 	movhi	r7,16420
 1004468:	10066ec0 	call	10066ec <__muldf3>
 100446c:	a009883a 	mov	r4,r20
 1004470:	000d883a 	mov	r6,zero
 1004474:	01d00934 	movhi	r7,16420
 1004478:	980b883a 	mov	r5,r19
 100447c:	1025883a 	mov	r18,r2
 1004480:	1823883a 	mov	r17,r3
 1004484:	10066ec0 	call	10066ec <__muldf3>
 1004488:	d8800e15 	stw	r2,56(sp)
 100448c:	1829883a 	mov	r20,r3
 1004490:	b013883a 	mov	r9,r22
 1004494:	003fc806 	br	10043b8 <__alt_data_end+0xff4928b8>
 1004498:	11000017 	ldw	r4,0(r2)
 100449c:	11400117 	ldw	r5,4(r2)
 10044a0:	b00d883a 	mov	r6,r22
 10044a4:	900f883a 	mov	r7,r18
 10044a8:	10066ec0 	call	10066ec <__muldf3>
 10044ac:	d8801115 	stw	r2,68(sp)
 10044b0:	dcc00717 	ldw	r19,28(sp)
 10044b4:	d8800c17 	ldw	r2,48(sp)
 10044b8:	d8c01215 	stw	r3,72(sp)
 10044bc:	98ad883a 	add	r22,r19,r2
 10044c0:	d9000e17 	ldw	r4,56(sp)
 10044c4:	a00b883a 	mov	r5,r20
 10044c8:	9cc00044 	addi	r19,r19,1
 10044cc:	10078540 	call	1007854 <__fixdfsi>
 10044d0:	1009883a 	mov	r4,r2
 10044d4:	d8801515 	stw	r2,84(sp)
 10044d8:	10078d40 	call	10078d4 <__floatsidf>
 10044dc:	d9000e17 	ldw	r4,56(sp)
 10044e0:	100d883a 	mov	r6,r2
 10044e4:	180f883a 	mov	r7,r3
 10044e8:	a00b883a 	mov	r5,r20
 10044ec:	1006f580 	call	1006f58 <__subdf3>
 10044f0:	da401517 	ldw	r9,84(sp)
 10044f4:	1025883a 	mov	r18,r2
 10044f8:	1823883a 	mov	r17,r3
 10044fc:	4a400c04 	addi	r9,r9,48
 1004500:	9a7fffc5 	stb	r9,-1(r19)
 1004504:	000d883a 	mov	r6,zero
 1004508:	b4c01b1e 	bne	r22,r19,1004578 <_dtoa_r+0x97c>
 100450c:	d9001117 	ldw	r4,68(sp)
 1004510:	d9401217 	ldw	r5,72(sp)
 1004514:	01cff834 	movhi	r7,16352
 1004518:	10052180 	call	1005218 <__adddf3>
 100451c:	100d883a 	mov	r6,r2
 1004520:	180f883a 	mov	r7,r3
 1004524:	9009883a 	mov	r4,r18
 1004528:	880b883a 	mov	r5,r17
 100452c:	100651c0 	call	100651c <__gedf2>
 1004530:	00806c16 	blt	zero,r2,10046e4 <_dtoa_r+0xae8>
 1004534:	d9801117 	ldw	r6,68(sp)
 1004538:	d9c01217 	ldw	r7,72(sp)
 100453c:	0009883a 	mov	r4,zero
 1004540:	014ff834 	movhi	r5,16352
 1004544:	1006f580 	call	1006f58 <__subdf3>
 1004548:	100d883a 	mov	r6,r2
 100454c:	180f883a 	mov	r7,r3
 1004550:	9009883a 	mov	r4,r18
 1004554:	880b883a 	mov	r5,r17
 1004558:	10065f80 	call	10065f8 <__ledf2>
 100455c:	10000d0e 	bge	r2,zero,1004594 <_dtoa_r+0x998>
 1004560:	00c00c04 	movi	r3,48
 1004564:	b0bfffc4 	addi	r2,r22,-1
 1004568:	11000007 	ldb	r4,0(r2)
 100456c:	20c2351e 	bne	r4,r3,1004e44 <_dtoa_r+0x1248>
 1004570:	102d883a 	mov	r22,r2
 1004574:	003ffb06 	br	1004564 <__alt_data_end+0xff492a64>
 1004578:	01d00934 	movhi	r7,16420
 100457c:	1009883a 	mov	r4,r2
 1004580:	180b883a 	mov	r5,r3
 1004584:	10066ec0 	call	10066ec <__muldf3>
 1004588:	d8800e15 	stw	r2,56(sp)
 100458c:	1829883a 	mov	r20,r3
 1004590:	003fcb06 	br	10044c0 <__alt_data_end+0xff4929c0>
 1004594:	dcc01317 	ldw	r19,76(sp)
 1004598:	d8800117 	ldw	r2,4(sp)
 100459c:	10007116 	blt	r2,zero,1004764 <_dtoa_r+0xb68>
 10045a0:	00c00384 	movi	r3,14
 10045a4:	1f006f16 	blt	r3,fp,1004764 <_dtoa_r+0xb68>
 10045a8:	e00490fa 	slli	r2,fp,3
 10045ac:	00c04074 	movhi	r3,257
 10045b0:	18e59f04 	addi	r3,r3,-27012
 10045b4:	1885883a 	add	r2,r3,r2
 10045b8:	d8c02017 	ldw	r3,128(sp)
 10045bc:	14400017 	ldw	r17,0(r2)
 10045c0:	14800117 	ldw	r18,4(r2)
 10045c4:	1800110e 	bge	r3,zero,100460c <_dtoa_r+0xa10>
 10045c8:	d9000417 	ldw	r4,16(sp)
 10045cc:	01000f16 	blt	zero,r4,100460c <_dtoa_r+0xa10>
 10045d0:	2001331e 	bne	r4,zero,1004aa0 <_dtoa_r+0xea4>
 10045d4:	8809883a 	mov	r4,r17
 10045d8:	900b883a 	mov	r5,r18
 10045dc:	000d883a 	mov	r6,zero
 10045e0:	01d00534 	movhi	r7,16404
 10045e4:	10066ec0 	call	10066ec <__muldf3>
 10045e8:	d9800917 	ldw	r6,36(sp)
 10045ec:	980f883a 	mov	r7,r19
 10045f0:	1009883a 	mov	r4,r2
 10045f4:	180b883a 	mov	r5,r3
 10045f8:	100651c0 	call	100651c <__gedf2>
 10045fc:	0025883a 	mov	r18,zero
 1004600:	0023883a 	mov	r17,zero
 1004604:	1001280e 	bge	r2,zero,1004aa8 <_dtoa_r+0xeac>
 1004608:	00012e06 	br	1004ac4 <_dtoa_r+0xec8>
 100460c:	d8c00417 	ldw	r3,16(sp)
 1004610:	dd400717 	ldw	r21,28(sp)
 1004614:	ddc00917 	ldw	r23,36(sp)
 1004618:	18bfffc4 	addi	r2,r3,-1
 100461c:	a885883a 	add	r2,r21,r2
 1004620:	d8800415 	stw	r2,16(sp)
 1004624:	880d883a 	mov	r6,r17
 1004628:	900f883a 	mov	r7,r18
 100462c:	b809883a 	mov	r4,r23
 1004630:	980b883a 	mov	r5,r19
 1004634:	1005ac40 	call	1005ac4 <__divdf3>
 1004638:	180b883a 	mov	r5,r3
 100463c:	1009883a 	mov	r4,r2
 1004640:	10078540 	call	1007854 <__fixdfsi>
 1004644:	1009883a 	mov	r4,r2
 1004648:	1029883a 	mov	r20,r2
 100464c:	10078d40 	call	10078d4 <__floatsidf>
 1004650:	880d883a 	mov	r6,r17
 1004654:	900f883a 	mov	r7,r18
 1004658:	1009883a 	mov	r4,r2
 100465c:	180b883a 	mov	r5,r3
 1004660:	10066ec0 	call	10066ec <__muldf3>
 1004664:	b809883a 	mov	r4,r23
 1004668:	100d883a 	mov	r6,r2
 100466c:	180f883a 	mov	r7,r3
 1004670:	980b883a 	mov	r5,r19
 1004674:	1006f580 	call	1006f58 <__subdf3>
 1004678:	a1000c04 	addi	r4,r20,48
 100467c:	a9000005 	stb	r4,0(r21)
 1004680:	d9000417 	ldw	r4,16(sp)
 1004684:	ad800044 	addi	r22,r21,1
 1004688:	a900271e 	bne	r21,r4,1004728 <_dtoa_r+0xb2c>
 100468c:	100d883a 	mov	r6,r2
 1004690:	180f883a 	mov	r7,r3
 1004694:	1009883a 	mov	r4,r2
 1004698:	180b883a 	mov	r5,r3
 100469c:	10052180 	call	1005218 <__adddf3>
 10046a0:	100d883a 	mov	r6,r2
 10046a4:	180f883a 	mov	r7,r3
 10046a8:	8809883a 	mov	r4,r17
 10046ac:	900b883a 	mov	r5,r18
 10046b0:	102b883a 	mov	r21,r2
 10046b4:	1827883a 	mov	r19,r3
 10046b8:	10065f80 	call	10065f8 <__ledf2>
 10046bc:	10000a16 	blt	r2,zero,10046e8 <_dtoa_r+0xaec>
 10046c0:	a80d883a 	mov	r6,r21
 10046c4:	980f883a 	mov	r7,r19
 10046c8:	8809883a 	mov	r4,r17
 10046cc:	900b883a 	mov	r5,r18
 10046d0:	10064940 	call	1006494 <__eqdf2>
 10046d4:	1001dc1e 	bne	r2,zero,1004e48 <_dtoa_r+0x124c>
 10046d8:	a500004c 	andi	r20,r20,1
 10046dc:	a000021e 	bne	r20,zero,10046e8 <_dtoa_r+0xaec>
 10046e0:	0001d906 	br	1004e48 <_dtoa_r+0x124c>
 10046e4:	a839883a 	mov	fp,r21
 10046e8:	00c00e44 	movi	r3,57
 10046ec:	b0bfffc4 	addi	r2,r22,-1
 10046f0:	11000007 	ldb	r4,0(r2)
 10046f4:	20c0081e 	bne	r4,r3,1004718 <_dtoa_r+0xb1c>
 10046f8:	d9000717 	ldw	r4,28(sp)
 10046fc:	2080041e 	bne	r4,r2,1004710 <_dtoa_r+0xb14>
 1004700:	00c00c04 	movi	r3,48
 1004704:	e7000044 	addi	fp,fp,1
 1004708:	20c00005 	stb	r3,0(r4)
 100470c:	00000206 	br	1004718 <_dtoa_r+0xb1c>
 1004710:	102d883a 	mov	r22,r2
 1004714:	003ff506 	br	10046ec <__alt_data_end+0xff492bec>
 1004718:	10c00003 	ldbu	r3,0(r2)
 100471c:	18c00044 	addi	r3,r3,1
 1004720:	10c00005 	stb	r3,0(r2)
 1004724:	0001c806 	br	1004e48 <_dtoa_r+0x124c>
 1004728:	000d883a 	mov	r6,zero
 100472c:	01d00934 	movhi	r7,16420
 1004730:	1009883a 	mov	r4,r2
 1004734:	180b883a 	mov	r5,r3
 1004738:	10066ec0 	call	10066ec <__muldf3>
 100473c:	000d883a 	mov	r6,zero
 1004740:	000f883a 	mov	r7,zero
 1004744:	1009883a 	mov	r4,r2
 1004748:	180b883a 	mov	r5,r3
 100474c:	102f883a 	mov	r23,r2
 1004750:	1827883a 	mov	r19,r3
 1004754:	b02b883a 	mov	r21,r22
 1004758:	10064940 	call	1006494 <__eqdf2>
 100475c:	103fb11e 	bne	r2,zero,1004624 <__alt_data_end+0xff492b24>
 1004760:	0001b906 	br	1004e48 <_dtoa_r+0x124c>
 1004764:	d8c00b17 	ldw	r3,44(sp)
 1004768:	18002b26 	beq	r3,zero,1004818 <_dtoa_r+0xc1c>
 100476c:	d9000817 	ldw	r4,32(sp)
 1004770:	00c00044 	movi	r3,1
 1004774:	19000a16 	blt	r3,r4,10047a0 <_dtoa_r+0xba4>
 1004778:	d8c01017 	ldw	r3,64(sp)
 100477c:	18000226 	beq	r3,zero,1004788 <_dtoa_r+0xb8c>
 1004780:	10810cc4 	addi	r2,r2,1075
 1004784:	00000306 	br	1004794 <_dtoa_r+0xb98>
 1004788:	d8c00217 	ldw	r3,8(sp)
 100478c:	00800d84 	movi	r2,54
 1004790:	10c5c83a 	sub	r2,r2,r3
 1004794:	dc800a17 	ldw	r18,40(sp)
 1004798:	dd000617 	ldw	r20,24(sp)
 100479c:	00001506 	br	10047f4 <_dtoa_r+0xbf8>
 10047a0:	d9000417 	ldw	r4,16(sp)
 10047a4:	d8800a17 	ldw	r2,40(sp)
 10047a8:	24bfffc4 	addi	r18,r4,-1
 10047ac:	14800216 	blt	r2,r18,10047b8 <_dtoa_r+0xbbc>
 10047b0:	14a5c83a 	sub	r18,r2,r18
 10047b4:	00000706 	br	10047d4 <_dtoa_r+0xbd8>
 10047b8:	d8c00a17 	ldw	r3,40(sp)
 10047bc:	d9000d17 	ldw	r4,52(sp)
 10047c0:	dc800a15 	stw	r18,40(sp)
 10047c4:	90cdc83a 	sub	r6,r18,r3
 10047c8:	2189883a 	add	r4,r4,r6
 10047cc:	d9000d15 	stw	r4,52(sp)
 10047d0:	0025883a 	mov	r18,zero
 10047d4:	d8800417 	ldw	r2,16(sp)
 10047d8:	1000040e 	bge	r2,zero,10047ec <_dtoa_r+0xbf0>
 10047dc:	d8c00617 	ldw	r3,24(sp)
 10047e0:	18a9c83a 	sub	r20,r3,r2
 10047e4:	0005883a 	mov	r2,zero
 10047e8:	00000206 	br	10047f4 <_dtoa_r+0xbf8>
 10047ec:	dd000617 	ldw	r20,24(sp)
 10047f0:	d8800417 	ldw	r2,16(sp)
 10047f4:	d9000617 	ldw	r4,24(sp)
 10047f8:	01400044 	movi	r5,1
 10047fc:	b8af883a 	add	r23,r23,r2
 1004800:	2089883a 	add	r4,r4,r2
 1004804:	d9000615 	stw	r4,24(sp)
 1004808:	8009883a 	mov	r4,r16
 100480c:	1002b400 	call	1002b40 <__i2b>
 1004810:	1023883a 	mov	r17,r2
 1004814:	00000306 	br	1004824 <_dtoa_r+0xc28>
 1004818:	dc800a17 	ldw	r18,40(sp)
 100481c:	dd000617 	ldw	r20,24(sp)
 1004820:	0023883a 	mov	r17,zero
 1004824:	a0000926 	beq	r20,zero,100484c <_dtoa_r+0xc50>
 1004828:	05c0080e 	bge	zero,r23,100484c <_dtoa_r+0xc50>
 100482c:	a005883a 	mov	r2,r20
 1004830:	bd00010e 	bge	r23,r20,1004838 <_dtoa_r+0xc3c>
 1004834:	b805883a 	mov	r2,r23
 1004838:	d8c00617 	ldw	r3,24(sp)
 100483c:	a0a9c83a 	sub	r20,r20,r2
 1004840:	b8afc83a 	sub	r23,r23,r2
 1004844:	1887c83a 	sub	r3,r3,r2
 1004848:	d8c00615 	stw	r3,24(sp)
 100484c:	d9000a17 	ldw	r4,40(sp)
 1004850:	01001a0e 	bge	zero,r4,10048bc <_dtoa_r+0xcc0>
 1004854:	d8800b17 	ldw	r2,44(sp)
 1004858:	10001326 	beq	r2,zero,10048a8 <_dtoa_r+0xcac>
 100485c:	90000e26 	beq	r18,zero,1004898 <_dtoa_r+0xc9c>
 1004860:	880b883a 	mov	r5,r17
 1004864:	900d883a 	mov	r6,r18
 1004868:	8009883a 	mov	r4,r16
 100486c:	1002df40 	call	1002df4 <__pow5mult>
 1004870:	d9800317 	ldw	r6,12(sp)
 1004874:	100b883a 	mov	r5,r2
 1004878:	8009883a 	mov	r4,r16
 100487c:	1023883a 	mov	r17,r2
 1004880:	1002b7c0 	call	1002b7c <__multiply>
 1004884:	d9400317 	ldw	r5,12(sp)
 1004888:	102b883a 	mov	r21,r2
 100488c:	8009883a 	mov	r4,r16
 1004890:	10027800 	call	1002780 <_Bfree>
 1004894:	dd400315 	stw	r21,12(sp)
 1004898:	d8c00a17 	ldw	r3,40(sp)
 100489c:	1c8dc83a 	sub	r6,r3,r18
 10048a0:	30000626 	beq	r6,zero,10048bc <_dtoa_r+0xcc0>
 10048a4:	00000106 	br	10048ac <_dtoa_r+0xcb0>
 10048a8:	d9800a17 	ldw	r6,40(sp)
 10048ac:	d9400317 	ldw	r5,12(sp)
 10048b0:	8009883a 	mov	r4,r16
 10048b4:	1002df40 	call	1002df4 <__pow5mult>
 10048b8:	d8800315 	stw	r2,12(sp)
 10048bc:	05400044 	movi	r21,1
 10048c0:	8009883a 	mov	r4,r16
 10048c4:	a80b883a 	mov	r5,r21
 10048c8:	1002b400 	call	1002b40 <__i2b>
 10048cc:	d9000d17 	ldw	r4,52(sp)
 10048d0:	1025883a 	mov	r18,r2
 10048d4:	20016c26 	beq	r4,zero,1004e88 <_dtoa_r+0x128c>
 10048d8:	200d883a 	mov	r6,r4
 10048dc:	100b883a 	mov	r5,r2
 10048e0:	8009883a 	mov	r4,r16
 10048e4:	1002df40 	call	1002df4 <__pow5mult>
 10048e8:	1025883a 	mov	r18,r2
 10048ec:	d8800817 	ldw	r2,32(sp)
 10048f0:	a8801216 	blt	r21,r2,100493c <_dtoa_r+0xd40>
 10048f4:	d8c00917 	ldw	r3,36(sp)
 10048f8:	18000c1e 	bne	r3,zero,100492c <_dtoa_r+0xd30>
 10048fc:	00800434 	movhi	r2,16
 1004900:	10bfffc4 	addi	r2,r2,-1
 1004904:	9884703a 	and	r2,r19,r2
 1004908:	1000081e 	bne	r2,zero,100492c <_dtoa_r+0xd30>
 100490c:	9cdffc2c 	andhi	r19,r19,32752
 1004910:	98000626 	beq	r19,zero,100492c <_dtoa_r+0xd30>
 1004914:	d9000617 	ldw	r4,24(sp)
 1004918:	bdc00044 	addi	r23,r23,1
 100491c:	04c00044 	movi	r19,1
 1004920:	21000044 	addi	r4,r4,1
 1004924:	d9000615 	stw	r4,24(sp)
 1004928:	00000106 	br	1004930 <_dtoa_r+0xd34>
 100492c:	0027883a 	mov	r19,zero
 1004930:	d8800d17 	ldw	r2,52(sp)
 1004934:	10000c26 	beq	r2,zero,1004968 <_dtoa_r+0xd6c>
 1004938:	00000106 	br	1004940 <_dtoa_r+0xd44>
 100493c:	0027883a 	mov	r19,zero
 1004940:	90800417 	ldw	r2,16(r18)
 1004944:	05400804 	movi	r21,32
 1004948:	10800104 	addi	r2,r2,4
 100494c:	1085883a 	add	r2,r2,r2
 1004950:	1085883a 	add	r2,r2,r2
 1004954:	9085883a 	add	r2,r18,r2
 1004958:	11000017 	ldw	r4,0(r2)
 100495c:	1002a280 	call	1002a28 <__hi0bits>
 1004960:	a885c83a 	sub	r2,r21,r2
 1004964:	00000106 	br	100496c <_dtoa_r+0xd70>
 1004968:	00800044 	movi	r2,1
 100496c:	15eb883a 	add	r21,r2,r23
 1004970:	a88007cc 	andi	r2,r21,31
 1004974:	10000c26 	beq	r2,zero,10049a8 <_dtoa_r+0xdac>
 1004978:	00c00804 	movi	r3,32
 100497c:	1887c83a 	sub	r3,r3,r2
 1004980:	01000104 	movi	r4,4
 1004984:	20c0060e 	bge	r4,r3,10049a0 <_dtoa_r+0xda4>
 1004988:	00c00704 	movi	r3,28
 100498c:	1885c83a 	sub	r2,r3,r2
 1004990:	d8c00617 	ldw	r3,24(sp)
 1004994:	1887883a 	add	r3,r3,r2
 1004998:	d8c00615 	stw	r3,24(sp)
 100499c:	00000606 	br	10049b8 <_dtoa_r+0xdbc>
 10049a0:	19000726 	beq	r3,r4,10049c0 <_dtoa_r+0xdc4>
 10049a4:	1805883a 	mov	r2,r3
 10049a8:	d9000617 	ldw	r4,24(sp)
 10049ac:	10800704 	addi	r2,r2,28
 10049b0:	2089883a 	add	r4,r4,r2
 10049b4:	d9000615 	stw	r4,24(sp)
 10049b8:	a0a9883a 	add	r20,r20,r2
 10049bc:	b8af883a 	add	r23,r23,r2
 10049c0:	d8800617 	ldw	r2,24(sp)
 10049c4:	0080050e 	bge	zero,r2,10049dc <_dtoa_r+0xde0>
 10049c8:	d9400317 	ldw	r5,12(sp)
 10049cc:	100d883a 	mov	r6,r2
 10049d0:	8009883a 	mov	r4,r16
 10049d4:	1002f280 	call	1002f28 <__lshift>
 10049d8:	d8800315 	stw	r2,12(sp)
 10049dc:	05c0050e 	bge	zero,r23,10049f4 <_dtoa_r+0xdf8>
 10049e0:	900b883a 	mov	r5,r18
 10049e4:	b80d883a 	mov	r6,r23
 10049e8:	8009883a 	mov	r4,r16
 10049ec:	1002f280 	call	1002f28 <__lshift>
 10049f0:	1025883a 	mov	r18,r2
 10049f4:	d8c00f17 	ldw	r3,60(sp)
 10049f8:	18001626 	beq	r3,zero,1004a54 <_dtoa_r+0xe58>
 10049fc:	d9000317 	ldw	r4,12(sp)
 1004a00:	900b883a 	mov	r5,r18
 1004a04:	10030700 	call	1003070 <__mcmp>
 1004a08:	1000120e 	bge	r2,zero,1004a54 <_dtoa_r+0xe58>
 1004a0c:	d9400317 	ldw	r5,12(sp)
 1004a10:	8009883a 	mov	r4,r16
 1004a14:	000f883a 	mov	r7,zero
 1004a18:	01800284 	movi	r6,10
 1004a1c:	10027f80 	call	10027f8 <__multadd>
 1004a20:	d9000b17 	ldw	r4,44(sp)
 1004a24:	d8800315 	stw	r2,12(sp)
 1004a28:	e73fffc4 	addi	fp,fp,-1
 1004a2c:	20011b26 	beq	r4,zero,1004e9c <_dtoa_r+0x12a0>
 1004a30:	880b883a 	mov	r5,r17
 1004a34:	000f883a 	mov	r7,zero
 1004a38:	01800284 	movi	r6,10
 1004a3c:	8009883a 	mov	r4,r16
 1004a40:	10027f80 	call	10027f8 <__multadd>
 1004a44:	1023883a 	mov	r17,r2
 1004a48:	d8800517 	ldw	r2,20(sp)
 1004a4c:	00802d16 	blt	zero,r2,1004b04 <_dtoa_r+0xf08>
 1004a50:	00011806 	br	1004eb4 <_dtoa_r+0x12b8>
 1004a54:	d8c00417 	ldw	r3,16(sp)
 1004a58:	00c02216 	blt	zero,r3,1004ae4 <_dtoa_r+0xee8>
 1004a5c:	d9000817 	ldw	r4,32(sp)
 1004a60:	00800084 	movi	r2,2
 1004a64:	11001f0e 	bge	r2,r4,1004ae4 <_dtoa_r+0xee8>
 1004a68:	d8c00515 	stw	r3,20(sp)
 1004a6c:	d8800517 	ldw	r2,20(sp)
 1004a70:	10000d1e 	bne	r2,zero,1004aa8 <_dtoa_r+0xeac>
 1004a74:	900b883a 	mov	r5,r18
 1004a78:	8009883a 	mov	r4,r16
 1004a7c:	000f883a 	mov	r7,zero
 1004a80:	01800144 	movi	r6,5
 1004a84:	10027f80 	call	10027f8 <__multadd>
 1004a88:	d9000317 	ldw	r4,12(sp)
 1004a8c:	100b883a 	mov	r5,r2
 1004a90:	1025883a 	mov	r18,r2
 1004a94:	10030700 	call	1003070 <__mcmp>
 1004a98:	00800a16 	blt	zero,r2,1004ac4 <_dtoa_r+0xec8>
 1004a9c:	00000206 	br	1004aa8 <_dtoa_r+0xeac>
 1004aa0:	0025883a 	mov	r18,zero
 1004aa4:	0023883a 	mov	r17,zero
 1004aa8:	d8c02017 	ldw	r3,128(sp)
 1004aac:	dd800717 	ldw	r22,28(sp)
 1004ab0:	00f8303a 	nor	fp,zero,r3
 1004ab4:	00000806 	br	1004ad8 <_dtoa_r+0xedc>
 1004ab8:	a839883a 	mov	fp,r21
 1004abc:	0025883a 	mov	r18,zero
 1004ac0:	0023883a 	mov	r17,zero
 1004ac4:	d9000717 	ldw	r4,28(sp)
 1004ac8:	00800c44 	movi	r2,49
 1004acc:	e7000044 	addi	fp,fp,1
 1004ad0:	25800044 	addi	r22,r4,1
 1004ad4:	20800005 	stb	r2,0(r4)
 1004ad8:	8827883a 	mov	r19,r17
 1004adc:	0023883a 	mov	r17,zero
 1004ae0:	0000cb06 	br	1004e10 <_dtoa_r+0x1214>
 1004ae4:	d8800b17 	ldw	r2,44(sp)
 1004ae8:	1000041e 	bne	r2,zero,1004afc <_dtoa_r+0xf00>
 1004aec:	d8c00417 	ldw	r3,16(sp)
 1004af0:	d8c00515 	stw	r3,20(sp)
 1004af4:	dcc00717 	ldw	r19,28(sp)
 1004af8:	00009006 	br	1004d3c <_dtoa_r+0x1140>
 1004afc:	d9000417 	ldw	r4,16(sp)
 1004b00:	d9000515 	stw	r4,20(sp)
 1004b04:	0500050e 	bge	zero,r20,1004b1c <_dtoa_r+0xf20>
 1004b08:	880b883a 	mov	r5,r17
 1004b0c:	a00d883a 	mov	r6,r20
 1004b10:	8009883a 	mov	r4,r16
 1004b14:	1002f280 	call	1002f28 <__lshift>
 1004b18:	1023883a 	mov	r17,r2
 1004b1c:	98001126 	beq	r19,zero,1004b64 <_dtoa_r+0xf68>
 1004b20:	89400117 	ldw	r5,4(r17)
 1004b24:	8009883a 	mov	r4,r16
 1004b28:	100269c0 	call	100269c <_Balloc>
 1004b2c:	89800417 	ldw	r6,16(r17)
 1004b30:	89400304 	addi	r5,r17,12
 1004b34:	11000304 	addi	r4,r2,12
 1004b38:	31800084 	addi	r6,r6,2
 1004b3c:	318d883a 	add	r6,r6,r6
 1004b40:	318d883a 	add	r6,r6,r6
 1004b44:	1027883a 	mov	r19,r2
 1004b48:	1004f1c0 	call	1004f1c <memcpy>
 1004b4c:	980b883a 	mov	r5,r19
 1004b50:	01800044 	movi	r6,1
 1004b54:	8009883a 	mov	r4,r16
 1004b58:	1002f280 	call	1002f28 <__lshift>
 1004b5c:	1027883a 	mov	r19,r2
 1004b60:	00000106 	br	1004b68 <_dtoa_r+0xf6c>
 1004b64:	8827883a 	mov	r19,r17
 1004b68:	d8800517 	ldw	r2,20(sp)
 1004b6c:	ddc00717 	ldw	r23,28(sp)
 1004b70:	d8c00917 	ldw	r3,36(sp)
 1004b74:	157fffc4 	addi	r21,r2,-1
 1004b78:	bd6b883a 	add	r21,r23,r21
 1004b7c:	18c0004c 	andi	r3,r3,1
 1004b80:	dd400615 	stw	r21,24(sp)
 1004b84:	d8c00515 	stw	r3,20(sp)
 1004b88:	d9000317 	ldw	r4,12(sp)
 1004b8c:	900b883a 	mov	r5,r18
 1004b90:	10039dc0 	call	10039dc <quorem>
 1004b94:	d9000317 	ldw	r4,12(sp)
 1004b98:	880b883a 	mov	r5,r17
 1004b9c:	102d883a 	mov	r22,r2
 1004ba0:	15400c04 	addi	r21,r2,48
 1004ba4:	10030700 	call	1003070 <__mcmp>
 1004ba8:	980d883a 	mov	r6,r19
 1004bac:	900b883a 	mov	r5,r18
 1004bb0:	8009883a 	mov	r4,r16
 1004bb4:	d8800415 	stw	r2,16(sp)
 1004bb8:	10030cc0 	call	10030cc <__mdiff>
 1004bbc:	1029883a 	mov	r20,r2
 1004bc0:	10800317 	ldw	r2,12(r2)
 1004bc4:	1000041e 	bne	r2,zero,1004bd8 <_dtoa_r+0xfdc>
 1004bc8:	d9000317 	ldw	r4,12(sp)
 1004bcc:	a00b883a 	mov	r5,r20
 1004bd0:	10030700 	call	1003070 <__mcmp>
 1004bd4:	00000106 	br	1004bdc <_dtoa_r+0xfe0>
 1004bd8:	00800044 	movi	r2,1
 1004bdc:	a00b883a 	mov	r5,r20
 1004be0:	8009883a 	mov	r4,r16
 1004be4:	d8801415 	stw	r2,80(sp)
 1004be8:	10027800 	call	1002780 <_Bfree>
 1004bec:	d8801417 	ldw	r2,80(sp)
 1004bf0:	bd000044 	addi	r20,r23,1
 1004bf4:	1000091e 	bne	r2,zero,1004c1c <_dtoa_r+0x1020>
 1004bf8:	d9000817 	ldw	r4,32(sp)
 1004bfc:	2000071e 	bne	r4,zero,1004c1c <_dtoa_r+0x1020>
 1004c00:	d8c00517 	ldw	r3,20(sp)
 1004c04:	1800051e 	bne	r3,zero,1004c1c <_dtoa_r+0x1020>
 1004c08:	00800e44 	movi	r2,57
 1004c0c:	a8802026 	beq	r21,r2,1004c90 <_dtoa_r+0x1094>
 1004c10:	d8c00417 	ldw	r3,16(sp)
 1004c14:	00c01716 	blt	zero,r3,1004c74 <_dtoa_r+0x1078>
 1004c18:	00001706 	br	1004c78 <_dtoa_r+0x107c>
 1004c1c:	d8c00417 	ldw	r3,16(sp)
 1004c20:	18000516 	blt	r3,zero,1004c38 <_dtoa_r+0x103c>
 1004c24:	1800171e 	bne	r3,zero,1004c84 <_dtoa_r+0x1088>
 1004c28:	d9000817 	ldw	r4,32(sp)
 1004c2c:	2000151e 	bne	r4,zero,1004c84 <_dtoa_r+0x1088>
 1004c30:	d8c00517 	ldw	r3,20(sp)
 1004c34:	1800131e 	bne	r3,zero,1004c84 <_dtoa_r+0x1088>
 1004c38:	00800f0e 	bge	zero,r2,1004c78 <_dtoa_r+0x107c>
 1004c3c:	d9400317 	ldw	r5,12(sp)
 1004c40:	8009883a 	mov	r4,r16
 1004c44:	01800044 	movi	r6,1
 1004c48:	1002f280 	call	1002f28 <__lshift>
 1004c4c:	900b883a 	mov	r5,r18
 1004c50:	1009883a 	mov	r4,r2
 1004c54:	d8800315 	stw	r2,12(sp)
 1004c58:	10030700 	call	1003070 <__mcmp>
 1004c5c:	00800316 	blt	zero,r2,1004c6c <_dtoa_r+0x1070>
 1004c60:	1000051e 	bne	r2,zero,1004c78 <_dtoa_r+0x107c>
 1004c64:	a880004c 	andi	r2,r21,1
 1004c68:	10000326 	beq	r2,zero,1004c78 <_dtoa_r+0x107c>
 1004c6c:	00800e44 	movi	r2,57
 1004c70:	a8800726 	beq	r21,r2,1004c90 <_dtoa_r+0x1094>
 1004c74:	b5400c44 	addi	r21,r22,49
 1004c78:	a02d883a 	mov	r22,r20
 1004c7c:	bd400005 	stb	r21,0(r23)
 1004c80:	00006306 	br	1004e10 <_dtoa_r+0x1214>
 1004c84:	00800a0e 	bge	zero,r2,1004cb0 <_dtoa_r+0x10b4>
 1004c88:	00800e44 	movi	r2,57
 1004c8c:	a880041e 	bne	r21,r2,1004ca0 <_dtoa_r+0x10a4>
 1004c90:	00800e44 	movi	r2,57
 1004c94:	a02d883a 	mov	r22,r20
 1004c98:	b8800005 	stb	r2,0(r23)
 1004c9c:	00004406 	br	1004db0 <_dtoa_r+0x11b4>
 1004ca0:	a8c00044 	addi	r3,r21,1
 1004ca4:	a02d883a 	mov	r22,r20
 1004ca8:	b8c00005 	stb	r3,0(r23)
 1004cac:	00005806 	br	1004e10 <_dtoa_r+0x1214>
 1004cb0:	d8c00617 	ldw	r3,24(sp)
 1004cb4:	bd400005 	stb	r21,0(r23)
 1004cb8:	a02d883a 	mov	r22,r20
 1004cbc:	b8c03026 	beq	r23,r3,1004d80 <_dtoa_r+0x1184>
 1004cc0:	d9400317 	ldw	r5,12(sp)
 1004cc4:	000f883a 	mov	r7,zero
 1004cc8:	01800284 	movi	r6,10
 1004ccc:	8009883a 	mov	r4,r16
 1004cd0:	10027f80 	call	10027f8 <__multadd>
 1004cd4:	d8800315 	stw	r2,12(sp)
 1004cd8:	000f883a 	mov	r7,zero
 1004cdc:	01800284 	movi	r6,10
 1004ce0:	880b883a 	mov	r5,r17
 1004ce4:	8009883a 	mov	r4,r16
 1004ce8:	8cc0041e 	bne	r17,r19,1004cfc <_dtoa_r+0x1100>
 1004cec:	10027f80 	call	10027f8 <__multadd>
 1004cf0:	1023883a 	mov	r17,r2
 1004cf4:	1027883a 	mov	r19,r2
 1004cf8:	00000806 	br	1004d1c <_dtoa_r+0x1120>
 1004cfc:	10027f80 	call	10027f8 <__multadd>
 1004d00:	980b883a 	mov	r5,r19
 1004d04:	000f883a 	mov	r7,zero
 1004d08:	01800284 	movi	r6,10
 1004d0c:	8009883a 	mov	r4,r16
 1004d10:	1023883a 	mov	r17,r2
 1004d14:	10027f80 	call	10027f8 <__multadd>
 1004d18:	1027883a 	mov	r19,r2
 1004d1c:	a02f883a 	mov	r23,r20
 1004d20:	003f9906 	br	1004b88 <__alt_data_end+0xff493088>
 1004d24:	d9400317 	ldw	r5,12(sp)
 1004d28:	000f883a 	mov	r7,zero
 1004d2c:	01800284 	movi	r6,10
 1004d30:	8009883a 	mov	r4,r16
 1004d34:	10027f80 	call	10027f8 <__multadd>
 1004d38:	d8800315 	stw	r2,12(sp)
 1004d3c:	d9000317 	ldw	r4,12(sp)
 1004d40:	900b883a 	mov	r5,r18
 1004d44:	9cc00044 	addi	r19,r19,1
 1004d48:	10039dc0 	call	10039dc <quorem>
 1004d4c:	d9000717 	ldw	r4,28(sp)
 1004d50:	15400c04 	addi	r21,r2,48
 1004d54:	d8c00517 	ldw	r3,20(sp)
 1004d58:	9d7fffc5 	stb	r21,-1(r19)
 1004d5c:	9905c83a 	sub	r2,r19,r4
 1004d60:	10fff016 	blt	r2,r3,1004d24 <__alt_data_end+0xff493224>
 1004d64:	182d883a 	mov	r22,r3
 1004d68:	00c00116 	blt	zero,r3,1004d70 <_dtoa_r+0x1174>
 1004d6c:	05800044 	movi	r22,1
 1004d70:	d9000717 	ldw	r4,28(sp)
 1004d74:	8827883a 	mov	r19,r17
 1004d78:	0023883a 	mov	r17,zero
 1004d7c:	25ad883a 	add	r22,r4,r22
 1004d80:	d9400317 	ldw	r5,12(sp)
 1004d84:	8009883a 	mov	r4,r16
 1004d88:	01800044 	movi	r6,1
 1004d8c:	1002f280 	call	1002f28 <__lshift>
 1004d90:	900b883a 	mov	r5,r18
 1004d94:	1009883a 	mov	r4,r2
 1004d98:	d8800315 	stw	r2,12(sp)
 1004d9c:	10030700 	call	1003070 <__mcmp>
 1004da0:	00800316 	blt	zero,r2,1004db0 <_dtoa_r+0x11b4>
 1004da4:	1000141e 	bne	r2,zero,1004df8 <_dtoa_r+0x11fc>
 1004da8:	a8c0004c 	andi	r3,r21,1
 1004dac:	18001226 	beq	r3,zero,1004df8 <_dtoa_r+0x11fc>
 1004db0:	01000e44 	movi	r4,57
 1004db4:	b0bfffc4 	addi	r2,r22,-1
 1004db8:	10c00003 	ldbu	r3,0(r2)
 1004dbc:	19403fcc 	andi	r5,r3,255
 1004dc0:	2940201c 	xori	r5,r5,128
 1004dc4:	297fe004 	addi	r5,r5,-128
 1004dc8:	2900081e 	bne	r5,r4,1004dec <_dtoa_r+0x11f0>
 1004dcc:	d8c00717 	ldw	r3,28(sp)
 1004dd0:	1880041e 	bne	r3,r2,1004de4 <_dtoa_r+0x11e8>
 1004dd4:	00800c44 	movi	r2,49
 1004dd8:	e7000044 	addi	fp,fp,1
 1004ddc:	18800005 	stb	r2,0(r3)
 1004de0:	00000b06 	br	1004e10 <_dtoa_r+0x1214>
 1004de4:	102d883a 	mov	r22,r2
 1004de8:	003ff206 	br	1004db4 <__alt_data_end+0xff4932b4>
 1004dec:	18c00044 	addi	r3,r3,1
 1004df0:	10c00005 	stb	r3,0(r2)
 1004df4:	00000606 	br	1004e10 <_dtoa_r+0x1214>
 1004df8:	00c00c04 	movi	r3,48
 1004dfc:	b0bfffc4 	addi	r2,r22,-1
 1004e00:	11000007 	ldb	r4,0(r2)
 1004e04:	20c0021e 	bne	r4,r3,1004e10 <_dtoa_r+0x1214>
 1004e08:	102d883a 	mov	r22,r2
 1004e0c:	003ffb06 	br	1004dfc <__alt_data_end+0xff4932fc>
 1004e10:	900b883a 	mov	r5,r18
 1004e14:	8009883a 	mov	r4,r16
 1004e18:	10027800 	call	1002780 <_Bfree>
 1004e1c:	98000a26 	beq	r19,zero,1004e48 <_dtoa_r+0x124c>
 1004e20:	88000426 	beq	r17,zero,1004e34 <_dtoa_r+0x1238>
 1004e24:	8cc00326 	beq	r17,r19,1004e34 <_dtoa_r+0x1238>
 1004e28:	880b883a 	mov	r5,r17
 1004e2c:	8009883a 	mov	r4,r16
 1004e30:	10027800 	call	1002780 <_Bfree>
 1004e34:	980b883a 	mov	r5,r19
 1004e38:	8009883a 	mov	r4,r16
 1004e3c:	10027800 	call	1002780 <_Bfree>
 1004e40:	00000106 	br	1004e48 <_dtoa_r+0x124c>
 1004e44:	a839883a 	mov	fp,r21
 1004e48:	d9400317 	ldw	r5,12(sp)
 1004e4c:	8009883a 	mov	r4,r16
 1004e50:	10027800 	call	1002780 <_Bfree>
 1004e54:	d9002117 	ldw	r4,132(sp)
 1004e58:	e0800044 	addi	r2,fp,1
 1004e5c:	b0000005 	stb	zero,0(r22)
 1004e60:	20800015 	stw	r2,0(r4)
 1004e64:	d8802317 	ldw	r2,140(sp)
 1004e68:	10000526 	beq	r2,zero,1004e80 <_dtoa_r+0x1284>
 1004e6c:	15800015 	stw	r22,0(r2)
 1004e70:	00000306 	br	1004e80 <_dtoa_r+0x1284>
 1004e74:	00804074 	movhi	r2,257
 1004e78:	10a5d504 	addi	r2,r2,-26796
 1004e7c:	00001106 	br	1004ec4 <_dtoa_r+0x12c8>
 1004e80:	d8800717 	ldw	r2,28(sp)
 1004e84:	00000f06 	br	1004ec4 <_dtoa_r+0x12c8>
 1004e88:	d8c00817 	ldw	r3,32(sp)
 1004e8c:	a8fe990e 	bge	r21,r3,10048f4 <__alt_data_end+0xff492df4>
 1004e90:	0027883a 	mov	r19,zero
 1004e94:	a805883a 	mov	r2,r21
 1004e98:	003eb406 	br	100496c <__alt_data_end+0xff492e6c>
 1004e9c:	d9000517 	ldw	r4,20(sp)
 1004ea0:	013f1416 	blt	zero,r4,1004af4 <__alt_data_end+0xff492ff4>
 1004ea4:	d8c00817 	ldw	r3,32(sp)
 1004ea8:	00800084 	movi	r2,2
 1004eac:	10ff110e 	bge	r2,r3,1004af4 <__alt_data_end+0xff492ff4>
 1004eb0:	003eee06 	br	1004a6c <__alt_data_end+0xff492f6c>
 1004eb4:	d9000817 	ldw	r4,32(sp)
 1004eb8:	00800084 	movi	r2,2
 1004ebc:	113f110e 	bge	r2,r4,1004b04 <__alt_data_end+0xff493004>
 1004ec0:	003eea06 	br	1004a6c <__alt_data_end+0xff492f6c>
 1004ec4:	dfc01f17 	ldw	ra,124(sp)
 1004ec8:	df001e17 	ldw	fp,120(sp)
 1004ecc:	ddc01d17 	ldw	r23,116(sp)
 1004ed0:	dd801c17 	ldw	r22,112(sp)
 1004ed4:	dd401b17 	ldw	r21,108(sp)
 1004ed8:	dd001a17 	ldw	r20,104(sp)
 1004edc:	dcc01917 	ldw	r19,100(sp)
 1004ee0:	dc801817 	ldw	r18,96(sp)
 1004ee4:	dc401717 	ldw	r17,92(sp)
 1004ee8:	dc001617 	ldw	r16,88(sp)
 1004eec:	dec02004 	addi	sp,sp,128
 1004ef0:	f800283a 	ret

01004ef4 <malloc>:
 1004ef4:	00804074 	movhi	r2,257
 1004ef8:	10a68f04 	addi	r2,r2,-26052
 1004efc:	200b883a 	mov	r5,r4
 1004f00:	11000017 	ldw	r4,0(r2)
 1004f04:	100370c1 	jmpi	100370c <_malloc_r>

01004f08 <free>:
 1004f08:	00804074 	movhi	r2,257
 1004f0c:	10a68f04 	addi	r2,r2,-26052
 1004f10:	200b883a 	mov	r5,r4
 1004f14:	11000017 	ldw	r4,0(r2)
 1004f18:	1004f641 	jmpi	1004f64 <_free_r>

01004f1c <memcpy>:
 1004f1c:	2005883a 	mov	r2,r4
 1004f20:	2007883a 	mov	r3,r4
 1004f24:	218d883a 	add	r6,r4,r6
 1004f28:	19800526 	beq	r3,r6,1004f40 <memcpy+0x24>
 1004f2c:	29000003 	ldbu	r4,0(r5)
 1004f30:	18c00044 	addi	r3,r3,1
 1004f34:	29400044 	addi	r5,r5,1
 1004f38:	193fffc5 	stb	r4,-1(r3)
 1004f3c:	003ffa06 	br	1004f28 <__alt_data_end+0xff493428>
 1004f40:	f800283a 	ret

01004f44 <memset>:
 1004f44:	2005883a 	mov	r2,r4
 1004f48:	2007883a 	mov	r3,r4
 1004f4c:	218d883a 	add	r6,r4,r6
 1004f50:	19800326 	beq	r3,r6,1004f60 <memset+0x1c>
 1004f54:	19400005 	stb	r5,0(r3)
 1004f58:	18c00044 	addi	r3,r3,1
 1004f5c:	003ffc06 	br	1004f50 <__alt_data_end+0xff493450>
 1004f60:	f800283a 	ret

01004f64 <_free_r>:
 1004f64:	28003726 	beq	r5,zero,1005044 <_free_r+0xe0>
 1004f68:	28ffff17 	ldw	r3,-4(r5)
 1004f6c:	28bfff04 	addi	r2,r5,-4
 1004f70:	1800010e 	bge	r3,zero,1004f78 <_free_r+0x14>
 1004f74:	10c5883a 	add	r2,r2,r3
 1004f78:	01404074 	movhi	r5,257
 1004f7c:	29675404 	addi	r5,r5,-25264
 1004f80:	28c00017 	ldw	r3,0(r5)
 1004f84:	280d883a 	mov	r6,r5
 1004f88:	1800031e 	bne	r3,zero,1004f98 <_free_r+0x34>
 1004f8c:	10000115 	stw	zero,4(r2)
 1004f90:	28800015 	stw	r2,0(r5)
 1004f94:	f800283a 	ret
 1004f98:	10c00c2e 	bgeu	r2,r3,1004fcc <_free_r+0x68>
 1004f9c:	11000017 	ldw	r4,0(r2)
 1004fa0:	110b883a 	add	r5,r2,r4
 1004fa4:	1940041e 	bne	r3,r5,1004fb8 <_free_r+0x54>
 1004fa8:	19400017 	ldw	r5,0(r3)
 1004fac:	18c00117 	ldw	r3,4(r3)
 1004fb0:	2909883a 	add	r4,r5,r4
 1004fb4:	11000015 	stw	r4,0(r2)
 1004fb8:	10c00115 	stw	r3,4(r2)
 1004fbc:	30800015 	stw	r2,0(r6)
 1004fc0:	f800283a 	ret
 1004fc4:	11400336 	bltu	r2,r5,1004fd4 <_free_r+0x70>
 1004fc8:	2807883a 	mov	r3,r5
 1004fcc:	19400117 	ldw	r5,4(r3)
 1004fd0:	283ffc1e 	bne	r5,zero,1004fc4 <__alt_data_end+0xff4934c4>
 1004fd4:	19c00017 	ldw	r7,0(r3)
 1004fd8:	19cd883a 	add	r6,r3,r7
 1004fdc:	30800a1e 	bne	r6,r2,1005008 <_free_r+0xa4>
 1004fe0:	10800017 	ldw	r2,0(r2)
 1004fe4:	3885883a 	add	r2,r7,r2
 1004fe8:	18800015 	stw	r2,0(r3)
 1004fec:	1889883a 	add	r4,r3,r2
 1004ff0:	2900141e 	bne	r5,r4,1005044 <_free_r+0xe0>
 1004ff4:	29000017 	ldw	r4,0(r5)
 1004ff8:	2085883a 	add	r2,r4,r2
 1004ffc:	18800015 	stw	r2,0(r3)
 1005000:	28800117 	ldw	r2,4(r5)
 1005004:	00000e06 	br	1005040 <_free_r+0xdc>
 1005008:	1180032e 	bgeu	r2,r6,1005018 <_free_r+0xb4>
 100500c:	00800304 	movi	r2,12
 1005010:	20800015 	stw	r2,0(r4)
 1005014:	f800283a 	ret
 1005018:	11000017 	ldw	r4,0(r2)
 100501c:	110d883a 	add	r6,r2,r4
 1005020:	2980061e 	bne	r5,r6,100503c <_free_r+0xd8>
 1005024:	29800017 	ldw	r6,0(r5)
 1005028:	3109883a 	add	r4,r6,r4
 100502c:	11000015 	stw	r4,0(r2)
 1005030:	29000117 	ldw	r4,4(r5)
 1005034:	11000115 	stw	r4,4(r2)
 1005038:	00000106 	br	1005040 <_free_r+0xdc>
 100503c:	11400115 	stw	r5,4(r2)
 1005040:	18800115 	stw	r2,4(r3)
 1005044:	f800283a 	ret

01005048 <_malloc_usable_size_r>:
 1005048:	28bfff17 	ldw	r2,-4(r5)
 100504c:	1000030e 	bge	r2,zero,100505c <_malloc_usable_size_r+0x14>
 1005050:	288b883a 	add	r5,r5,r2
 1005054:	28ffff17 	ldw	r3,-4(r5)
 1005058:	10c5883a 	add	r2,r2,r3
 100505c:	10bfff04 	addi	r2,r2,-4
 1005060:	f800283a 	ret

01005064 <__divsi3>:
 1005064:	20001b16 	blt	r4,zero,10050d4 <__divsi3+0x70>
 1005068:	000f883a 	mov	r7,zero
 100506c:	28001616 	blt	r5,zero,10050c8 <__divsi3+0x64>
 1005070:	200d883a 	mov	r6,r4
 1005074:	29001a2e 	bgeu	r5,r4,10050e0 <__divsi3+0x7c>
 1005078:	00800804 	movi	r2,32
 100507c:	00c00044 	movi	r3,1
 1005080:	00000106 	br	1005088 <__divsi3+0x24>
 1005084:	10000d26 	beq	r2,zero,10050bc <__divsi3+0x58>
 1005088:	294b883a 	add	r5,r5,r5
 100508c:	10bfffc4 	addi	r2,r2,-1
 1005090:	18c7883a 	add	r3,r3,r3
 1005094:	293ffb36 	bltu	r5,r4,1005084 <__alt_data_end+0xff493584>
 1005098:	0005883a 	mov	r2,zero
 100509c:	18000726 	beq	r3,zero,10050bc <__divsi3+0x58>
 10050a0:	0005883a 	mov	r2,zero
 10050a4:	31400236 	bltu	r6,r5,10050b0 <__divsi3+0x4c>
 10050a8:	314dc83a 	sub	r6,r6,r5
 10050ac:	10c4b03a 	or	r2,r2,r3
 10050b0:	1806d07a 	srli	r3,r3,1
 10050b4:	280ad07a 	srli	r5,r5,1
 10050b8:	183ffa1e 	bne	r3,zero,10050a4 <__alt_data_end+0xff4935a4>
 10050bc:	38000126 	beq	r7,zero,10050c4 <__divsi3+0x60>
 10050c0:	0085c83a 	sub	r2,zero,r2
 10050c4:	f800283a 	ret
 10050c8:	014bc83a 	sub	r5,zero,r5
 10050cc:	39c0005c 	xori	r7,r7,1
 10050d0:	003fe706 	br	1005070 <__alt_data_end+0xff493570>
 10050d4:	0109c83a 	sub	r4,zero,r4
 10050d8:	01c00044 	movi	r7,1
 10050dc:	003fe306 	br	100506c <__alt_data_end+0xff49356c>
 10050e0:	00c00044 	movi	r3,1
 10050e4:	003fee06 	br	10050a0 <__alt_data_end+0xff4935a0>

010050e8 <__modsi3>:
 10050e8:	20001716 	blt	r4,zero,1005148 <__modsi3+0x60>
 10050ec:	000f883a 	mov	r7,zero
 10050f0:	2005883a 	mov	r2,r4
 10050f4:	28001216 	blt	r5,zero,1005140 <__modsi3+0x58>
 10050f8:	2900162e 	bgeu	r5,r4,1005154 <__modsi3+0x6c>
 10050fc:	01800804 	movi	r6,32
 1005100:	00c00044 	movi	r3,1
 1005104:	00000106 	br	100510c <__modsi3+0x24>
 1005108:	30000a26 	beq	r6,zero,1005134 <__modsi3+0x4c>
 100510c:	294b883a 	add	r5,r5,r5
 1005110:	31bfffc4 	addi	r6,r6,-1
 1005114:	18c7883a 	add	r3,r3,r3
 1005118:	293ffb36 	bltu	r5,r4,1005108 <__alt_data_end+0xff493608>
 100511c:	18000526 	beq	r3,zero,1005134 <__modsi3+0x4c>
 1005120:	1806d07a 	srli	r3,r3,1
 1005124:	11400136 	bltu	r2,r5,100512c <__modsi3+0x44>
 1005128:	1145c83a 	sub	r2,r2,r5
 100512c:	280ad07a 	srli	r5,r5,1
 1005130:	183ffb1e 	bne	r3,zero,1005120 <__alt_data_end+0xff493620>
 1005134:	38000126 	beq	r7,zero,100513c <__modsi3+0x54>
 1005138:	0085c83a 	sub	r2,zero,r2
 100513c:	f800283a 	ret
 1005140:	014bc83a 	sub	r5,zero,r5
 1005144:	003fec06 	br	10050f8 <__alt_data_end+0xff4935f8>
 1005148:	0109c83a 	sub	r4,zero,r4
 100514c:	01c00044 	movi	r7,1
 1005150:	003fe706 	br	10050f0 <__alt_data_end+0xff4935f0>
 1005154:	00c00044 	movi	r3,1
 1005158:	003ff106 	br	1005120 <__alt_data_end+0xff493620>

0100515c <__udivsi3>:
 100515c:	200d883a 	mov	r6,r4
 1005160:	2900152e 	bgeu	r5,r4,10051b8 <__udivsi3+0x5c>
 1005164:	28001416 	blt	r5,zero,10051b8 <__udivsi3+0x5c>
 1005168:	00800804 	movi	r2,32
 100516c:	00c00044 	movi	r3,1
 1005170:	00000206 	br	100517c <__udivsi3+0x20>
 1005174:	10000e26 	beq	r2,zero,10051b0 <__udivsi3+0x54>
 1005178:	28000516 	blt	r5,zero,1005190 <__udivsi3+0x34>
 100517c:	294b883a 	add	r5,r5,r5
 1005180:	10bfffc4 	addi	r2,r2,-1
 1005184:	18c7883a 	add	r3,r3,r3
 1005188:	293ffa36 	bltu	r5,r4,1005174 <__alt_data_end+0xff493674>
 100518c:	18000826 	beq	r3,zero,10051b0 <__udivsi3+0x54>
 1005190:	0005883a 	mov	r2,zero
 1005194:	31400236 	bltu	r6,r5,10051a0 <__udivsi3+0x44>
 1005198:	314dc83a 	sub	r6,r6,r5
 100519c:	10c4b03a 	or	r2,r2,r3
 10051a0:	1806d07a 	srli	r3,r3,1
 10051a4:	280ad07a 	srli	r5,r5,1
 10051a8:	183ffa1e 	bne	r3,zero,1005194 <__alt_data_end+0xff493694>
 10051ac:	f800283a 	ret
 10051b0:	0005883a 	mov	r2,zero
 10051b4:	f800283a 	ret
 10051b8:	00c00044 	movi	r3,1
 10051bc:	003ff406 	br	1005190 <__alt_data_end+0xff493690>

010051c0 <__umodsi3>:
 10051c0:	2005883a 	mov	r2,r4
 10051c4:	2900122e 	bgeu	r5,r4,1005210 <__umodsi3+0x50>
 10051c8:	28001116 	blt	r5,zero,1005210 <__umodsi3+0x50>
 10051cc:	01800804 	movi	r6,32
 10051d0:	00c00044 	movi	r3,1
 10051d4:	00000206 	br	10051e0 <__umodsi3+0x20>
 10051d8:	30000c26 	beq	r6,zero,100520c <__umodsi3+0x4c>
 10051dc:	28000516 	blt	r5,zero,10051f4 <__umodsi3+0x34>
 10051e0:	294b883a 	add	r5,r5,r5
 10051e4:	31bfffc4 	addi	r6,r6,-1
 10051e8:	18c7883a 	add	r3,r3,r3
 10051ec:	293ffa36 	bltu	r5,r4,10051d8 <__alt_data_end+0xff4936d8>
 10051f0:	18000626 	beq	r3,zero,100520c <__umodsi3+0x4c>
 10051f4:	1806d07a 	srli	r3,r3,1
 10051f8:	11400136 	bltu	r2,r5,1005200 <__umodsi3+0x40>
 10051fc:	1145c83a 	sub	r2,r2,r5
 1005200:	280ad07a 	srli	r5,r5,1
 1005204:	183ffb1e 	bne	r3,zero,10051f4 <__alt_data_end+0xff4936f4>
 1005208:	f800283a 	ret
 100520c:	f800283a 	ret
 1005210:	00c00044 	movi	r3,1
 1005214:	003ff706 	br	10051f4 <__alt_data_end+0xff4936f4>

01005218 <__adddf3>:
 1005218:	02c00434 	movhi	r11,16
 100521c:	5affffc4 	addi	r11,r11,-1
 1005220:	2806d7fa 	srli	r3,r5,31
 1005224:	2ad4703a 	and	r10,r5,r11
 1005228:	3ad2703a 	and	r9,r7,r11
 100522c:	3804d53a 	srli	r2,r7,20
 1005230:	3018d77a 	srli	r12,r6,29
 1005234:	280ad53a 	srli	r5,r5,20
 1005238:	501490fa 	slli	r10,r10,3
 100523c:	2010d77a 	srli	r8,r4,29
 1005240:	481290fa 	slli	r9,r9,3
 1005244:	380ed7fa 	srli	r7,r7,31
 1005248:	defffb04 	addi	sp,sp,-20
 100524c:	dc800215 	stw	r18,8(sp)
 1005250:	dc400115 	stw	r17,4(sp)
 1005254:	dc000015 	stw	r16,0(sp)
 1005258:	dfc00415 	stw	ra,16(sp)
 100525c:	dcc00315 	stw	r19,12(sp)
 1005260:	1c803fcc 	andi	r18,r3,255
 1005264:	2c01ffcc 	andi	r16,r5,2047
 1005268:	5210b03a 	or	r8,r10,r8
 100526c:	202290fa 	slli	r17,r4,3
 1005270:	1081ffcc 	andi	r2,r2,2047
 1005274:	4b12b03a 	or	r9,r9,r12
 1005278:	300c90fa 	slli	r6,r6,3
 100527c:	91c07526 	beq	r18,r7,1005454 <__adddf3+0x23c>
 1005280:	8087c83a 	sub	r3,r16,r2
 1005284:	00c0ab0e 	bge	zero,r3,1005534 <__adddf3+0x31c>
 1005288:	10002a1e 	bne	r2,zero,1005334 <__adddf3+0x11c>
 100528c:	4984b03a 	or	r2,r9,r6
 1005290:	1000961e 	bne	r2,zero,10054ec <__adddf3+0x2d4>
 1005294:	888001cc 	andi	r2,r17,7
 1005298:	10000726 	beq	r2,zero,10052b8 <__adddf3+0xa0>
 100529c:	888003cc 	andi	r2,r17,15
 10052a0:	00c00104 	movi	r3,4
 10052a4:	10c00426 	beq	r2,r3,10052b8 <__adddf3+0xa0>
 10052a8:	88c7883a 	add	r3,r17,r3
 10052ac:	1c63803a 	cmpltu	r17,r3,r17
 10052b0:	4451883a 	add	r8,r8,r17
 10052b4:	1823883a 	mov	r17,r3
 10052b8:	4080202c 	andhi	r2,r8,128
 10052bc:	10005926 	beq	r2,zero,1005424 <__adddf3+0x20c>
 10052c0:	84000044 	addi	r16,r16,1
 10052c4:	0081ffc4 	movi	r2,2047
 10052c8:	8080ba26 	beq	r16,r2,10055b4 <__adddf3+0x39c>
 10052cc:	00bfe034 	movhi	r2,65408
 10052d0:	10bfffc4 	addi	r2,r2,-1
 10052d4:	4090703a 	and	r8,r8,r2
 10052d8:	4004977a 	slli	r2,r8,29
 10052dc:	4010927a 	slli	r8,r8,9
 10052e0:	8822d0fa 	srli	r17,r17,3
 10052e4:	8401ffcc 	andi	r16,r16,2047
 10052e8:	4010d33a 	srli	r8,r8,12
 10052ec:	9007883a 	mov	r3,r18
 10052f0:	1444b03a 	or	r2,r2,r17
 10052f4:	8401ffcc 	andi	r16,r16,2047
 10052f8:	8020953a 	slli	r16,r16,20
 10052fc:	18c03fcc 	andi	r3,r3,255
 1005300:	01000434 	movhi	r4,16
 1005304:	213fffc4 	addi	r4,r4,-1
 1005308:	180697fa 	slli	r3,r3,31
 100530c:	4110703a 	and	r8,r8,r4
 1005310:	4410b03a 	or	r8,r8,r16
 1005314:	40c6b03a 	or	r3,r8,r3
 1005318:	dfc00417 	ldw	ra,16(sp)
 100531c:	dcc00317 	ldw	r19,12(sp)
 1005320:	dc800217 	ldw	r18,8(sp)
 1005324:	dc400117 	ldw	r17,4(sp)
 1005328:	dc000017 	ldw	r16,0(sp)
 100532c:	dec00504 	addi	sp,sp,20
 1005330:	f800283a 	ret
 1005334:	0081ffc4 	movi	r2,2047
 1005338:	80bfd626 	beq	r16,r2,1005294 <__alt_data_end+0xff493794>
 100533c:	4a402034 	orhi	r9,r9,128
 1005340:	00800e04 	movi	r2,56
 1005344:	10c09f16 	blt	r2,r3,10055c4 <__adddf3+0x3ac>
 1005348:	008007c4 	movi	r2,31
 100534c:	10c0c216 	blt	r2,r3,1005658 <__adddf3+0x440>
 1005350:	00800804 	movi	r2,32
 1005354:	10c5c83a 	sub	r2,r2,r3
 1005358:	488a983a 	sll	r5,r9,r2
 100535c:	30c8d83a 	srl	r4,r6,r3
 1005360:	3084983a 	sll	r2,r6,r2
 1005364:	48c6d83a 	srl	r3,r9,r3
 1005368:	290cb03a 	or	r6,r5,r4
 100536c:	1004c03a 	cmpne	r2,r2,zero
 1005370:	308cb03a 	or	r6,r6,r2
 1005374:	898dc83a 	sub	r6,r17,r6
 1005378:	89a3803a 	cmpltu	r17,r17,r6
 100537c:	40d1c83a 	sub	r8,r8,r3
 1005380:	4451c83a 	sub	r8,r8,r17
 1005384:	3023883a 	mov	r17,r6
 1005388:	4080202c 	andhi	r2,r8,128
 100538c:	10002326 	beq	r2,zero,100541c <__adddf3+0x204>
 1005390:	04c02034 	movhi	r19,128
 1005394:	9cffffc4 	addi	r19,r19,-1
 1005398:	44e6703a 	and	r19,r8,r19
 100539c:	98007626 	beq	r19,zero,1005578 <__adddf3+0x360>
 10053a0:	9809883a 	mov	r4,r19
 10053a4:	10012e00 	call	10012e0 <__clzsi2>
 10053a8:	10fffe04 	addi	r3,r2,-8
 10053ac:	010007c4 	movi	r4,31
 10053b0:	20c07716 	blt	r4,r3,1005590 <__adddf3+0x378>
 10053b4:	00800804 	movi	r2,32
 10053b8:	10c5c83a 	sub	r2,r2,r3
 10053bc:	8884d83a 	srl	r2,r17,r2
 10053c0:	98d0983a 	sll	r8,r19,r3
 10053c4:	88e2983a 	sll	r17,r17,r3
 10053c8:	1204b03a 	or	r2,r2,r8
 10053cc:	1c007416 	blt	r3,r16,10055a0 <__adddf3+0x388>
 10053d0:	1c21c83a 	sub	r16,r3,r16
 10053d4:	82000044 	addi	r8,r16,1
 10053d8:	00c007c4 	movi	r3,31
 10053dc:	1a009116 	blt	r3,r8,1005624 <__adddf3+0x40c>
 10053e0:	00c00804 	movi	r3,32
 10053e4:	1a07c83a 	sub	r3,r3,r8
 10053e8:	8a08d83a 	srl	r4,r17,r8
 10053ec:	88e2983a 	sll	r17,r17,r3
 10053f0:	10c6983a 	sll	r3,r2,r3
 10053f4:	1210d83a 	srl	r8,r2,r8
 10053f8:	8804c03a 	cmpne	r2,r17,zero
 10053fc:	1906b03a 	or	r3,r3,r4
 1005400:	18a2b03a 	or	r17,r3,r2
 1005404:	0021883a 	mov	r16,zero
 1005408:	003fa206 	br	1005294 <__alt_data_end+0xff493794>
 100540c:	1890b03a 	or	r8,r3,r2
 1005410:	40017d26 	beq	r8,zero,1005a08 <__adddf3+0x7f0>
 1005414:	1011883a 	mov	r8,r2
 1005418:	1823883a 	mov	r17,r3
 100541c:	888001cc 	andi	r2,r17,7
 1005420:	103f9e1e 	bne	r2,zero,100529c <__alt_data_end+0xff49379c>
 1005424:	4004977a 	slli	r2,r8,29
 1005428:	8822d0fa 	srli	r17,r17,3
 100542c:	4010d0fa 	srli	r8,r8,3
 1005430:	9007883a 	mov	r3,r18
 1005434:	1444b03a 	or	r2,r2,r17
 1005438:	0101ffc4 	movi	r4,2047
 100543c:	81002426 	beq	r16,r4,10054d0 <__adddf3+0x2b8>
 1005440:	8120703a 	and	r16,r16,r4
 1005444:	01000434 	movhi	r4,16
 1005448:	213fffc4 	addi	r4,r4,-1
 100544c:	4110703a 	and	r8,r8,r4
 1005450:	003fa806 	br	10052f4 <__alt_data_end+0xff4937f4>
 1005454:	8089c83a 	sub	r4,r16,r2
 1005458:	01005e0e 	bge	zero,r4,10055d4 <__adddf3+0x3bc>
 100545c:	10002b26 	beq	r2,zero,100550c <__adddf3+0x2f4>
 1005460:	0081ffc4 	movi	r2,2047
 1005464:	80bf8b26 	beq	r16,r2,1005294 <__alt_data_end+0xff493794>
 1005468:	4a402034 	orhi	r9,r9,128
 100546c:	00800e04 	movi	r2,56
 1005470:	1100a40e 	bge	r2,r4,1005704 <__adddf3+0x4ec>
 1005474:	498cb03a 	or	r6,r9,r6
 1005478:	300ac03a 	cmpne	r5,r6,zero
 100547c:	0013883a 	mov	r9,zero
 1005480:	2c4b883a 	add	r5,r5,r17
 1005484:	2c63803a 	cmpltu	r17,r5,r17
 1005488:	4a11883a 	add	r8,r9,r8
 100548c:	8a11883a 	add	r8,r17,r8
 1005490:	2823883a 	mov	r17,r5
 1005494:	4080202c 	andhi	r2,r8,128
 1005498:	103fe026 	beq	r2,zero,100541c <__alt_data_end+0xff49391c>
 100549c:	84000044 	addi	r16,r16,1
 10054a0:	0081ffc4 	movi	r2,2047
 10054a4:	8080d226 	beq	r16,r2,10057f0 <__adddf3+0x5d8>
 10054a8:	00bfe034 	movhi	r2,65408
 10054ac:	10bfffc4 	addi	r2,r2,-1
 10054b0:	4090703a 	and	r8,r8,r2
 10054b4:	880ad07a 	srli	r5,r17,1
 10054b8:	400897fa 	slli	r4,r8,31
 10054bc:	88c0004c 	andi	r3,r17,1
 10054c0:	28e2b03a 	or	r17,r5,r3
 10054c4:	4010d07a 	srli	r8,r8,1
 10054c8:	2462b03a 	or	r17,r4,r17
 10054cc:	003f7106 	br	1005294 <__alt_data_end+0xff493794>
 10054d0:	4088b03a 	or	r4,r8,r2
 10054d4:	20014526 	beq	r4,zero,10059ec <__adddf3+0x7d4>
 10054d8:	01000434 	movhi	r4,16
 10054dc:	42000234 	orhi	r8,r8,8
 10054e0:	213fffc4 	addi	r4,r4,-1
 10054e4:	4110703a 	and	r8,r8,r4
 10054e8:	003f8206 	br	10052f4 <__alt_data_end+0xff4937f4>
 10054ec:	18ffffc4 	addi	r3,r3,-1
 10054f0:	1800491e 	bne	r3,zero,1005618 <__adddf3+0x400>
 10054f4:	898bc83a 	sub	r5,r17,r6
 10054f8:	8963803a 	cmpltu	r17,r17,r5
 10054fc:	4251c83a 	sub	r8,r8,r9
 1005500:	4451c83a 	sub	r8,r8,r17
 1005504:	2823883a 	mov	r17,r5
 1005508:	003f9f06 	br	1005388 <__alt_data_end+0xff493888>
 100550c:	4984b03a 	or	r2,r9,r6
 1005510:	103f6026 	beq	r2,zero,1005294 <__alt_data_end+0xff493794>
 1005514:	213fffc4 	addi	r4,r4,-1
 1005518:	2000931e 	bne	r4,zero,1005768 <__adddf3+0x550>
 100551c:	898d883a 	add	r6,r17,r6
 1005520:	3463803a 	cmpltu	r17,r6,r17
 1005524:	4251883a 	add	r8,r8,r9
 1005528:	8a11883a 	add	r8,r17,r8
 100552c:	3023883a 	mov	r17,r6
 1005530:	003fd806 	br	1005494 <__alt_data_end+0xff493994>
 1005534:	1800541e 	bne	r3,zero,1005688 <__adddf3+0x470>
 1005538:	80800044 	addi	r2,r16,1
 100553c:	1081ffcc 	andi	r2,r2,2047
 1005540:	00c00044 	movi	r3,1
 1005544:	1880a00e 	bge	r3,r2,10057c8 <__adddf3+0x5b0>
 1005548:	8989c83a 	sub	r4,r17,r6
 100554c:	8905803a 	cmpltu	r2,r17,r4
 1005550:	4267c83a 	sub	r19,r8,r9
 1005554:	98a7c83a 	sub	r19,r19,r2
 1005558:	9880202c 	andhi	r2,r19,128
 100555c:	10006326 	beq	r2,zero,10056ec <__adddf3+0x4d4>
 1005560:	3463c83a 	sub	r17,r6,r17
 1005564:	4a07c83a 	sub	r3,r9,r8
 1005568:	344d803a 	cmpltu	r6,r6,r17
 100556c:	19a7c83a 	sub	r19,r3,r6
 1005570:	3825883a 	mov	r18,r7
 1005574:	983f8a1e 	bne	r19,zero,10053a0 <__alt_data_end+0xff4938a0>
 1005578:	8809883a 	mov	r4,r17
 100557c:	10012e00 	call	10012e0 <__clzsi2>
 1005580:	10800804 	addi	r2,r2,32
 1005584:	10fffe04 	addi	r3,r2,-8
 1005588:	010007c4 	movi	r4,31
 100558c:	20ff890e 	bge	r4,r3,10053b4 <__alt_data_end+0xff4938b4>
 1005590:	10bff604 	addi	r2,r2,-40
 1005594:	8884983a 	sll	r2,r17,r2
 1005598:	0023883a 	mov	r17,zero
 100559c:	1c3f8c0e 	bge	r3,r16,10053d0 <__alt_data_end+0xff4938d0>
 10055a0:	023fe034 	movhi	r8,65408
 10055a4:	423fffc4 	addi	r8,r8,-1
 10055a8:	80e1c83a 	sub	r16,r16,r3
 10055ac:	1210703a 	and	r8,r2,r8
 10055b0:	003f3806 	br	1005294 <__alt_data_end+0xff493794>
 10055b4:	9007883a 	mov	r3,r18
 10055b8:	0011883a 	mov	r8,zero
 10055bc:	0005883a 	mov	r2,zero
 10055c0:	003f4c06 	br	10052f4 <__alt_data_end+0xff4937f4>
 10055c4:	498cb03a 	or	r6,r9,r6
 10055c8:	300cc03a 	cmpne	r6,r6,zero
 10055cc:	0007883a 	mov	r3,zero
 10055d0:	003f6806 	br	1005374 <__alt_data_end+0xff493874>
 10055d4:	20009c1e 	bne	r4,zero,1005848 <__adddf3+0x630>
 10055d8:	80800044 	addi	r2,r16,1
 10055dc:	1141ffcc 	andi	r5,r2,2047
 10055e0:	01000044 	movi	r4,1
 10055e4:	2140670e 	bge	r4,r5,1005784 <__adddf3+0x56c>
 10055e8:	0101ffc4 	movi	r4,2047
 10055ec:	11007f26 	beq	r2,r4,10057ec <__adddf3+0x5d4>
 10055f0:	898d883a 	add	r6,r17,r6
 10055f4:	4247883a 	add	r3,r8,r9
 10055f8:	3451803a 	cmpltu	r8,r6,r17
 10055fc:	40d1883a 	add	r8,r8,r3
 1005600:	402297fa 	slli	r17,r8,31
 1005604:	300cd07a 	srli	r6,r6,1
 1005608:	4010d07a 	srli	r8,r8,1
 100560c:	1021883a 	mov	r16,r2
 1005610:	89a2b03a 	or	r17,r17,r6
 1005614:	003f1f06 	br	1005294 <__alt_data_end+0xff493794>
 1005618:	0081ffc4 	movi	r2,2047
 100561c:	80bf481e 	bne	r16,r2,1005340 <__alt_data_end+0xff493840>
 1005620:	003f1c06 	br	1005294 <__alt_data_end+0xff493794>
 1005624:	843ff844 	addi	r16,r16,-31
 1005628:	01000804 	movi	r4,32
 100562c:	1406d83a 	srl	r3,r2,r16
 1005630:	41005026 	beq	r8,r4,1005774 <__adddf3+0x55c>
 1005634:	01001004 	movi	r4,64
 1005638:	2211c83a 	sub	r8,r4,r8
 100563c:	1204983a 	sll	r2,r2,r8
 1005640:	88a2b03a 	or	r17,r17,r2
 1005644:	8822c03a 	cmpne	r17,r17,zero
 1005648:	1c62b03a 	or	r17,r3,r17
 100564c:	0011883a 	mov	r8,zero
 1005650:	0021883a 	mov	r16,zero
 1005654:	003f7106 	br	100541c <__alt_data_end+0xff49391c>
 1005658:	193ff804 	addi	r4,r3,-32
 100565c:	00800804 	movi	r2,32
 1005660:	4908d83a 	srl	r4,r9,r4
 1005664:	18804526 	beq	r3,r2,100577c <__adddf3+0x564>
 1005668:	00801004 	movi	r2,64
 100566c:	10c5c83a 	sub	r2,r2,r3
 1005670:	4886983a 	sll	r3,r9,r2
 1005674:	198cb03a 	or	r6,r3,r6
 1005678:	300cc03a 	cmpne	r6,r6,zero
 100567c:	218cb03a 	or	r6,r4,r6
 1005680:	0007883a 	mov	r3,zero
 1005684:	003f3b06 	br	1005374 <__alt_data_end+0xff493874>
 1005688:	80002a26 	beq	r16,zero,1005734 <__adddf3+0x51c>
 100568c:	0101ffc4 	movi	r4,2047
 1005690:	11006826 	beq	r2,r4,1005834 <__adddf3+0x61c>
 1005694:	00c7c83a 	sub	r3,zero,r3
 1005698:	42002034 	orhi	r8,r8,128
 100569c:	01000e04 	movi	r4,56
 10056a0:	20c07c16 	blt	r4,r3,1005894 <__adddf3+0x67c>
 10056a4:	010007c4 	movi	r4,31
 10056a8:	20c0da16 	blt	r4,r3,1005a14 <__adddf3+0x7fc>
 10056ac:	01000804 	movi	r4,32
 10056b0:	20c9c83a 	sub	r4,r4,r3
 10056b4:	4114983a 	sll	r10,r8,r4
 10056b8:	88cad83a 	srl	r5,r17,r3
 10056bc:	8908983a 	sll	r4,r17,r4
 10056c0:	40c6d83a 	srl	r3,r8,r3
 10056c4:	5162b03a 	or	r17,r10,r5
 10056c8:	2008c03a 	cmpne	r4,r4,zero
 10056cc:	8922b03a 	or	r17,r17,r4
 10056d0:	3463c83a 	sub	r17,r6,r17
 10056d4:	48c7c83a 	sub	r3,r9,r3
 10056d8:	344d803a 	cmpltu	r6,r6,r17
 10056dc:	1991c83a 	sub	r8,r3,r6
 10056e0:	1021883a 	mov	r16,r2
 10056e4:	3825883a 	mov	r18,r7
 10056e8:	003f2706 	br	1005388 <__alt_data_end+0xff493888>
 10056ec:	24d0b03a 	or	r8,r4,r19
 10056f0:	40001b1e 	bne	r8,zero,1005760 <__adddf3+0x548>
 10056f4:	0005883a 	mov	r2,zero
 10056f8:	0007883a 	mov	r3,zero
 10056fc:	0021883a 	mov	r16,zero
 1005700:	003f4d06 	br	1005438 <__alt_data_end+0xff493938>
 1005704:	008007c4 	movi	r2,31
 1005708:	11003c16 	blt	r2,r4,10057fc <__adddf3+0x5e4>
 100570c:	00800804 	movi	r2,32
 1005710:	1105c83a 	sub	r2,r2,r4
 1005714:	488e983a 	sll	r7,r9,r2
 1005718:	310ad83a 	srl	r5,r6,r4
 100571c:	3084983a 	sll	r2,r6,r2
 1005720:	4912d83a 	srl	r9,r9,r4
 1005724:	394ab03a 	or	r5,r7,r5
 1005728:	1004c03a 	cmpne	r2,r2,zero
 100572c:	288ab03a 	or	r5,r5,r2
 1005730:	003f5306 	br	1005480 <__alt_data_end+0xff493980>
 1005734:	4448b03a 	or	r4,r8,r17
 1005738:	20003e26 	beq	r4,zero,1005834 <__adddf3+0x61c>
 100573c:	00c6303a 	nor	r3,zero,r3
 1005740:	18003a1e 	bne	r3,zero,100582c <__adddf3+0x614>
 1005744:	3463c83a 	sub	r17,r6,r17
 1005748:	4a07c83a 	sub	r3,r9,r8
 100574c:	344d803a 	cmpltu	r6,r6,r17
 1005750:	1991c83a 	sub	r8,r3,r6
 1005754:	1021883a 	mov	r16,r2
 1005758:	3825883a 	mov	r18,r7
 100575c:	003f0a06 	br	1005388 <__alt_data_end+0xff493888>
 1005760:	2023883a 	mov	r17,r4
 1005764:	003f0d06 	br	100539c <__alt_data_end+0xff49389c>
 1005768:	0081ffc4 	movi	r2,2047
 100576c:	80bf3f1e 	bne	r16,r2,100546c <__alt_data_end+0xff49396c>
 1005770:	003ec806 	br	1005294 <__alt_data_end+0xff493794>
 1005774:	0005883a 	mov	r2,zero
 1005778:	003fb106 	br	1005640 <__alt_data_end+0xff493b40>
 100577c:	0007883a 	mov	r3,zero
 1005780:	003fbc06 	br	1005674 <__alt_data_end+0xff493b74>
 1005784:	4444b03a 	or	r2,r8,r17
 1005788:	8000871e 	bne	r16,zero,10059a8 <__adddf3+0x790>
 100578c:	1000ba26 	beq	r2,zero,1005a78 <__adddf3+0x860>
 1005790:	4984b03a 	or	r2,r9,r6
 1005794:	103ebf26 	beq	r2,zero,1005294 <__alt_data_end+0xff493794>
 1005798:	8985883a 	add	r2,r17,r6
 100579c:	4247883a 	add	r3,r8,r9
 10057a0:	1451803a 	cmpltu	r8,r2,r17
 10057a4:	40d1883a 	add	r8,r8,r3
 10057a8:	40c0202c 	andhi	r3,r8,128
 10057ac:	1023883a 	mov	r17,r2
 10057b0:	183f1a26 	beq	r3,zero,100541c <__alt_data_end+0xff49391c>
 10057b4:	00bfe034 	movhi	r2,65408
 10057b8:	10bfffc4 	addi	r2,r2,-1
 10057bc:	2021883a 	mov	r16,r4
 10057c0:	4090703a 	and	r8,r8,r2
 10057c4:	003eb306 	br	1005294 <__alt_data_end+0xff493794>
 10057c8:	4444b03a 	or	r2,r8,r17
 10057cc:	8000291e 	bne	r16,zero,1005874 <__adddf3+0x65c>
 10057d0:	10004b1e 	bne	r2,zero,1005900 <__adddf3+0x6e8>
 10057d4:	4990b03a 	or	r8,r9,r6
 10057d8:	40008b26 	beq	r8,zero,1005a08 <__adddf3+0x7f0>
 10057dc:	4811883a 	mov	r8,r9
 10057e0:	3023883a 	mov	r17,r6
 10057e4:	3825883a 	mov	r18,r7
 10057e8:	003eaa06 	br	1005294 <__alt_data_end+0xff493794>
 10057ec:	1021883a 	mov	r16,r2
 10057f0:	0011883a 	mov	r8,zero
 10057f4:	0005883a 	mov	r2,zero
 10057f8:	003f0f06 	br	1005438 <__alt_data_end+0xff493938>
 10057fc:	217ff804 	addi	r5,r4,-32
 1005800:	00800804 	movi	r2,32
 1005804:	494ad83a 	srl	r5,r9,r5
 1005808:	20807d26 	beq	r4,r2,1005a00 <__adddf3+0x7e8>
 100580c:	00801004 	movi	r2,64
 1005810:	1109c83a 	sub	r4,r2,r4
 1005814:	4912983a 	sll	r9,r9,r4
 1005818:	498cb03a 	or	r6,r9,r6
 100581c:	300cc03a 	cmpne	r6,r6,zero
 1005820:	298ab03a 	or	r5,r5,r6
 1005824:	0013883a 	mov	r9,zero
 1005828:	003f1506 	br	1005480 <__alt_data_end+0xff493980>
 100582c:	0101ffc4 	movi	r4,2047
 1005830:	113f9a1e 	bne	r2,r4,100569c <__alt_data_end+0xff493b9c>
 1005834:	4811883a 	mov	r8,r9
 1005838:	3023883a 	mov	r17,r6
 100583c:	1021883a 	mov	r16,r2
 1005840:	3825883a 	mov	r18,r7
 1005844:	003e9306 	br	1005294 <__alt_data_end+0xff493794>
 1005848:	8000161e 	bne	r16,zero,10058a4 <__adddf3+0x68c>
 100584c:	444ab03a 	or	r5,r8,r17
 1005850:	28005126 	beq	r5,zero,1005998 <__adddf3+0x780>
 1005854:	0108303a 	nor	r4,zero,r4
 1005858:	20004d1e 	bne	r4,zero,1005990 <__adddf3+0x778>
 100585c:	89a3883a 	add	r17,r17,r6
 1005860:	4253883a 	add	r9,r8,r9
 1005864:	898d803a 	cmpltu	r6,r17,r6
 1005868:	3251883a 	add	r8,r6,r9
 100586c:	1021883a 	mov	r16,r2
 1005870:	003f0806 	br	1005494 <__alt_data_end+0xff493994>
 1005874:	1000301e 	bne	r2,zero,1005938 <__adddf3+0x720>
 1005878:	4984b03a 	or	r2,r9,r6
 100587c:	10007126 	beq	r2,zero,1005a44 <__adddf3+0x82c>
 1005880:	4811883a 	mov	r8,r9
 1005884:	3023883a 	mov	r17,r6
 1005888:	3825883a 	mov	r18,r7
 100588c:	0401ffc4 	movi	r16,2047
 1005890:	003e8006 	br	1005294 <__alt_data_end+0xff493794>
 1005894:	4462b03a 	or	r17,r8,r17
 1005898:	8822c03a 	cmpne	r17,r17,zero
 100589c:	0007883a 	mov	r3,zero
 10058a0:	003f8b06 	br	10056d0 <__alt_data_end+0xff493bd0>
 10058a4:	0141ffc4 	movi	r5,2047
 10058a8:	11403b26 	beq	r2,r5,1005998 <__adddf3+0x780>
 10058ac:	0109c83a 	sub	r4,zero,r4
 10058b0:	42002034 	orhi	r8,r8,128
 10058b4:	01400e04 	movi	r5,56
 10058b8:	29006716 	blt	r5,r4,1005a58 <__adddf3+0x840>
 10058bc:	014007c4 	movi	r5,31
 10058c0:	29007016 	blt	r5,r4,1005a84 <__adddf3+0x86c>
 10058c4:	01400804 	movi	r5,32
 10058c8:	290bc83a 	sub	r5,r5,r4
 10058cc:	4154983a 	sll	r10,r8,r5
 10058d0:	890ed83a 	srl	r7,r17,r4
 10058d4:	894a983a 	sll	r5,r17,r5
 10058d8:	4108d83a 	srl	r4,r8,r4
 10058dc:	51e2b03a 	or	r17,r10,r7
 10058e0:	280ac03a 	cmpne	r5,r5,zero
 10058e4:	8962b03a 	or	r17,r17,r5
 10058e8:	89a3883a 	add	r17,r17,r6
 10058ec:	2253883a 	add	r9,r4,r9
 10058f0:	898d803a 	cmpltu	r6,r17,r6
 10058f4:	3251883a 	add	r8,r6,r9
 10058f8:	1021883a 	mov	r16,r2
 10058fc:	003ee506 	br	1005494 <__alt_data_end+0xff493994>
 1005900:	4984b03a 	or	r2,r9,r6
 1005904:	103e6326 	beq	r2,zero,1005294 <__alt_data_end+0xff493794>
 1005908:	8987c83a 	sub	r3,r17,r6
 100590c:	88c9803a 	cmpltu	r4,r17,r3
 1005910:	4245c83a 	sub	r2,r8,r9
 1005914:	1105c83a 	sub	r2,r2,r4
 1005918:	1100202c 	andhi	r4,r2,128
 100591c:	203ebb26 	beq	r4,zero,100540c <__alt_data_end+0xff49390c>
 1005920:	3463c83a 	sub	r17,r6,r17
 1005924:	4a07c83a 	sub	r3,r9,r8
 1005928:	344d803a 	cmpltu	r6,r6,r17
 100592c:	1991c83a 	sub	r8,r3,r6
 1005930:	3825883a 	mov	r18,r7
 1005934:	003e5706 	br	1005294 <__alt_data_end+0xff493794>
 1005938:	4984b03a 	or	r2,r9,r6
 100593c:	10002e26 	beq	r2,zero,10059f8 <__adddf3+0x7e0>
 1005940:	4004d0fa 	srli	r2,r8,3
 1005944:	8822d0fa 	srli	r17,r17,3
 1005948:	4010977a 	slli	r8,r8,29
 100594c:	10c0022c 	andhi	r3,r2,8
 1005950:	4462b03a 	or	r17,r8,r17
 1005954:	18000826 	beq	r3,zero,1005978 <__adddf3+0x760>
 1005958:	4808d0fa 	srli	r4,r9,3
 100595c:	20c0022c 	andhi	r3,r4,8
 1005960:	1800051e 	bne	r3,zero,1005978 <__adddf3+0x760>
 1005964:	300cd0fa 	srli	r6,r6,3
 1005968:	4806977a 	slli	r3,r9,29
 100596c:	2005883a 	mov	r2,r4
 1005970:	3825883a 	mov	r18,r7
 1005974:	19a2b03a 	or	r17,r3,r6
 1005978:	8810d77a 	srli	r8,r17,29
 100597c:	100490fa 	slli	r2,r2,3
 1005980:	882290fa 	slli	r17,r17,3
 1005984:	0401ffc4 	movi	r16,2047
 1005988:	4090b03a 	or	r8,r8,r2
 100598c:	003e4106 	br	1005294 <__alt_data_end+0xff493794>
 1005990:	0141ffc4 	movi	r5,2047
 1005994:	117fc71e 	bne	r2,r5,10058b4 <__alt_data_end+0xff493db4>
 1005998:	4811883a 	mov	r8,r9
 100599c:	3023883a 	mov	r17,r6
 10059a0:	1021883a 	mov	r16,r2
 10059a4:	003e3b06 	br	1005294 <__alt_data_end+0xff493794>
 10059a8:	10002f26 	beq	r2,zero,1005a68 <__adddf3+0x850>
 10059ac:	4984b03a 	or	r2,r9,r6
 10059b0:	10001126 	beq	r2,zero,10059f8 <__adddf3+0x7e0>
 10059b4:	4004d0fa 	srli	r2,r8,3
 10059b8:	8822d0fa 	srli	r17,r17,3
 10059bc:	4010977a 	slli	r8,r8,29
 10059c0:	10c0022c 	andhi	r3,r2,8
 10059c4:	4462b03a 	or	r17,r8,r17
 10059c8:	183feb26 	beq	r3,zero,1005978 <__alt_data_end+0xff493e78>
 10059cc:	4808d0fa 	srli	r4,r9,3
 10059d0:	20c0022c 	andhi	r3,r4,8
 10059d4:	183fe81e 	bne	r3,zero,1005978 <__alt_data_end+0xff493e78>
 10059d8:	300cd0fa 	srli	r6,r6,3
 10059dc:	4806977a 	slli	r3,r9,29
 10059e0:	2005883a 	mov	r2,r4
 10059e4:	19a2b03a 	or	r17,r3,r6
 10059e8:	003fe306 	br	1005978 <__alt_data_end+0xff493e78>
 10059ec:	0011883a 	mov	r8,zero
 10059f0:	0005883a 	mov	r2,zero
 10059f4:	003e3f06 	br	10052f4 <__alt_data_end+0xff4937f4>
 10059f8:	0401ffc4 	movi	r16,2047
 10059fc:	003e2506 	br	1005294 <__alt_data_end+0xff493794>
 1005a00:	0013883a 	mov	r9,zero
 1005a04:	003f8406 	br	1005818 <__alt_data_end+0xff493d18>
 1005a08:	0005883a 	mov	r2,zero
 1005a0c:	0007883a 	mov	r3,zero
 1005a10:	003e8906 	br	1005438 <__alt_data_end+0xff493938>
 1005a14:	197ff804 	addi	r5,r3,-32
 1005a18:	01000804 	movi	r4,32
 1005a1c:	414ad83a 	srl	r5,r8,r5
 1005a20:	19002426 	beq	r3,r4,1005ab4 <__adddf3+0x89c>
 1005a24:	01001004 	movi	r4,64
 1005a28:	20c7c83a 	sub	r3,r4,r3
 1005a2c:	40c6983a 	sll	r3,r8,r3
 1005a30:	1c46b03a 	or	r3,r3,r17
 1005a34:	1806c03a 	cmpne	r3,r3,zero
 1005a38:	28e2b03a 	or	r17,r5,r3
 1005a3c:	0007883a 	mov	r3,zero
 1005a40:	003f2306 	br	10056d0 <__alt_data_end+0xff493bd0>
 1005a44:	0007883a 	mov	r3,zero
 1005a48:	5811883a 	mov	r8,r11
 1005a4c:	00bfffc4 	movi	r2,-1
 1005a50:	0401ffc4 	movi	r16,2047
 1005a54:	003e7806 	br	1005438 <__alt_data_end+0xff493938>
 1005a58:	4462b03a 	or	r17,r8,r17
 1005a5c:	8822c03a 	cmpne	r17,r17,zero
 1005a60:	0009883a 	mov	r4,zero
 1005a64:	003fa006 	br	10058e8 <__alt_data_end+0xff493de8>
 1005a68:	4811883a 	mov	r8,r9
 1005a6c:	3023883a 	mov	r17,r6
 1005a70:	0401ffc4 	movi	r16,2047
 1005a74:	003e0706 	br	1005294 <__alt_data_end+0xff493794>
 1005a78:	4811883a 	mov	r8,r9
 1005a7c:	3023883a 	mov	r17,r6
 1005a80:	003e0406 	br	1005294 <__alt_data_end+0xff493794>
 1005a84:	21fff804 	addi	r7,r4,-32
 1005a88:	01400804 	movi	r5,32
 1005a8c:	41ced83a 	srl	r7,r8,r7
 1005a90:	21400a26 	beq	r4,r5,1005abc <__adddf3+0x8a4>
 1005a94:	01401004 	movi	r5,64
 1005a98:	2909c83a 	sub	r4,r5,r4
 1005a9c:	4108983a 	sll	r4,r8,r4
 1005aa0:	2448b03a 	or	r4,r4,r17
 1005aa4:	2008c03a 	cmpne	r4,r4,zero
 1005aa8:	3922b03a 	or	r17,r7,r4
 1005aac:	0009883a 	mov	r4,zero
 1005ab0:	003f8d06 	br	10058e8 <__alt_data_end+0xff493de8>
 1005ab4:	0007883a 	mov	r3,zero
 1005ab8:	003fdd06 	br	1005a30 <__alt_data_end+0xff493f30>
 1005abc:	0009883a 	mov	r4,zero
 1005ac0:	003ff706 	br	1005aa0 <__alt_data_end+0xff493fa0>

01005ac4 <__divdf3>:
 1005ac4:	defff004 	addi	sp,sp,-64
 1005ac8:	dc800815 	stw	r18,32(sp)
 1005acc:	2824d53a 	srli	r18,r5,20
 1005ad0:	dd800c15 	stw	r22,48(sp)
 1005ad4:	282cd7fa 	srli	r22,r5,31
 1005ad8:	dc000615 	stw	r16,24(sp)
 1005adc:	04000434 	movhi	r16,16
 1005ae0:	843fffc4 	addi	r16,r16,-1
 1005ae4:	dfc00f15 	stw	ra,60(sp)
 1005ae8:	df000e15 	stw	fp,56(sp)
 1005aec:	ddc00d15 	stw	r23,52(sp)
 1005af0:	dd400b15 	stw	r21,44(sp)
 1005af4:	dd000a15 	stw	r20,40(sp)
 1005af8:	dcc00915 	stw	r19,36(sp)
 1005afc:	dc400715 	stw	r17,28(sp)
 1005b00:	9481ffcc 	andi	r18,r18,2047
 1005b04:	2c20703a 	and	r16,r5,r16
 1005b08:	b2003fcc 	andi	r8,r22,255
 1005b0c:	90006126 	beq	r18,zero,1005c94 <__divdf3+0x1d0>
 1005b10:	0081ffc4 	movi	r2,2047
 1005b14:	202b883a 	mov	r21,r4
 1005b18:	90803726 	beq	r18,r2,1005bf8 <__divdf3+0x134>
 1005b1c:	80800434 	orhi	r2,r16,16
 1005b20:	100490fa 	slli	r2,r2,3
 1005b24:	2020d77a 	srli	r16,r4,29
 1005b28:	202a90fa 	slli	r21,r4,3
 1005b2c:	94bf0044 	addi	r18,r18,-1023
 1005b30:	80a0b03a 	or	r16,r16,r2
 1005b34:	0013883a 	mov	r9,zero
 1005b38:	000b883a 	mov	r5,zero
 1005b3c:	3806d53a 	srli	r3,r7,20
 1005b40:	382ed7fa 	srli	r23,r7,31
 1005b44:	04400434 	movhi	r17,16
 1005b48:	8c7fffc4 	addi	r17,r17,-1
 1005b4c:	18c1ffcc 	andi	r3,r3,2047
 1005b50:	3029883a 	mov	r20,r6
 1005b54:	3c62703a 	and	r17,r7,r17
 1005b58:	bf003fcc 	andi	fp,r23,255
 1005b5c:	18006e26 	beq	r3,zero,1005d18 <__divdf3+0x254>
 1005b60:	0081ffc4 	movi	r2,2047
 1005b64:	18806626 	beq	r3,r2,1005d00 <__divdf3+0x23c>
 1005b68:	88800434 	orhi	r2,r17,16
 1005b6c:	100490fa 	slli	r2,r2,3
 1005b70:	3022d77a 	srli	r17,r6,29
 1005b74:	302890fa 	slli	r20,r6,3
 1005b78:	18ff0044 	addi	r3,r3,-1023
 1005b7c:	88a2b03a 	or	r17,r17,r2
 1005b80:	000f883a 	mov	r7,zero
 1005b84:	b5e6f03a 	xor	r19,r22,r23
 1005b88:	3a4cb03a 	or	r6,r7,r9
 1005b8c:	008003c4 	movi	r2,15
 1005b90:	9809883a 	mov	r4,r19
 1005b94:	90c7c83a 	sub	r3,r18,r3
 1005b98:	9cc03fcc 	andi	r19,r19,255
 1005b9c:	11809636 	bltu	r2,r6,1005df8 <__divdf3+0x334>
 1005ba0:	300c90ba 	slli	r6,r6,2
 1005ba4:	00804034 	movhi	r2,256
 1005ba8:	1096ee04 	addi	r2,r2,23480
 1005bac:	308d883a 	add	r6,r6,r2
 1005bb0:	30800017 	ldw	r2,0(r6)
 1005bb4:	1000683a 	jmp	r2
 1005bb8:	01005df8 	rdprs	r4,zero,375
 1005bbc:	01005c30 	cmpltui	r4,zero,368
 1005bc0:	01005de8 	cmpgeui	r4,zero,375
 1005bc4:	01005c24 	muli	r4,zero,368
 1005bc8:	01005de8 	cmpgeui	r4,zero,375
 1005bcc:	01005dbc 	xorhi	r4,zero,374
 1005bd0:	01005de8 	cmpgeui	r4,zero,375
 1005bd4:	01005c24 	muli	r4,zero,368
 1005bd8:	01005c30 	cmpltui	r4,zero,368
 1005bdc:	01005c30 	cmpltui	r4,zero,368
 1005be0:	01005dbc 	xorhi	r4,zero,374
 1005be4:	01005c24 	muli	r4,zero,368
 1005be8:	01005c14 	movui	r4,368
 1005bec:	01005c14 	movui	r4,368
 1005bf0:	01005c14 	movui	r4,368
 1005bf4:	01006180 	call	100618 <__alt_mem_onchip_mem-0xeff9e8>
 1005bf8:	2404b03a 	or	r2,r4,r16
 1005bfc:	10006c1e 	bne	r2,zero,1005db0 <__divdf3+0x2ec>
 1005c00:	02400204 	movi	r9,8
 1005c04:	0021883a 	mov	r16,zero
 1005c08:	002b883a 	mov	r21,zero
 1005c0c:	01400084 	movi	r5,2
 1005c10:	003fca06 	br	1005b3c <__alt_data_end+0xff49403c>
 1005c14:	8023883a 	mov	r17,r16
 1005c18:	a829883a 	mov	r20,r21
 1005c1c:	4039883a 	mov	fp,r8
 1005c20:	280f883a 	mov	r7,r5
 1005c24:	00800084 	movi	r2,2
 1005c28:	3881601e 	bne	r7,r2,10061ac <__divdf3+0x6e8>
 1005c2c:	e027883a 	mov	r19,fp
 1005c30:	9900004c 	andi	r4,r19,1
 1005c34:	0081ffc4 	movi	r2,2047
 1005c38:	0021883a 	mov	r16,zero
 1005c3c:	002b883a 	mov	r21,zero
 1005c40:	1004953a 	slli	r2,r2,20
 1005c44:	20c03fcc 	andi	r3,r4,255
 1005c48:	01400434 	movhi	r5,16
 1005c4c:	297fffc4 	addi	r5,r5,-1
 1005c50:	180697fa 	slli	r3,r3,31
 1005c54:	8160703a 	and	r16,r16,r5
 1005c58:	80a0b03a 	or	r16,r16,r2
 1005c5c:	80c6b03a 	or	r3,r16,r3
 1005c60:	a805883a 	mov	r2,r21
 1005c64:	dfc00f17 	ldw	ra,60(sp)
 1005c68:	df000e17 	ldw	fp,56(sp)
 1005c6c:	ddc00d17 	ldw	r23,52(sp)
 1005c70:	dd800c17 	ldw	r22,48(sp)
 1005c74:	dd400b17 	ldw	r21,44(sp)
 1005c78:	dd000a17 	ldw	r20,40(sp)
 1005c7c:	dcc00917 	ldw	r19,36(sp)
 1005c80:	dc800817 	ldw	r18,32(sp)
 1005c84:	dc400717 	ldw	r17,28(sp)
 1005c88:	dc000617 	ldw	r16,24(sp)
 1005c8c:	dec01004 	addi	sp,sp,64
 1005c90:	f800283a 	ret
 1005c94:	2404b03a 	or	r2,r4,r16
 1005c98:	2023883a 	mov	r17,r4
 1005c9c:	10003f26 	beq	r2,zero,1005d9c <__divdf3+0x2d8>
 1005ca0:	80015e26 	beq	r16,zero,100621c <__divdf3+0x758>
 1005ca4:	8009883a 	mov	r4,r16
 1005ca8:	d9800215 	stw	r6,8(sp)
 1005cac:	d9c00515 	stw	r7,20(sp)
 1005cb0:	da000415 	stw	r8,16(sp)
 1005cb4:	10012e00 	call	10012e0 <__clzsi2>
 1005cb8:	d9800217 	ldw	r6,8(sp)
 1005cbc:	d9c00517 	ldw	r7,20(sp)
 1005cc0:	da000417 	ldw	r8,16(sp)
 1005cc4:	113ffd44 	addi	r4,r2,-11
 1005cc8:	00c00704 	movi	r3,28
 1005ccc:	19014f16 	blt	r3,r4,100620c <__divdf3+0x748>
 1005cd0:	00c00744 	movi	r3,29
 1005cd4:	157ffe04 	addi	r21,r2,-8
 1005cd8:	1907c83a 	sub	r3,r3,r4
 1005cdc:	8560983a 	sll	r16,r16,r21
 1005ce0:	88c6d83a 	srl	r3,r17,r3
 1005ce4:	8d6a983a 	sll	r21,r17,r21
 1005ce8:	1c20b03a 	or	r16,r3,r16
 1005cec:	1080fcc4 	addi	r2,r2,1011
 1005cf0:	00a5c83a 	sub	r18,zero,r2
 1005cf4:	0013883a 	mov	r9,zero
 1005cf8:	000b883a 	mov	r5,zero
 1005cfc:	003f8f06 	br	1005b3c <__alt_data_end+0xff49403c>
 1005d00:	3444b03a 	or	r2,r6,r17
 1005d04:	1000231e 	bne	r2,zero,1005d94 <__divdf3+0x2d0>
 1005d08:	0023883a 	mov	r17,zero
 1005d0c:	0029883a 	mov	r20,zero
 1005d10:	01c00084 	movi	r7,2
 1005d14:	003f9b06 	br	1005b84 <__alt_data_end+0xff494084>
 1005d18:	3444b03a 	or	r2,r6,r17
 1005d1c:	10001926 	beq	r2,zero,1005d84 <__divdf3+0x2c0>
 1005d20:	88014b26 	beq	r17,zero,1006250 <__divdf3+0x78c>
 1005d24:	8809883a 	mov	r4,r17
 1005d28:	d9400115 	stw	r5,4(sp)
 1005d2c:	d9800215 	stw	r6,8(sp)
 1005d30:	da000415 	stw	r8,16(sp)
 1005d34:	da400315 	stw	r9,12(sp)
 1005d38:	10012e00 	call	10012e0 <__clzsi2>
 1005d3c:	d9400117 	ldw	r5,4(sp)
 1005d40:	d9800217 	ldw	r6,8(sp)
 1005d44:	da000417 	ldw	r8,16(sp)
 1005d48:	da400317 	ldw	r9,12(sp)
 1005d4c:	113ffd44 	addi	r4,r2,-11
 1005d50:	00c00704 	movi	r3,28
 1005d54:	19013a16 	blt	r3,r4,1006240 <__divdf3+0x77c>
 1005d58:	00c00744 	movi	r3,29
 1005d5c:	153ffe04 	addi	r20,r2,-8
 1005d60:	1907c83a 	sub	r3,r3,r4
 1005d64:	8d22983a 	sll	r17,r17,r20
 1005d68:	30c6d83a 	srl	r3,r6,r3
 1005d6c:	3528983a 	sll	r20,r6,r20
 1005d70:	1c62b03a 	or	r17,r3,r17
 1005d74:	1080fcc4 	addi	r2,r2,1011
 1005d78:	0087c83a 	sub	r3,zero,r2
 1005d7c:	000f883a 	mov	r7,zero
 1005d80:	003f8006 	br	1005b84 <__alt_data_end+0xff494084>
 1005d84:	0023883a 	mov	r17,zero
 1005d88:	0029883a 	mov	r20,zero
 1005d8c:	01c00044 	movi	r7,1
 1005d90:	003f7c06 	br	1005b84 <__alt_data_end+0xff494084>
 1005d94:	01c000c4 	movi	r7,3
 1005d98:	003f7a06 	br	1005b84 <__alt_data_end+0xff494084>
 1005d9c:	02400104 	movi	r9,4
 1005da0:	0021883a 	mov	r16,zero
 1005da4:	002b883a 	mov	r21,zero
 1005da8:	01400044 	movi	r5,1
 1005dac:	003f6306 	br	1005b3c <__alt_data_end+0xff49403c>
 1005db0:	02400304 	movi	r9,12
 1005db4:	014000c4 	movi	r5,3
 1005db8:	003f6006 	br	1005b3c <__alt_data_end+0xff49403c>
 1005dbc:	04000434 	movhi	r16,16
 1005dc0:	0009883a 	mov	r4,zero
 1005dc4:	843fffc4 	addi	r16,r16,-1
 1005dc8:	057fffc4 	movi	r21,-1
 1005dcc:	0081ffc4 	movi	r2,2047
 1005dd0:	003f9b06 	br	1005c40 <__alt_data_end+0xff494140>
 1005dd4:	00c00044 	movi	r3,1
 1005dd8:	1887c83a 	sub	r3,r3,r2
 1005ddc:	01000e04 	movi	r4,56
 1005de0:	20c1530e 	bge	r4,r3,1006330 <__divdf3+0x86c>
 1005de4:	9900004c 	andi	r4,r19,1
 1005de8:	0005883a 	mov	r2,zero
 1005dec:	0021883a 	mov	r16,zero
 1005df0:	002b883a 	mov	r21,zero
 1005df4:	003f9206 	br	1005c40 <__alt_data_end+0xff494140>
 1005df8:	8c012e36 	bltu	r17,r16,10062b4 <__divdf3+0x7f0>
 1005dfc:	84412c26 	beq	r16,r17,10062b0 <__divdf3+0x7ec>
 1005e00:	a82f883a 	mov	r23,r21
 1005e04:	18ffffc4 	addi	r3,r3,-1
 1005e08:	002b883a 	mov	r21,zero
 1005e0c:	a004d63a 	srli	r2,r20,24
 1005e10:	8822923a 	slli	r17,r17,8
 1005e14:	a028923a 	slli	r20,r20,8
 1005e18:	8009883a 	mov	r4,r16
 1005e1c:	88acb03a 	or	r22,r17,r2
 1005e20:	dd000015 	stw	r20,0(sp)
 1005e24:	b028d43a 	srli	r20,r22,16
 1005e28:	d8c00215 	stw	r3,8(sp)
 1005e2c:	b4bfffcc 	andi	r18,r22,65535
 1005e30:	a00b883a 	mov	r5,r20
 1005e34:	100515c0 	call	100515c <__udivsi3>
 1005e38:	100b883a 	mov	r5,r2
 1005e3c:	9009883a 	mov	r4,r18
 1005e40:	1023883a 	mov	r17,r2
 1005e44:	10013440 	call	1001344 <__mulsi3>
 1005e48:	8009883a 	mov	r4,r16
 1005e4c:	a00b883a 	mov	r5,r20
 1005e50:	1039883a 	mov	fp,r2
 1005e54:	10051c00 	call	10051c0 <__umodsi3>
 1005e58:	1004943a 	slli	r2,r2,16
 1005e5c:	b808d43a 	srli	r4,r23,16
 1005e60:	d8c00217 	ldw	r3,8(sp)
 1005e64:	2084b03a 	or	r2,r4,r2
 1005e68:	1700062e 	bgeu	r2,fp,1005e84 <__divdf3+0x3c0>
 1005e6c:	1585883a 	add	r2,r2,r22
 1005e70:	893fffc4 	addi	r4,r17,-1
 1005e74:	15811d36 	bltu	r2,r22,10062ec <__divdf3+0x828>
 1005e78:	17011c2e 	bgeu	r2,fp,10062ec <__divdf3+0x828>
 1005e7c:	8c7fff84 	addi	r17,r17,-2
 1005e80:	1585883a 	add	r2,r2,r22
 1005e84:	1739c83a 	sub	fp,r2,fp
 1005e88:	a00b883a 	mov	r5,r20
 1005e8c:	e009883a 	mov	r4,fp
 1005e90:	d8c00215 	stw	r3,8(sp)
 1005e94:	100515c0 	call	100515c <__udivsi3>
 1005e98:	100b883a 	mov	r5,r2
 1005e9c:	9009883a 	mov	r4,r18
 1005ea0:	1021883a 	mov	r16,r2
 1005ea4:	10013440 	call	1001344 <__mulsi3>
 1005ea8:	a00b883a 	mov	r5,r20
 1005eac:	e009883a 	mov	r4,fp
 1005eb0:	d8800415 	stw	r2,16(sp)
 1005eb4:	10051c00 	call	10051c0 <__umodsi3>
 1005eb8:	1004943a 	slli	r2,r2,16
 1005ebc:	da000417 	ldw	r8,16(sp)
 1005ec0:	bdffffcc 	andi	r23,r23,65535
 1005ec4:	b884b03a 	or	r2,r23,r2
 1005ec8:	d8c00217 	ldw	r3,8(sp)
 1005ecc:	1200062e 	bgeu	r2,r8,1005ee8 <__divdf3+0x424>
 1005ed0:	1585883a 	add	r2,r2,r22
 1005ed4:	813fffc4 	addi	r4,r16,-1
 1005ed8:	15810236 	bltu	r2,r22,10062e4 <__divdf3+0x820>
 1005edc:	1201012e 	bgeu	r2,r8,10062e4 <__divdf3+0x820>
 1005ee0:	843fff84 	addi	r16,r16,-2
 1005ee4:	1585883a 	add	r2,r2,r22
 1005ee8:	8822943a 	slli	r17,r17,16
 1005eec:	d9800017 	ldw	r6,0(sp)
 1005ef0:	1211c83a 	sub	r8,r2,r8
 1005ef4:	8c22b03a 	or	r17,r17,r16
 1005ef8:	373fffcc 	andi	fp,r6,65535
 1005efc:	8abfffcc 	andi	r10,r17,65535
 1005f00:	8820d43a 	srli	r16,r17,16
 1005f04:	5009883a 	mov	r4,r10
 1005f08:	e00b883a 	mov	r5,fp
 1005f0c:	302ed43a 	srli	r23,r6,16
 1005f10:	d8c00215 	stw	r3,8(sp)
 1005f14:	da000415 	stw	r8,16(sp)
 1005f18:	da800115 	stw	r10,4(sp)
 1005f1c:	10013440 	call	1001344 <__mulsi3>
 1005f20:	800b883a 	mov	r5,r16
 1005f24:	e009883a 	mov	r4,fp
 1005f28:	d8800515 	stw	r2,20(sp)
 1005f2c:	10013440 	call	1001344 <__mulsi3>
 1005f30:	8009883a 	mov	r4,r16
 1005f34:	b80b883a 	mov	r5,r23
 1005f38:	d8800315 	stw	r2,12(sp)
 1005f3c:	10013440 	call	1001344 <__mulsi3>
 1005f40:	da800117 	ldw	r10,4(sp)
 1005f44:	b80b883a 	mov	r5,r23
 1005f48:	1021883a 	mov	r16,r2
 1005f4c:	5009883a 	mov	r4,r10
 1005f50:	10013440 	call	1001344 <__mulsi3>
 1005f54:	d9c00517 	ldw	r7,20(sp)
 1005f58:	da400317 	ldw	r9,12(sp)
 1005f5c:	d8c00217 	ldw	r3,8(sp)
 1005f60:	3808d43a 	srli	r4,r7,16
 1005f64:	1245883a 	add	r2,r2,r9
 1005f68:	da000417 	ldw	r8,16(sp)
 1005f6c:	2085883a 	add	r2,r4,r2
 1005f70:	1240022e 	bgeu	r2,r9,1005f7c <__divdf3+0x4b8>
 1005f74:	01000074 	movhi	r4,1
 1005f78:	8121883a 	add	r16,r16,r4
 1005f7c:	1008d43a 	srli	r4,r2,16
 1005f80:	1004943a 	slli	r2,r2,16
 1005f84:	39ffffcc 	andi	r7,r7,65535
 1005f88:	2409883a 	add	r4,r4,r16
 1005f8c:	11c5883a 	add	r2,r2,r7
 1005f90:	4100bb36 	bltu	r8,r4,1006280 <__divdf3+0x7bc>
 1005f94:	4100d726 	beq	r8,r4,10062f4 <__divdf3+0x830>
 1005f98:	4109c83a 	sub	r4,r8,r4
 1005f9c:	a8a1c83a 	sub	r16,r21,r2
 1005fa0:	ac2b803a 	cmpltu	r21,r21,r16
 1005fa4:	256bc83a 	sub	r21,r4,r21
 1005fa8:	b540d926 	beq	r22,r21,1006310 <__divdf3+0x84c>
 1005fac:	a00b883a 	mov	r5,r20
 1005fb0:	a809883a 	mov	r4,r21
 1005fb4:	d8c00215 	stw	r3,8(sp)
 1005fb8:	100515c0 	call	100515c <__udivsi3>
 1005fbc:	100b883a 	mov	r5,r2
 1005fc0:	9009883a 	mov	r4,r18
 1005fc4:	d8800515 	stw	r2,20(sp)
 1005fc8:	10013440 	call	1001344 <__mulsi3>
 1005fcc:	a809883a 	mov	r4,r21
 1005fd0:	a00b883a 	mov	r5,r20
 1005fd4:	d8800415 	stw	r2,16(sp)
 1005fd8:	10051c00 	call	10051c0 <__umodsi3>
 1005fdc:	1004943a 	slli	r2,r2,16
 1005fe0:	8008d43a 	srli	r4,r16,16
 1005fe4:	da000417 	ldw	r8,16(sp)
 1005fe8:	d8c00217 	ldw	r3,8(sp)
 1005fec:	2084b03a 	or	r2,r4,r2
 1005ff0:	d9c00517 	ldw	r7,20(sp)
 1005ff4:	1200062e 	bgeu	r2,r8,1006010 <__divdf3+0x54c>
 1005ff8:	1585883a 	add	r2,r2,r22
 1005ffc:	393fffc4 	addi	r4,r7,-1
 1006000:	1580c536 	bltu	r2,r22,1006318 <__divdf3+0x854>
 1006004:	1200c42e 	bgeu	r2,r8,1006318 <__divdf3+0x854>
 1006008:	39ffff84 	addi	r7,r7,-2
 100600c:	1585883a 	add	r2,r2,r22
 1006010:	122bc83a 	sub	r21,r2,r8
 1006014:	a00b883a 	mov	r5,r20
 1006018:	a809883a 	mov	r4,r21
 100601c:	d8c00215 	stw	r3,8(sp)
 1006020:	d9c00515 	stw	r7,20(sp)
 1006024:	100515c0 	call	100515c <__udivsi3>
 1006028:	9009883a 	mov	r4,r18
 100602c:	100b883a 	mov	r5,r2
 1006030:	d8800415 	stw	r2,16(sp)
 1006034:	10013440 	call	1001344 <__mulsi3>
 1006038:	a809883a 	mov	r4,r21
 100603c:	a00b883a 	mov	r5,r20
 1006040:	1025883a 	mov	r18,r2
 1006044:	10051c00 	call	10051c0 <__umodsi3>
 1006048:	1004943a 	slli	r2,r2,16
 100604c:	813fffcc 	andi	r4,r16,65535
 1006050:	d8c00217 	ldw	r3,8(sp)
 1006054:	20a0b03a 	or	r16,r4,r2
 1006058:	d9c00517 	ldw	r7,20(sp)
 100605c:	da000417 	ldw	r8,16(sp)
 1006060:	8480062e 	bgeu	r16,r18,100607c <__divdf3+0x5b8>
 1006064:	85a1883a 	add	r16,r16,r22
 1006068:	40bfffc4 	addi	r2,r8,-1
 100606c:	8580ac36 	bltu	r16,r22,1006320 <__divdf3+0x85c>
 1006070:	8480ab2e 	bgeu	r16,r18,1006320 <__divdf3+0x85c>
 1006074:	423fff84 	addi	r8,r8,-2
 1006078:	85a1883a 	add	r16,r16,r22
 100607c:	3804943a 	slli	r2,r7,16
 1006080:	84a1c83a 	sub	r16,r16,r18
 1006084:	e009883a 	mov	r4,fp
 1006088:	1228b03a 	or	r20,r2,r8
 100608c:	a1ffffcc 	andi	r7,r20,65535
 1006090:	a024d43a 	srli	r18,r20,16
 1006094:	380b883a 	mov	r5,r7
 1006098:	d8c00215 	stw	r3,8(sp)
 100609c:	d9c00515 	stw	r7,20(sp)
 10060a0:	10013440 	call	1001344 <__mulsi3>
 10060a4:	900b883a 	mov	r5,r18
 10060a8:	e009883a 	mov	r4,fp
 10060ac:	102b883a 	mov	r21,r2
 10060b0:	10013440 	call	1001344 <__mulsi3>
 10060b4:	900b883a 	mov	r5,r18
 10060b8:	b809883a 	mov	r4,r23
 10060bc:	1039883a 	mov	fp,r2
 10060c0:	10013440 	call	1001344 <__mulsi3>
 10060c4:	d9c00517 	ldw	r7,20(sp)
 10060c8:	b80b883a 	mov	r5,r23
 10060cc:	1025883a 	mov	r18,r2
 10060d0:	3809883a 	mov	r4,r7
 10060d4:	10013440 	call	1001344 <__mulsi3>
 10060d8:	a808d43a 	srli	r4,r21,16
 10060dc:	1705883a 	add	r2,r2,fp
 10060e0:	d8c00217 	ldw	r3,8(sp)
 10060e4:	2085883a 	add	r2,r4,r2
 10060e8:	1700022e 	bgeu	r2,fp,10060f4 <__divdf3+0x630>
 10060ec:	01000074 	movhi	r4,1
 10060f0:	9125883a 	add	r18,r18,r4
 10060f4:	1008d43a 	srli	r4,r2,16
 10060f8:	1004943a 	slli	r2,r2,16
 10060fc:	ad7fffcc 	andi	r21,r21,65535
 1006100:	2489883a 	add	r4,r4,r18
 1006104:	1545883a 	add	r2,r2,r21
 1006108:	81003836 	bltu	r16,r4,10061ec <__divdf3+0x728>
 100610c:	81003626 	beq	r16,r4,10061e8 <__divdf3+0x724>
 1006110:	a5000054 	ori	r20,r20,1
 1006114:	1880ffc4 	addi	r2,r3,1023
 1006118:	00bf2e0e 	bge	zero,r2,1005dd4 <__alt_data_end+0xff4942d4>
 100611c:	a10001cc 	andi	r4,r20,7
 1006120:	20000726 	beq	r4,zero,1006140 <__divdf3+0x67c>
 1006124:	a10003cc 	andi	r4,r20,15
 1006128:	01400104 	movi	r5,4
 100612c:	21400426 	beq	r4,r5,1006140 <__divdf3+0x67c>
 1006130:	a149883a 	add	r4,r20,r5
 1006134:	2529803a 	cmpltu	r20,r4,r20
 1006138:	8d23883a 	add	r17,r17,r20
 100613c:	2029883a 	mov	r20,r4
 1006140:	8900402c 	andhi	r4,r17,256
 1006144:	20000426 	beq	r4,zero,1006158 <__divdf3+0x694>
 1006148:	18810004 	addi	r2,r3,1024
 100614c:	00ffc034 	movhi	r3,65280
 1006150:	18ffffc4 	addi	r3,r3,-1
 1006154:	88e2703a 	and	r17,r17,r3
 1006158:	00c1ff84 	movi	r3,2046
 100615c:	18beb416 	blt	r3,r2,1005c30 <__alt_data_end+0xff494130>
 1006160:	a028d0fa 	srli	r20,r20,3
 1006164:	882a977a 	slli	r21,r17,29
 1006168:	8820927a 	slli	r16,r17,9
 100616c:	1081ffcc 	andi	r2,r2,2047
 1006170:	ad2ab03a 	or	r21,r21,r20
 1006174:	8020d33a 	srli	r16,r16,12
 1006178:	9900004c 	andi	r4,r19,1
 100617c:	003eb006 	br	1005c40 <__alt_data_end+0xff494140>
 1006180:	8080022c 	andhi	r2,r16,8
 1006184:	10001226 	beq	r2,zero,10061d0 <__divdf3+0x70c>
 1006188:	8880022c 	andhi	r2,r17,8
 100618c:	1000101e 	bne	r2,zero,10061d0 <__divdf3+0x70c>
 1006190:	00800434 	movhi	r2,16
 1006194:	8c000234 	orhi	r16,r17,8
 1006198:	10bfffc4 	addi	r2,r2,-1
 100619c:	b809883a 	mov	r4,r23
 10061a0:	80a0703a 	and	r16,r16,r2
 10061a4:	a02b883a 	mov	r21,r20
 10061a8:	003f0806 	br	1005dcc <__alt_data_end+0xff4942cc>
 10061ac:	008000c4 	movi	r2,3
 10061b0:	3880b126 	beq	r7,r2,1006478 <__divdf3+0x9b4>
 10061b4:	00800044 	movi	r2,1
 10061b8:	38805b1e 	bne	r7,r2,1006328 <__divdf3+0x864>
 10061bc:	e009883a 	mov	r4,fp
 10061c0:	0005883a 	mov	r2,zero
 10061c4:	0021883a 	mov	r16,zero
 10061c8:	002b883a 	mov	r21,zero
 10061cc:	003e9c06 	br	1005c40 <__alt_data_end+0xff494140>
 10061d0:	00800434 	movhi	r2,16
 10061d4:	84000234 	orhi	r16,r16,8
 10061d8:	10bfffc4 	addi	r2,r2,-1
 10061dc:	b009883a 	mov	r4,r22
 10061e0:	80a0703a 	and	r16,r16,r2
 10061e4:	003ef906 	br	1005dcc <__alt_data_end+0xff4942cc>
 10061e8:	103fca26 	beq	r2,zero,1006114 <__alt_data_end+0xff494614>
 10061ec:	b421883a 	add	r16,r22,r16
 10061f0:	a17fffc4 	addi	r5,r20,-1
 10061f4:	8580422e 	bgeu	r16,r22,1006300 <__divdf3+0x83c>
 10061f8:	2829883a 	mov	r20,r5
 10061fc:	813fc41e 	bne	r16,r4,1006110 <__alt_data_end+0xff494610>
 1006200:	d9800017 	ldw	r6,0(sp)
 1006204:	30bfc21e 	bne	r6,r2,1006110 <__alt_data_end+0xff494610>
 1006208:	003fc206 	br	1006114 <__alt_data_end+0xff494614>
 100620c:	143ff604 	addi	r16,r2,-40
 1006210:	8c20983a 	sll	r16,r17,r16
 1006214:	002b883a 	mov	r21,zero
 1006218:	003eb406 	br	1005cec <__alt_data_end+0xff4941ec>
 100621c:	d9800215 	stw	r6,8(sp)
 1006220:	d9c00515 	stw	r7,20(sp)
 1006224:	da000415 	stw	r8,16(sp)
 1006228:	10012e00 	call	10012e0 <__clzsi2>
 100622c:	10800804 	addi	r2,r2,32
 1006230:	da000417 	ldw	r8,16(sp)
 1006234:	d9c00517 	ldw	r7,20(sp)
 1006238:	d9800217 	ldw	r6,8(sp)
 100623c:	003ea106 	br	1005cc4 <__alt_data_end+0xff4941c4>
 1006240:	147ff604 	addi	r17,r2,-40
 1006244:	3462983a 	sll	r17,r6,r17
 1006248:	0029883a 	mov	r20,zero
 100624c:	003ec906 	br	1005d74 <__alt_data_end+0xff494274>
 1006250:	3009883a 	mov	r4,r6
 1006254:	d9400115 	stw	r5,4(sp)
 1006258:	d9800215 	stw	r6,8(sp)
 100625c:	da000415 	stw	r8,16(sp)
 1006260:	da400315 	stw	r9,12(sp)
 1006264:	10012e00 	call	10012e0 <__clzsi2>
 1006268:	10800804 	addi	r2,r2,32
 100626c:	da400317 	ldw	r9,12(sp)
 1006270:	da000417 	ldw	r8,16(sp)
 1006274:	d9800217 	ldw	r6,8(sp)
 1006278:	d9400117 	ldw	r5,4(sp)
 100627c:	003eb306 	br	1005d4c <__alt_data_end+0xff49424c>
 1006280:	d9800017 	ldw	r6,0(sp)
 1006284:	a9ab883a 	add	r21,r21,r6
 1006288:	a98b803a 	cmpltu	r5,r21,r6
 100628c:	2d8b883a 	add	r5,r5,r22
 1006290:	2a11883a 	add	r8,r5,r8
 1006294:	897fffc4 	addi	r5,r17,-1
 1006298:	b2000c2e 	bgeu	r22,r8,10062cc <__divdf3+0x808>
 100629c:	41003f36 	bltu	r8,r4,100639c <__divdf3+0x8d8>
 10062a0:	22006c26 	beq	r4,r8,1006454 <__divdf3+0x990>
 10062a4:	4109c83a 	sub	r4,r8,r4
 10062a8:	2823883a 	mov	r17,r5
 10062ac:	003f3b06 	br	1005f9c <__alt_data_end+0xff49449c>
 10062b0:	ad3ed336 	bltu	r21,r20,1005e00 <__alt_data_end+0xff494300>
 10062b4:	a804d07a 	srli	r2,r21,1
 10062b8:	802e97fa 	slli	r23,r16,31
 10062bc:	a82a97fa 	slli	r21,r21,31
 10062c0:	8020d07a 	srli	r16,r16,1
 10062c4:	b8aeb03a 	or	r23,r23,r2
 10062c8:	003ed006 	br	1005e0c <__alt_data_end+0xff49430c>
 10062cc:	b23ff51e 	bne	r22,r8,10062a4 <__alt_data_end+0xff4947a4>
 10062d0:	d9800017 	ldw	r6,0(sp)
 10062d4:	a9bff12e 	bgeu	r21,r6,100629c <__alt_data_end+0xff49479c>
 10062d8:	b109c83a 	sub	r4,r22,r4
 10062dc:	2823883a 	mov	r17,r5
 10062e0:	003f2e06 	br	1005f9c <__alt_data_end+0xff49449c>
 10062e4:	2021883a 	mov	r16,r4
 10062e8:	003eff06 	br	1005ee8 <__alt_data_end+0xff4943e8>
 10062ec:	2023883a 	mov	r17,r4
 10062f0:	003ee406 	br	1005e84 <__alt_data_end+0xff494384>
 10062f4:	a8bfe236 	bltu	r21,r2,1006280 <__alt_data_end+0xff494780>
 10062f8:	0009883a 	mov	r4,zero
 10062fc:	003f2706 	br	1005f9c <__alt_data_end+0xff49449c>
 1006300:	81002d36 	bltu	r16,r4,10063b8 <__divdf3+0x8f4>
 1006304:	24005626 	beq	r4,r16,1006460 <__divdf3+0x99c>
 1006308:	2829883a 	mov	r20,r5
 100630c:	003f8006 	br	1006110 <__alt_data_end+0xff494610>
 1006310:	053fffc4 	movi	r20,-1
 1006314:	003f7f06 	br	1006114 <__alt_data_end+0xff494614>
 1006318:	200f883a 	mov	r7,r4
 100631c:	003f3c06 	br	1006010 <__alt_data_end+0xff494510>
 1006320:	1011883a 	mov	r8,r2
 1006324:	003f5506 	br	100607c <__alt_data_end+0xff49457c>
 1006328:	e027883a 	mov	r19,fp
 100632c:	003f7906 	br	1006114 <__alt_data_end+0xff494614>
 1006330:	010007c4 	movi	r4,31
 1006334:	20c02816 	blt	r4,r3,10063d8 <__divdf3+0x914>
 1006338:	00800804 	movi	r2,32
 100633c:	10c5c83a 	sub	r2,r2,r3
 1006340:	888a983a 	sll	r5,r17,r2
 1006344:	a0c8d83a 	srl	r4,r20,r3
 1006348:	a084983a 	sll	r2,r20,r2
 100634c:	88e2d83a 	srl	r17,r17,r3
 1006350:	2906b03a 	or	r3,r5,r4
 1006354:	1004c03a 	cmpne	r2,r2,zero
 1006358:	1886b03a 	or	r3,r3,r2
 100635c:	188001cc 	andi	r2,r3,7
 1006360:	10000726 	beq	r2,zero,1006380 <__divdf3+0x8bc>
 1006364:	188003cc 	andi	r2,r3,15
 1006368:	01000104 	movi	r4,4
 100636c:	11000426 	beq	r2,r4,1006380 <__divdf3+0x8bc>
 1006370:	1805883a 	mov	r2,r3
 1006374:	10c00104 	addi	r3,r2,4
 1006378:	1885803a 	cmpltu	r2,r3,r2
 100637c:	88a3883a 	add	r17,r17,r2
 1006380:	8880202c 	andhi	r2,r17,128
 1006384:	10002926 	beq	r2,zero,100642c <__divdf3+0x968>
 1006388:	9900004c 	andi	r4,r19,1
 100638c:	00800044 	movi	r2,1
 1006390:	0021883a 	mov	r16,zero
 1006394:	002b883a 	mov	r21,zero
 1006398:	003e2906 	br	1005c40 <__alt_data_end+0xff494140>
 100639c:	d9800017 	ldw	r6,0(sp)
 10063a0:	8c7fff84 	addi	r17,r17,-2
 10063a4:	a9ab883a 	add	r21,r21,r6
 10063a8:	a98b803a 	cmpltu	r5,r21,r6
 10063ac:	2d8b883a 	add	r5,r5,r22
 10063b0:	2a11883a 	add	r8,r5,r8
 10063b4:	003ef806 	br	1005f98 <__alt_data_end+0xff494498>
 10063b8:	d9800017 	ldw	r6,0(sp)
 10063bc:	318f883a 	add	r7,r6,r6
 10063c0:	398b803a 	cmpltu	r5,r7,r6
 10063c4:	2d8d883a 	add	r6,r5,r22
 10063c8:	81a1883a 	add	r16,r16,r6
 10063cc:	a17fff84 	addi	r5,r20,-2
 10063d0:	d9c00015 	stw	r7,0(sp)
 10063d4:	003f8806 	br	10061f8 <__alt_data_end+0xff4946f8>
 10063d8:	013ff844 	movi	r4,-31
 10063dc:	2085c83a 	sub	r2,r4,r2
 10063e0:	8888d83a 	srl	r4,r17,r2
 10063e4:	00800804 	movi	r2,32
 10063e8:	18802126 	beq	r3,r2,1006470 <__divdf3+0x9ac>
 10063ec:	04001004 	movi	r16,64
 10063f0:	80c7c83a 	sub	r3,r16,r3
 10063f4:	88e0983a 	sll	r16,r17,r3
 10063f8:	8504b03a 	or	r2,r16,r20
 10063fc:	1004c03a 	cmpne	r2,r2,zero
 1006400:	2084b03a 	or	r2,r4,r2
 1006404:	144001cc 	andi	r17,r2,7
 1006408:	88000d1e 	bne	r17,zero,1006440 <__divdf3+0x97c>
 100640c:	0021883a 	mov	r16,zero
 1006410:	102ad0fa 	srli	r21,r2,3
 1006414:	9900004c 	andi	r4,r19,1
 1006418:	0005883a 	mov	r2,zero
 100641c:	ac6ab03a 	or	r21,r21,r17
 1006420:	003e0706 	br	1005c40 <__alt_data_end+0xff494140>
 1006424:	1007883a 	mov	r3,r2
 1006428:	0023883a 	mov	r17,zero
 100642c:	8820927a 	slli	r16,r17,9
 1006430:	1805883a 	mov	r2,r3
 1006434:	8822977a 	slli	r17,r17,29
 1006438:	8020d33a 	srli	r16,r16,12
 100643c:	003ff406 	br	1006410 <__alt_data_end+0xff494910>
 1006440:	10c003cc 	andi	r3,r2,15
 1006444:	01000104 	movi	r4,4
 1006448:	193ff626 	beq	r3,r4,1006424 <__alt_data_end+0xff494924>
 100644c:	0023883a 	mov	r17,zero
 1006450:	003fc806 	br	1006374 <__alt_data_end+0xff494874>
 1006454:	a8bfd136 	bltu	r21,r2,100639c <__alt_data_end+0xff49489c>
 1006458:	2823883a 	mov	r17,r5
 100645c:	003fa606 	br	10062f8 <__alt_data_end+0xff4947f8>
 1006460:	d9800017 	ldw	r6,0(sp)
 1006464:	30bfd436 	bltu	r6,r2,10063b8 <__alt_data_end+0xff4948b8>
 1006468:	2829883a 	mov	r20,r5
 100646c:	003f6406 	br	1006200 <__alt_data_end+0xff494700>
 1006470:	0021883a 	mov	r16,zero
 1006474:	003fe006 	br	10063f8 <__alt_data_end+0xff4948f8>
 1006478:	00800434 	movhi	r2,16
 100647c:	8c000234 	orhi	r16,r17,8
 1006480:	10bfffc4 	addi	r2,r2,-1
 1006484:	e009883a 	mov	r4,fp
 1006488:	80a0703a 	and	r16,r16,r2
 100648c:	a02b883a 	mov	r21,r20
 1006490:	003e4e06 	br	1005dcc <__alt_data_end+0xff4942cc>

01006494 <__eqdf2>:
 1006494:	2804d53a 	srli	r2,r5,20
 1006498:	3806d53a 	srli	r3,r7,20
 100649c:	02000434 	movhi	r8,16
 10064a0:	423fffc4 	addi	r8,r8,-1
 10064a4:	1081ffcc 	andi	r2,r2,2047
 10064a8:	0281ffc4 	movi	r10,2047
 10064ac:	2a12703a 	and	r9,r5,r8
 10064b0:	18c1ffcc 	andi	r3,r3,2047
 10064b4:	3a10703a 	and	r8,r7,r8
 10064b8:	280ad7fa 	srli	r5,r5,31
 10064bc:	380ed7fa 	srli	r7,r7,31
 10064c0:	12801026 	beq	r2,r10,1006504 <__eqdf2+0x70>
 10064c4:	0281ffc4 	movi	r10,2047
 10064c8:	1a800a26 	beq	r3,r10,10064f4 <__eqdf2+0x60>
 10064cc:	10c00226 	beq	r2,r3,10064d8 <__eqdf2+0x44>
 10064d0:	00800044 	movi	r2,1
 10064d4:	f800283a 	ret
 10064d8:	4a3ffd1e 	bne	r9,r8,10064d0 <__alt_data_end+0xff4949d0>
 10064dc:	21bffc1e 	bne	r4,r6,10064d0 <__alt_data_end+0xff4949d0>
 10064e0:	29c00c26 	beq	r5,r7,1006514 <__eqdf2+0x80>
 10064e4:	103ffa1e 	bne	r2,zero,10064d0 <__alt_data_end+0xff4949d0>
 10064e8:	2244b03a 	or	r2,r4,r9
 10064ec:	1004c03a 	cmpne	r2,r2,zero
 10064f0:	f800283a 	ret
 10064f4:	3214b03a 	or	r10,r6,r8
 10064f8:	503ff426 	beq	r10,zero,10064cc <__alt_data_end+0xff4949cc>
 10064fc:	00800044 	movi	r2,1
 1006500:	f800283a 	ret
 1006504:	2254b03a 	or	r10,r4,r9
 1006508:	503fee26 	beq	r10,zero,10064c4 <__alt_data_end+0xff4949c4>
 100650c:	00800044 	movi	r2,1
 1006510:	f800283a 	ret
 1006514:	0005883a 	mov	r2,zero
 1006518:	f800283a 	ret

0100651c <__gedf2>:
 100651c:	2804d53a 	srli	r2,r5,20
 1006520:	3806d53a 	srli	r3,r7,20
 1006524:	02000434 	movhi	r8,16
 1006528:	423fffc4 	addi	r8,r8,-1
 100652c:	1081ffcc 	andi	r2,r2,2047
 1006530:	0241ffc4 	movi	r9,2047
 1006534:	2a14703a 	and	r10,r5,r8
 1006538:	18c1ffcc 	andi	r3,r3,2047
 100653c:	3a10703a 	and	r8,r7,r8
 1006540:	280ad7fa 	srli	r5,r5,31
 1006544:	380ed7fa 	srli	r7,r7,31
 1006548:	12401d26 	beq	r2,r9,10065c0 <__gedf2+0xa4>
 100654c:	0241ffc4 	movi	r9,2047
 1006550:	1a401226 	beq	r3,r9,100659c <__gedf2+0x80>
 1006554:	1000081e 	bne	r2,zero,1006578 <__gedf2+0x5c>
 1006558:	2296b03a 	or	r11,r4,r10
 100655c:	5813003a 	cmpeq	r9,r11,zero
 1006560:	1800091e 	bne	r3,zero,1006588 <__gedf2+0x6c>
 1006564:	3218b03a 	or	r12,r6,r8
 1006568:	6000071e 	bne	r12,zero,1006588 <__gedf2+0x6c>
 100656c:	0005883a 	mov	r2,zero
 1006570:	5800101e 	bne	r11,zero,10065b4 <__gedf2+0x98>
 1006574:	f800283a 	ret
 1006578:	18000c1e 	bne	r3,zero,10065ac <__gedf2+0x90>
 100657c:	3212b03a 	or	r9,r6,r8
 1006580:	48000c26 	beq	r9,zero,10065b4 <__gedf2+0x98>
 1006584:	0013883a 	mov	r9,zero
 1006588:	39c03fcc 	andi	r7,r7,255
 100658c:	48000826 	beq	r9,zero,10065b0 <__gedf2+0x94>
 1006590:	38000926 	beq	r7,zero,10065b8 <__gedf2+0x9c>
 1006594:	00800044 	movi	r2,1
 1006598:	f800283a 	ret
 100659c:	3212b03a 	or	r9,r6,r8
 10065a0:	483fec26 	beq	r9,zero,1006554 <__alt_data_end+0xff494a54>
 10065a4:	00bfff84 	movi	r2,-2
 10065a8:	f800283a 	ret
 10065ac:	39c03fcc 	andi	r7,r7,255
 10065b0:	29c00626 	beq	r5,r7,10065cc <__gedf2+0xb0>
 10065b4:	283ff726 	beq	r5,zero,1006594 <__alt_data_end+0xff494a94>
 10065b8:	00bfffc4 	movi	r2,-1
 10065bc:	f800283a 	ret
 10065c0:	2292b03a 	or	r9,r4,r10
 10065c4:	483fe126 	beq	r9,zero,100654c <__alt_data_end+0xff494a4c>
 10065c8:	003ff606 	br	10065a4 <__alt_data_end+0xff494aa4>
 10065cc:	18bff916 	blt	r3,r2,10065b4 <__alt_data_end+0xff494ab4>
 10065d0:	10c00316 	blt	r2,r3,10065e0 <__gedf2+0xc4>
 10065d4:	42bff736 	bltu	r8,r10,10065b4 <__alt_data_end+0xff494ab4>
 10065d8:	52000326 	beq	r10,r8,10065e8 <__gedf2+0xcc>
 10065dc:	5200042e 	bgeu	r10,r8,10065f0 <__gedf2+0xd4>
 10065e0:	283fec1e 	bne	r5,zero,1006594 <__alt_data_end+0xff494a94>
 10065e4:	003ff406 	br	10065b8 <__alt_data_end+0xff494ab8>
 10065e8:	313ff236 	bltu	r6,r4,10065b4 <__alt_data_end+0xff494ab4>
 10065ec:	21bffc36 	bltu	r4,r6,10065e0 <__alt_data_end+0xff494ae0>
 10065f0:	0005883a 	mov	r2,zero
 10065f4:	f800283a 	ret

010065f8 <__ledf2>:
 10065f8:	2804d53a 	srli	r2,r5,20
 10065fc:	3810d53a 	srli	r8,r7,20
 1006600:	00c00434 	movhi	r3,16
 1006604:	18ffffc4 	addi	r3,r3,-1
 1006608:	1081ffcc 	andi	r2,r2,2047
 100660c:	0241ffc4 	movi	r9,2047
 1006610:	28d4703a 	and	r10,r5,r3
 1006614:	4201ffcc 	andi	r8,r8,2047
 1006618:	38c6703a 	and	r3,r7,r3
 100661c:	280ad7fa 	srli	r5,r5,31
 1006620:	380ed7fa 	srli	r7,r7,31
 1006624:	12401f26 	beq	r2,r9,10066a4 <__ledf2+0xac>
 1006628:	0241ffc4 	movi	r9,2047
 100662c:	42401426 	beq	r8,r9,1006680 <__ledf2+0x88>
 1006630:	1000091e 	bne	r2,zero,1006658 <__ledf2+0x60>
 1006634:	2296b03a 	or	r11,r4,r10
 1006638:	5813003a 	cmpeq	r9,r11,zero
 100663c:	29403fcc 	andi	r5,r5,255
 1006640:	40000a1e 	bne	r8,zero,100666c <__ledf2+0x74>
 1006644:	30d8b03a 	or	r12,r6,r3
 1006648:	6000081e 	bne	r12,zero,100666c <__ledf2+0x74>
 100664c:	0005883a 	mov	r2,zero
 1006650:	5800111e 	bne	r11,zero,1006698 <__ledf2+0xa0>
 1006654:	f800283a 	ret
 1006658:	29403fcc 	andi	r5,r5,255
 100665c:	40000c1e 	bne	r8,zero,1006690 <__ledf2+0x98>
 1006660:	30d2b03a 	or	r9,r6,r3
 1006664:	48000c26 	beq	r9,zero,1006698 <__ledf2+0xa0>
 1006668:	0013883a 	mov	r9,zero
 100666c:	39c03fcc 	andi	r7,r7,255
 1006670:	48000826 	beq	r9,zero,1006694 <__ledf2+0x9c>
 1006674:	38001126 	beq	r7,zero,10066bc <__ledf2+0xc4>
 1006678:	00800044 	movi	r2,1
 100667c:	f800283a 	ret
 1006680:	30d2b03a 	or	r9,r6,r3
 1006684:	483fea26 	beq	r9,zero,1006630 <__alt_data_end+0xff494b30>
 1006688:	00800084 	movi	r2,2
 100668c:	f800283a 	ret
 1006690:	39c03fcc 	andi	r7,r7,255
 1006694:	39400726 	beq	r7,r5,10066b4 <__ledf2+0xbc>
 1006698:	2800081e 	bne	r5,zero,10066bc <__ledf2+0xc4>
 100669c:	00800044 	movi	r2,1
 10066a0:	f800283a 	ret
 10066a4:	2292b03a 	or	r9,r4,r10
 10066a8:	483fdf26 	beq	r9,zero,1006628 <__alt_data_end+0xff494b28>
 10066ac:	00800084 	movi	r2,2
 10066b0:	f800283a 	ret
 10066b4:	4080030e 	bge	r8,r2,10066c4 <__ledf2+0xcc>
 10066b8:	383fef26 	beq	r7,zero,1006678 <__alt_data_end+0xff494b78>
 10066bc:	00bfffc4 	movi	r2,-1
 10066c0:	f800283a 	ret
 10066c4:	123feb16 	blt	r2,r8,1006674 <__alt_data_end+0xff494b74>
 10066c8:	1abff336 	bltu	r3,r10,1006698 <__alt_data_end+0xff494b98>
 10066cc:	50c00326 	beq	r10,r3,10066dc <__ledf2+0xe4>
 10066d0:	50c0042e 	bgeu	r10,r3,10066e4 <__ledf2+0xec>
 10066d4:	283fe81e 	bne	r5,zero,1006678 <__alt_data_end+0xff494b78>
 10066d8:	003ff806 	br	10066bc <__alt_data_end+0xff494bbc>
 10066dc:	313fee36 	bltu	r6,r4,1006698 <__alt_data_end+0xff494b98>
 10066e0:	21bffc36 	bltu	r4,r6,10066d4 <__alt_data_end+0xff494bd4>
 10066e4:	0005883a 	mov	r2,zero
 10066e8:	f800283a 	ret

010066ec <__muldf3>:
 10066ec:	deffee04 	addi	sp,sp,-72
 10066f0:	dd000c15 	stw	r20,48(sp)
 10066f4:	2828d53a 	srli	r20,r5,20
 10066f8:	ddc00f15 	stw	r23,60(sp)
 10066fc:	282ed7fa 	srli	r23,r5,31
 1006700:	dc000815 	stw	r16,32(sp)
 1006704:	04000434 	movhi	r16,16
 1006708:	dcc00b15 	stw	r19,44(sp)
 100670c:	843fffc4 	addi	r16,r16,-1
 1006710:	dfc01115 	stw	ra,68(sp)
 1006714:	df001015 	stw	fp,64(sp)
 1006718:	dd800e15 	stw	r22,56(sp)
 100671c:	dd400d15 	stw	r21,52(sp)
 1006720:	dc800a15 	stw	r18,40(sp)
 1006724:	dc400915 	stw	r17,36(sp)
 1006728:	a501ffcc 	andi	r20,r20,2047
 100672c:	2c20703a 	and	r16,r5,r16
 1006730:	b827883a 	mov	r19,r23
 1006734:	ba403fcc 	andi	r9,r23,255
 1006738:	a0006026 	beq	r20,zero,10068bc <__muldf3+0x1d0>
 100673c:	0081ffc4 	movi	r2,2047
 1006740:	202d883a 	mov	r22,r4
 1006744:	a0803626 	beq	r20,r2,1006820 <__muldf3+0x134>
 1006748:	84000434 	orhi	r16,r16,16
 100674c:	200ad77a 	srli	r5,r4,29
 1006750:	800490fa 	slli	r2,r16,3
 1006754:	202c90fa 	slli	r22,r4,3
 1006758:	a53f0044 	addi	r20,r20,-1023
 100675c:	28a0b03a 	or	r16,r5,r2
 1006760:	002b883a 	mov	r21,zero
 1006764:	000b883a 	mov	r5,zero
 1006768:	3804d53a 	srli	r2,r7,20
 100676c:	3838d7fa 	srli	fp,r7,31
 1006770:	04400434 	movhi	r17,16
 1006774:	8c7fffc4 	addi	r17,r17,-1
 1006778:	1081ffcc 	andi	r2,r2,2047
 100677c:	3025883a 	mov	r18,r6
 1006780:	3c62703a 	and	r17,r7,r17
 1006784:	e2803fcc 	andi	r10,fp,255
 1006788:	10006d26 	beq	r2,zero,1006940 <__muldf3+0x254>
 100678c:	00c1ffc4 	movi	r3,2047
 1006790:	10c06526 	beq	r2,r3,1006928 <__muldf3+0x23c>
 1006794:	8c400434 	orhi	r17,r17,16
 1006798:	300ed77a 	srli	r7,r6,29
 100679c:	880690fa 	slli	r3,r17,3
 10067a0:	302490fa 	slli	r18,r6,3
 10067a4:	10bf0044 	addi	r2,r2,-1023
 10067a8:	38e2b03a 	or	r17,r7,r3
 10067ac:	000f883a 	mov	r7,zero
 10067b0:	a087883a 	add	r3,r20,r2
 10067b4:	010003c4 	movi	r4,15
 10067b8:	3d44b03a 	or	r2,r7,r21
 10067bc:	e5ccf03a 	xor	r6,fp,r23
 10067c0:	1a000044 	addi	r8,r3,1
 10067c4:	20809b36 	bltu	r4,r2,1006a34 <__muldf3+0x348>
 10067c8:	100490ba 	slli	r2,r2,2
 10067cc:	01004034 	movhi	r4,256
 10067d0:	2119f804 	addi	r4,r4,26592
 10067d4:	1105883a 	add	r2,r2,r4
 10067d8:	10800017 	ldw	r2,0(r2)
 10067dc:	1000683a 	jmp	r2
 10067e0:	01006a34 	movhi	r4,424
 10067e4:	01006840 	call	100684 <__alt_mem_onchip_mem-0xeff97c>
 10067e8:	01006840 	call	100684 <__alt_mem_onchip_mem-0xeff97c>
 10067ec:	0100683c 	xorhi	r4,zero,416
 10067f0:	01006a10 	cmplti	r4,zero,424
 10067f4:	01006a10 	cmplti	r4,zero,424
 10067f8:	010069f8 	rdprs	r4,zero,423
 10067fc:	0100683c 	xorhi	r4,zero,416
 1006800:	01006a10 	cmplti	r4,zero,424
 1006804:	010069f8 	rdprs	r4,zero,423
 1006808:	01006a10 	cmplti	r4,zero,424
 100680c:	0100683c 	xorhi	r4,zero,416
 1006810:	01006a20 	cmpeqi	r4,zero,424
 1006814:	01006a20 	cmpeqi	r4,zero,424
 1006818:	01006a20 	cmpeqi	r4,zero,424
 100681c:	01006d80 	call	1006d8 <__alt_mem_onchip_mem-0xeff928>
 1006820:	2404b03a 	or	r2,r4,r16
 1006824:	1000711e 	bne	r2,zero,10069ec <__muldf3+0x300>
 1006828:	05400204 	movi	r21,8
 100682c:	0021883a 	mov	r16,zero
 1006830:	002d883a 	mov	r22,zero
 1006834:	01400084 	movi	r5,2
 1006838:	003fcb06 	br	1006768 <__alt_data_end+0xff494c68>
 100683c:	500d883a 	mov	r6,r10
 1006840:	00800084 	movi	r2,2
 1006844:	38805926 	beq	r7,r2,10069ac <__muldf3+0x2c0>
 1006848:	008000c4 	movi	r2,3
 100684c:	3881bb26 	beq	r7,r2,1006f3c <__muldf3+0x850>
 1006850:	00800044 	movi	r2,1
 1006854:	3881961e 	bne	r7,r2,1006eb0 <__muldf3+0x7c4>
 1006858:	3027883a 	mov	r19,r6
 100685c:	0005883a 	mov	r2,zero
 1006860:	0021883a 	mov	r16,zero
 1006864:	002d883a 	mov	r22,zero
 1006868:	1004953a 	slli	r2,r2,20
 100686c:	98c03fcc 	andi	r3,r19,255
 1006870:	04400434 	movhi	r17,16
 1006874:	8c7fffc4 	addi	r17,r17,-1
 1006878:	180697fa 	slli	r3,r3,31
 100687c:	8460703a 	and	r16,r16,r17
 1006880:	80a0b03a 	or	r16,r16,r2
 1006884:	80c6b03a 	or	r3,r16,r3
 1006888:	b005883a 	mov	r2,r22
 100688c:	dfc01117 	ldw	ra,68(sp)
 1006890:	df001017 	ldw	fp,64(sp)
 1006894:	ddc00f17 	ldw	r23,60(sp)
 1006898:	dd800e17 	ldw	r22,56(sp)
 100689c:	dd400d17 	ldw	r21,52(sp)
 10068a0:	dd000c17 	ldw	r20,48(sp)
 10068a4:	dcc00b17 	ldw	r19,44(sp)
 10068a8:	dc800a17 	ldw	r18,40(sp)
 10068ac:	dc400917 	ldw	r17,36(sp)
 10068b0:	dc000817 	ldw	r16,32(sp)
 10068b4:	dec01204 	addi	sp,sp,72
 10068b8:	f800283a 	ret
 10068bc:	2404b03a 	or	r2,r4,r16
 10068c0:	202b883a 	mov	r21,r4
 10068c4:	10004426 	beq	r2,zero,10069d8 <__muldf3+0x2ec>
 10068c8:	80015126 	beq	r16,zero,1006e10 <__muldf3+0x724>
 10068cc:	8009883a 	mov	r4,r16
 10068d0:	d9800715 	stw	r6,28(sp)
 10068d4:	d9c00215 	stw	r7,8(sp)
 10068d8:	da400415 	stw	r9,16(sp)
 10068dc:	10012e00 	call	10012e0 <__clzsi2>
 10068e0:	d9800717 	ldw	r6,28(sp)
 10068e4:	d9c00217 	ldw	r7,8(sp)
 10068e8:	da400417 	ldw	r9,16(sp)
 10068ec:	113ffd44 	addi	r4,r2,-11
 10068f0:	00c00704 	movi	r3,28
 10068f4:	19014216 	blt	r3,r4,1006e00 <__muldf3+0x714>
 10068f8:	00c00744 	movi	r3,29
 10068fc:	15bffe04 	addi	r22,r2,-8
 1006900:	1907c83a 	sub	r3,r3,r4
 1006904:	85a0983a 	sll	r16,r16,r22
 1006908:	a8c6d83a 	srl	r3,r21,r3
 100690c:	adac983a 	sll	r22,r21,r22
 1006910:	1c20b03a 	or	r16,r3,r16
 1006914:	1080fcc4 	addi	r2,r2,1011
 1006918:	00a9c83a 	sub	r20,zero,r2
 100691c:	002b883a 	mov	r21,zero
 1006920:	000b883a 	mov	r5,zero
 1006924:	003f9006 	br	1006768 <__alt_data_end+0xff494c68>
 1006928:	3446b03a 	or	r3,r6,r17
 100692c:	1800281e 	bne	r3,zero,10069d0 <__muldf3+0x2e4>
 1006930:	0023883a 	mov	r17,zero
 1006934:	0025883a 	mov	r18,zero
 1006938:	01c00084 	movi	r7,2
 100693c:	003f9c06 	br	10067b0 <__alt_data_end+0xff494cb0>
 1006940:	3446b03a 	or	r3,r6,r17
 1006944:	18001e26 	beq	r3,zero,10069c0 <__muldf3+0x2d4>
 1006948:	88012126 	beq	r17,zero,1006dd0 <__muldf3+0x6e4>
 100694c:	8809883a 	mov	r4,r17
 1006950:	d9400215 	stw	r5,8(sp)
 1006954:	d9800715 	stw	r6,28(sp)
 1006958:	da400415 	stw	r9,16(sp)
 100695c:	da800315 	stw	r10,12(sp)
 1006960:	10012e00 	call	10012e0 <__clzsi2>
 1006964:	d9400217 	ldw	r5,8(sp)
 1006968:	d9800717 	ldw	r6,28(sp)
 100696c:	da400417 	ldw	r9,16(sp)
 1006970:	da800317 	ldw	r10,12(sp)
 1006974:	113ffd44 	addi	r4,r2,-11
 1006978:	00c00704 	movi	r3,28
 100697c:	19011016 	blt	r3,r4,1006dc0 <__muldf3+0x6d4>
 1006980:	00c00744 	movi	r3,29
 1006984:	14bffe04 	addi	r18,r2,-8
 1006988:	1907c83a 	sub	r3,r3,r4
 100698c:	8ca2983a 	sll	r17,r17,r18
 1006990:	30c6d83a 	srl	r3,r6,r3
 1006994:	34a4983a 	sll	r18,r6,r18
 1006998:	1c62b03a 	or	r17,r3,r17
 100699c:	1080fcc4 	addi	r2,r2,1011
 10069a0:	0085c83a 	sub	r2,zero,r2
 10069a4:	000f883a 	mov	r7,zero
 10069a8:	003f8106 	br	10067b0 <__alt_data_end+0xff494cb0>
 10069ac:	3027883a 	mov	r19,r6
 10069b0:	0081ffc4 	movi	r2,2047
 10069b4:	0021883a 	mov	r16,zero
 10069b8:	002d883a 	mov	r22,zero
 10069bc:	003faa06 	br	1006868 <__alt_data_end+0xff494d68>
 10069c0:	0023883a 	mov	r17,zero
 10069c4:	0025883a 	mov	r18,zero
 10069c8:	01c00044 	movi	r7,1
 10069cc:	003f7806 	br	10067b0 <__alt_data_end+0xff494cb0>
 10069d0:	01c000c4 	movi	r7,3
 10069d4:	003f7606 	br	10067b0 <__alt_data_end+0xff494cb0>
 10069d8:	05400104 	movi	r21,4
 10069dc:	0021883a 	mov	r16,zero
 10069e0:	002d883a 	mov	r22,zero
 10069e4:	01400044 	movi	r5,1
 10069e8:	003f5f06 	br	1006768 <__alt_data_end+0xff494c68>
 10069ec:	05400304 	movi	r21,12
 10069f0:	014000c4 	movi	r5,3
 10069f4:	003f5c06 	br	1006768 <__alt_data_end+0xff494c68>
 10069f8:	04000434 	movhi	r16,16
 10069fc:	0027883a 	mov	r19,zero
 1006a00:	843fffc4 	addi	r16,r16,-1
 1006a04:	05bfffc4 	movi	r22,-1
 1006a08:	0081ffc4 	movi	r2,2047
 1006a0c:	003f9606 	br	1006868 <__alt_data_end+0xff494d68>
 1006a10:	8023883a 	mov	r17,r16
 1006a14:	b025883a 	mov	r18,r22
 1006a18:	280f883a 	mov	r7,r5
 1006a1c:	003f8806 	br	1006840 <__alt_data_end+0xff494d40>
 1006a20:	8023883a 	mov	r17,r16
 1006a24:	b025883a 	mov	r18,r22
 1006a28:	480d883a 	mov	r6,r9
 1006a2c:	280f883a 	mov	r7,r5
 1006a30:	003f8306 	br	1006840 <__alt_data_end+0xff494d40>
 1006a34:	b026d43a 	srli	r19,r22,16
 1006a38:	902ed43a 	srli	r23,r18,16
 1006a3c:	b5bfffcc 	andi	r22,r22,65535
 1006a40:	94bfffcc 	andi	r18,r18,65535
 1006a44:	b00b883a 	mov	r5,r22
 1006a48:	9009883a 	mov	r4,r18
 1006a4c:	d8c00515 	stw	r3,20(sp)
 1006a50:	d9800715 	stw	r6,28(sp)
 1006a54:	da000615 	stw	r8,24(sp)
 1006a58:	10013440 	call	1001344 <__mulsi3>
 1006a5c:	980b883a 	mov	r5,r19
 1006a60:	9009883a 	mov	r4,r18
 1006a64:	1029883a 	mov	r20,r2
 1006a68:	10013440 	call	1001344 <__mulsi3>
 1006a6c:	b80b883a 	mov	r5,r23
 1006a70:	9809883a 	mov	r4,r19
 1006a74:	102b883a 	mov	r21,r2
 1006a78:	10013440 	call	1001344 <__mulsi3>
 1006a7c:	b809883a 	mov	r4,r23
 1006a80:	b00b883a 	mov	r5,r22
 1006a84:	1039883a 	mov	fp,r2
 1006a88:	10013440 	call	1001344 <__mulsi3>
 1006a8c:	a008d43a 	srli	r4,r20,16
 1006a90:	1545883a 	add	r2,r2,r21
 1006a94:	d8c00517 	ldw	r3,20(sp)
 1006a98:	2085883a 	add	r2,r4,r2
 1006a9c:	d9800717 	ldw	r6,28(sp)
 1006aa0:	da000617 	ldw	r8,24(sp)
 1006aa4:	1540022e 	bgeu	r2,r21,1006ab0 <__muldf3+0x3c4>
 1006aa8:	01000074 	movhi	r4,1
 1006aac:	e139883a 	add	fp,fp,r4
 1006ab0:	100e943a 	slli	r7,r2,16
 1006ab4:	1004d43a 	srli	r2,r2,16
 1006ab8:	882ad43a 	srli	r21,r17,16
 1006abc:	a53fffcc 	andi	r20,r20,65535
 1006ac0:	8c7fffcc 	andi	r17,r17,65535
 1006ac4:	3d29883a 	add	r20,r7,r20
 1006ac8:	b00b883a 	mov	r5,r22
 1006acc:	8809883a 	mov	r4,r17
 1006ad0:	d8c00515 	stw	r3,20(sp)
 1006ad4:	d9800715 	stw	r6,28(sp)
 1006ad8:	da000615 	stw	r8,24(sp)
 1006adc:	dd000115 	stw	r20,4(sp)
 1006ae0:	d8800015 	stw	r2,0(sp)
 1006ae4:	10013440 	call	1001344 <__mulsi3>
 1006ae8:	980b883a 	mov	r5,r19
 1006aec:	8809883a 	mov	r4,r17
 1006af0:	d8800215 	stw	r2,8(sp)
 1006af4:	10013440 	call	1001344 <__mulsi3>
 1006af8:	9809883a 	mov	r4,r19
 1006afc:	a80b883a 	mov	r5,r21
 1006b00:	1029883a 	mov	r20,r2
 1006b04:	10013440 	call	1001344 <__mulsi3>
 1006b08:	b00b883a 	mov	r5,r22
 1006b0c:	a809883a 	mov	r4,r21
 1006b10:	d8800415 	stw	r2,16(sp)
 1006b14:	10013440 	call	1001344 <__mulsi3>
 1006b18:	d9c00217 	ldw	r7,8(sp)
 1006b1c:	1505883a 	add	r2,r2,r20
 1006b20:	d8c00517 	ldw	r3,20(sp)
 1006b24:	3826d43a 	srli	r19,r7,16
 1006b28:	d9800717 	ldw	r6,28(sp)
 1006b2c:	da000617 	ldw	r8,24(sp)
 1006b30:	9885883a 	add	r2,r19,r2
 1006b34:	da400417 	ldw	r9,16(sp)
 1006b38:	1500022e 	bgeu	r2,r20,1006b44 <__muldf3+0x458>
 1006b3c:	01000074 	movhi	r4,1
 1006b40:	4913883a 	add	r9,r9,r4
 1006b44:	1028d43a 	srli	r20,r2,16
 1006b48:	1004943a 	slli	r2,r2,16
 1006b4c:	802cd43a 	srli	r22,r16,16
 1006b50:	843fffcc 	andi	r16,r16,65535
 1006b54:	3cffffcc 	andi	r19,r7,65535
 1006b58:	9009883a 	mov	r4,r18
 1006b5c:	800b883a 	mov	r5,r16
 1006b60:	a269883a 	add	r20,r20,r9
 1006b64:	d8c00515 	stw	r3,20(sp)
 1006b68:	d9800715 	stw	r6,28(sp)
 1006b6c:	da000615 	stw	r8,24(sp)
 1006b70:	14e7883a 	add	r19,r2,r19
 1006b74:	10013440 	call	1001344 <__mulsi3>
 1006b78:	9009883a 	mov	r4,r18
 1006b7c:	b00b883a 	mov	r5,r22
 1006b80:	d8800315 	stw	r2,12(sp)
 1006b84:	10013440 	call	1001344 <__mulsi3>
 1006b88:	b809883a 	mov	r4,r23
 1006b8c:	b00b883a 	mov	r5,r22
 1006b90:	d8800215 	stw	r2,8(sp)
 1006b94:	10013440 	call	1001344 <__mulsi3>
 1006b98:	b80b883a 	mov	r5,r23
 1006b9c:	8009883a 	mov	r4,r16
 1006ba0:	d8800415 	stw	r2,16(sp)
 1006ba4:	10013440 	call	1001344 <__mulsi3>
 1006ba8:	da800317 	ldw	r10,12(sp)
 1006bac:	d9c00217 	ldw	r7,8(sp)
 1006bb0:	d9000017 	ldw	r4,0(sp)
 1006bb4:	502ed43a 	srli	r23,r10,16
 1006bb8:	11c5883a 	add	r2,r2,r7
 1006bbc:	24e5883a 	add	r18,r4,r19
 1006bc0:	b885883a 	add	r2,r23,r2
 1006bc4:	d8c00517 	ldw	r3,20(sp)
 1006bc8:	d9800717 	ldw	r6,28(sp)
 1006bcc:	da000617 	ldw	r8,24(sp)
 1006bd0:	da400417 	ldw	r9,16(sp)
 1006bd4:	11c0022e 	bgeu	r2,r7,1006be0 <__muldf3+0x4f4>
 1006bd8:	01000074 	movhi	r4,1
 1006bdc:	4913883a 	add	r9,r9,r4
 1006be0:	100ed43a 	srli	r7,r2,16
 1006be4:	1004943a 	slli	r2,r2,16
 1006be8:	55ffffcc 	andi	r23,r10,65535
 1006bec:	3a53883a 	add	r9,r7,r9
 1006bf0:	8809883a 	mov	r4,r17
 1006bf4:	800b883a 	mov	r5,r16
 1006bf8:	d8c00515 	stw	r3,20(sp)
 1006bfc:	d9800715 	stw	r6,28(sp)
 1006c00:	da000615 	stw	r8,24(sp)
 1006c04:	da400415 	stw	r9,16(sp)
 1006c08:	15ef883a 	add	r23,r2,r23
 1006c0c:	10013440 	call	1001344 <__mulsi3>
 1006c10:	8809883a 	mov	r4,r17
 1006c14:	b00b883a 	mov	r5,r22
 1006c18:	d8800215 	stw	r2,8(sp)
 1006c1c:	10013440 	call	1001344 <__mulsi3>
 1006c20:	b00b883a 	mov	r5,r22
 1006c24:	a809883a 	mov	r4,r21
 1006c28:	d8800315 	stw	r2,12(sp)
 1006c2c:	10013440 	call	1001344 <__mulsi3>
 1006c30:	8009883a 	mov	r4,r16
 1006c34:	a80b883a 	mov	r5,r21
 1006c38:	1023883a 	mov	r17,r2
 1006c3c:	10013440 	call	1001344 <__mulsi3>
 1006c40:	d9c00217 	ldw	r7,8(sp)
 1006c44:	da800317 	ldw	r10,12(sp)
 1006c48:	d8c00517 	ldw	r3,20(sp)
 1006c4c:	3808d43a 	srli	r4,r7,16
 1006c50:	1285883a 	add	r2,r2,r10
 1006c54:	d9800717 	ldw	r6,28(sp)
 1006c58:	2085883a 	add	r2,r4,r2
 1006c5c:	da000617 	ldw	r8,24(sp)
 1006c60:	da400417 	ldw	r9,16(sp)
 1006c64:	1280022e 	bgeu	r2,r10,1006c70 <__muldf3+0x584>
 1006c68:	01000074 	movhi	r4,1
 1006c6c:	8923883a 	add	r17,r17,r4
 1006c70:	1008943a 	slli	r4,r2,16
 1006c74:	39ffffcc 	andi	r7,r7,65535
 1006c78:	e4b9883a 	add	fp,fp,r18
 1006c7c:	21cf883a 	add	r7,r4,r7
 1006c80:	e4e7803a 	cmpltu	r19,fp,r19
 1006c84:	3d0f883a 	add	r7,r7,r20
 1006c88:	bf39883a 	add	fp,r23,fp
 1006c8c:	99c9883a 	add	r4,r19,r7
 1006c90:	e5ef803a 	cmpltu	r23,fp,r23
 1006c94:	490b883a 	add	r5,r9,r4
 1006c98:	1004d43a 	srli	r2,r2,16
 1006c9c:	b965883a 	add	r18,r23,r5
 1006ca0:	24c9803a 	cmpltu	r4,r4,r19
 1006ca4:	3d29803a 	cmpltu	r20,r7,r20
 1006ca8:	a128b03a 	or	r20,r20,r4
 1006cac:	95ef803a 	cmpltu	r23,r18,r23
 1006cb0:	2a53803a 	cmpltu	r9,r5,r9
 1006cb4:	a0a9883a 	add	r20,r20,r2
 1006cb8:	4deeb03a 	or	r23,r9,r23
 1006cbc:	a5ef883a 	add	r23,r20,r23
 1006cc0:	bc63883a 	add	r17,r23,r17
 1006cc4:	e004927a 	slli	r2,fp,9
 1006cc8:	d9000117 	ldw	r4,4(sp)
 1006ccc:	882e927a 	slli	r23,r17,9
 1006cd0:	9022d5fa 	srli	r17,r18,23
 1006cd4:	e038d5fa 	srli	fp,fp,23
 1006cd8:	1104b03a 	or	r2,r2,r4
 1006cdc:	9024927a 	slli	r18,r18,9
 1006ce0:	1004c03a 	cmpne	r2,r2,zero
 1006ce4:	bc62b03a 	or	r17,r23,r17
 1006ce8:	1738b03a 	or	fp,r2,fp
 1006cec:	8880402c 	andhi	r2,r17,256
 1006cf0:	e4a4b03a 	or	r18,fp,r18
 1006cf4:	10000726 	beq	r2,zero,1006d14 <__muldf3+0x628>
 1006cf8:	9006d07a 	srli	r3,r18,1
 1006cfc:	880497fa 	slli	r2,r17,31
 1006d00:	9480004c 	andi	r18,r18,1
 1006d04:	8822d07a 	srli	r17,r17,1
 1006d08:	1ca4b03a 	or	r18,r3,r18
 1006d0c:	14a4b03a 	or	r18,r2,r18
 1006d10:	4007883a 	mov	r3,r8
 1006d14:	1880ffc4 	addi	r2,r3,1023
 1006d18:	0080460e 	bge	zero,r2,1006e34 <__muldf3+0x748>
 1006d1c:	910001cc 	andi	r4,r18,7
 1006d20:	20000726 	beq	r4,zero,1006d40 <__muldf3+0x654>
 1006d24:	910003cc 	andi	r4,r18,15
 1006d28:	01400104 	movi	r5,4
 1006d2c:	21400426 	beq	r4,r5,1006d40 <__muldf3+0x654>
 1006d30:	9149883a 	add	r4,r18,r5
 1006d34:	24a5803a 	cmpltu	r18,r4,r18
 1006d38:	8ca3883a 	add	r17,r17,r18
 1006d3c:	2025883a 	mov	r18,r4
 1006d40:	8900402c 	andhi	r4,r17,256
 1006d44:	20000426 	beq	r4,zero,1006d58 <__muldf3+0x66c>
 1006d48:	18810004 	addi	r2,r3,1024
 1006d4c:	00ffc034 	movhi	r3,65280
 1006d50:	18ffffc4 	addi	r3,r3,-1
 1006d54:	88e2703a 	and	r17,r17,r3
 1006d58:	00c1ff84 	movi	r3,2046
 1006d5c:	18bf1316 	blt	r3,r2,10069ac <__alt_data_end+0xff494eac>
 1006d60:	882c977a 	slli	r22,r17,29
 1006d64:	9024d0fa 	srli	r18,r18,3
 1006d68:	8822927a 	slli	r17,r17,9
 1006d6c:	1081ffcc 	andi	r2,r2,2047
 1006d70:	b4acb03a 	or	r22,r22,r18
 1006d74:	8820d33a 	srli	r16,r17,12
 1006d78:	3027883a 	mov	r19,r6
 1006d7c:	003eba06 	br	1006868 <__alt_data_end+0xff494d68>
 1006d80:	8080022c 	andhi	r2,r16,8
 1006d84:	10000926 	beq	r2,zero,1006dac <__muldf3+0x6c0>
 1006d88:	8880022c 	andhi	r2,r17,8
 1006d8c:	1000071e 	bne	r2,zero,1006dac <__muldf3+0x6c0>
 1006d90:	00800434 	movhi	r2,16
 1006d94:	8c000234 	orhi	r16,r17,8
 1006d98:	10bfffc4 	addi	r2,r2,-1
 1006d9c:	e027883a 	mov	r19,fp
 1006da0:	80a0703a 	and	r16,r16,r2
 1006da4:	902d883a 	mov	r22,r18
 1006da8:	003f1706 	br	1006a08 <__alt_data_end+0xff494f08>
 1006dac:	00800434 	movhi	r2,16
 1006db0:	84000234 	orhi	r16,r16,8
 1006db4:	10bfffc4 	addi	r2,r2,-1
 1006db8:	80a0703a 	and	r16,r16,r2
 1006dbc:	003f1206 	br	1006a08 <__alt_data_end+0xff494f08>
 1006dc0:	147ff604 	addi	r17,r2,-40
 1006dc4:	3462983a 	sll	r17,r6,r17
 1006dc8:	0025883a 	mov	r18,zero
 1006dcc:	003ef306 	br	100699c <__alt_data_end+0xff494e9c>
 1006dd0:	3009883a 	mov	r4,r6
 1006dd4:	d9400215 	stw	r5,8(sp)
 1006dd8:	d9800715 	stw	r6,28(sp)
 1006ddc:	da400415 	stw	r9,16(sp)
 1006de0:	da800315 	stw	r10,12(sp)
 1006de4:	10012e00 	call	10012e0 <__clzsi2>
 1006de8:	10800804 	addi	r2,r2,32
 1006dec:	da800317 	ldw	r10,12(sp)
 1006df0:	da400417 	ldw	r9,16(sp)
 1006df4:	d9800717 	ldw	r6,28(sp)
 1006df8:	d9400217 	ldw	r5,8(sp)
 1006dfc:	003edd06 	br	1006974 <__alt_data_end+0xff494e74>
 1006e00:	143ff604 	addi	r16,r2,-40
 1006e04:	ac20983a 	sll	r16,r21,r16
 1006e08:	002d883a 	mov	r22,zero
 1006e0c:	003ec106 	br	1006914 <__alt_data_end+0xff494e14>
 1006e10:	d9800715 	stw	r6,28(sp)
 1006e14:	d9c00215 	stw	r7,8(sp)
 1006e18:	da400415 	stw	r9,16(sp)
 1006e1c:	10012e00 	call	10012e0 <__clzsi2>
 1006e20:	10800804 	addi	r2,r2,32
 1006e24:	da400417 	ldw	r9,16(sp)
 1006e28:	d9c00217 	ldw	r7,8(sp)
 1006e2c:	d9800717 	ldw	r6,28(sp)
 1006e30:	003eae06 	br	10068ec <__alt_data_end+0xff494dec>
 1006e34:	00c00044 	movi	r3,1
 1006e38:	1887c83a 	sub	r3,r3,r2
 1006e3c:	01000e04 	movi	r4,56
 1006e40:	20fe8516 	blt	r4,r3,1006858 <__alt_data_end+0xff494d58>
 1006e44:	010007c4 	movi	r4,31
 1006e48:	20c01b16 	blt	r4,r3,1006eb8 <__muldf3+0x7cc>
 1006e4c:	00800804 	movi	r2,32
 1006e50:	10c5c83a 	sub	r2,r2,r3
 1006e54:	888a983a 	sll	r5,r17,r2
 1006e58:	90c8d83a 	srl	r4,r18,r3
 1006e5c:	9084983a 	sll	r2,r18,r2
 1006e60:	88e2d83a 	srl	r17,r17,r3
 1006e64:	2906b03a 	or	r3,r5,r4
 1006e68:	1004c03a 	cmpne	r2,r2,zero
 1006e6c:	1886b03a 	or	r3,r3,r2
 1006e70:	188001cc 	andi	r2,r3,7
 1006e74:	10000726 	beq	r2,zero,1006e94 <__muldf3+0x7a8>
 1006e78:	188003cc 	andi	r2,r3,15
 1006e7c:	01000104 	movi	r4,4
 1006e80:	11000426 	beq	r2,r4,1006e94 <__muldf3+0x7a8>
 1006e84:	1805883a 	mov	r2,r3
 1006e88:	10c00104 	addi	r3,r2,4
 1006e8c:	1885803a 	cmpltu	r2,r3,r2
 1006e90:	88a3883a 	add	r17,r17,r2
 1006e94:	8880202c 	andhi	r2,r17,128
 1006e98:	10001c26 	beq	r2,zero,1006f0c <__muldf3+0x820>
 1006e9c:	3027883a 	mov	r19,r6
 1006ea0:	00800044 	movi	r2,1
 1006ea4:	0021883a 	mov	r16,zero
 1006ea8:	002d883a 	mov	r22,zero
 1006eac:	003e6e06 	br	1006868 <__alt_data_end+0xff494d68>
 1006eb0:	4007883a 	mov	r3,r8
 1006eb4:	003f9706 	br	1006d14 <__alt_data_end+0xff495214>
 1006eb8:	017ff844 	movi	r5,-31
 1006ebc:	2885c83a 	sub	r2,r5,r2
 1006ec0:	888ad83a 	srl	r5,r17,r2
 1006ec4:	00800804 	movi	r2,32
 1006ec8:	18801a26 	beq	r3,r2,1006f34 <__muldf3+0x848>
 1006ecc:	01001004 	movi	r4,64
 1006ed0:	20c7c83a 	sub	r3,r4,r3
 1006ed4:	88e2983a 	sll	r17,r17,r3
 1006ed8:	8ca4b03a 	or	r18,r17,r18
 1006edc:	9004c03a 	cmpne	r2,r18,zero
 1006ee0:	2884b03a 	or	r2,r5,r2
 1006ee4:	144001cc 	andi	r17,r2,7
 1006ee8:	88000d1e 	bne	r17,zero,1006f20 <__muldf3+0x834>
 1006eec:	0021883a 	mov	r16,zero
 1006ef0:	102cd0fa 	srli	r22,r2,3
 1006ef4:	3027883a 	mov	r19,r6
 1006ef8:	0005883a 	mov	r2,zero
 1006efc:	b46cb03a 	or	r22,r22,r17
 1006f00:	003e5906 	br	1006868 <__alt_data_end+0xff494d68>
 1006f04:	1007883a 	mov	r3,r2
 1006f08:	0023883a 	mov	r17,zero
 1006f0c:	8820927a 	slli	r16,r17,9
 1006f10:	1805883a 	mov	r2,r3
 1006f14:	8822977a 	slli	r17,r17,29
 1006f18:	8020d33a 	srli	r16,r16,12
 1006f1c:	003ff406 	br	1006ef0 <__alt_data_end+0xff4953f0>
 1006f20:	10c003cc 	andi	r3,r2,15
 1006f24:	01000104 	movi	r4,4
 1006f28:	193ff626 	beq	r3,r4,1006f04 <__alt_data_end+0xff495404>
 1006f2c:	0023883a 	mov	r17,zero
 1006f30:	003fd506 	br	1006e88 <__alt_data_end+0xff495388>
 1006f34:	0023883a 	mov	r17,zero
 1006f38:	003fe706 	br	1006ed8 <__alt_data_end+0xff4953d8>
 1006f3c:	00800434 	movhi	r2,16
 1006f40:	8c000234 	orhi	r16,r17,8
 1006f44:	10bfffc4 	addi	r2,r2,-1
 1006f48:	3027883a 	mov	r19,r6
 1006f4c:	80a0703a 	and	r16,r16,r2
 1006f50:	902d883a 	mov	r22,r18
 1006f54:	003eac06 	br	1006a08 <__alt_data_end+0xff494f08>

01006f58 <__subdf3>:
 1006f58:	02000434 	movhi	r8,16
 1006f5c:	423fffc4 	addi	r8,r8,-1
 1006f60:	defffb04 	addi	sp,sp,-20
 1006f64:	2a14703a 	and	r10,r5,r8
 1006f68:	3812d53a 	srli	r9,r7,20
 1006f6c:	3a10703a 	and	r8,r7,r8
 1006f70:	2006d77a 	srli	r3,r4,29
 1006f74:	3004d77a 	srli	r2,r6,29
 1006f78:	dc000015 	stw	r16,0(sp)
 1006f7c:	501490fa 	slli	r10,r10,3
 1006f80:	2820d53a 	srli	r16,r5,20
 1006f84:	401090fa 	slli	r8,r8,3
 1006f88:	dc800215 	stw	r18,8(sp)
 1006f8c:	dc400115 	stw	r17,4(sp)
 1006f90:	dfc00415 	stw	ra,16(sp)
 1006f94:	202290fa 	slli	r17,r4,3
 1006f98:	dcc00315 	stw	r19,12(sp)
 1006f9c:	4a41ffcc 	andi	r9,r9,2047
 1006fa0:	0101ffc4 	movi	r4,2047
 1006fa4:	2824d7fa 	srli	r18,r5,31
 1006fa8:	8401ffcc 	andi	r16,r16,2047
 1006fac:	50c6b03a 	or	r3,r10,r3
 1006fb0:	380ed7fa 	srli	r7,r7,31
 1006fb4:	408ab03a 	or	r5,r8,r2
 1006fb8:	300c90fa 	slli	r6,r6,3
 1006fbc:	49009626 	beq	r9,r4,1007218 <__subdf3+0x2c0>
 1006fc0:	39c0005c 	xori	r7,r7,1
 1006fc4:	8245c83a 	sub	r2,r16,r9
 1006fc8:	3c807426 	beq	r7,r18,100719c <__subdf3+0x244>
 1006fcc:	0080af0e 	bge	zero,r2,100728c <__subdf3+0x334>
 1006fd0:	48002a1e 	bne	r9,zero,100707c <__subdf3+0x124>
 1006fd4:	2988b03a 	or	r4,r5,r6
 1006fd8:	20009a1e 	bne	r4,zero,1007244 <__subdf3+0x2ec>
 1006fdc:	888001cc 	andi	r2,r17,7
 1006fe0:	10000726 	beq	r2,zero,1007000 <__subdf3+0xa8>
 1006fe4:	888003cc 	andi	r2,r17,15
 1006fe8:	01000104 	movi	r4,4
 1006fec:	11000426 	beq	r2,r4,1007000 <__subdf3+0xa8>
 1006ff0:	890b883a 	add	r5,r17,r4
 1006ff4:	2c63803a 	cmpltu	r17,r5,r17
 1006ff8:	1c47883a 	add	r3,r3,r17
 1006ffc:	2823883a 	mov	r17,r5
 1007000:	1880202c 	andhi	r2,r3,128
 1007004:	10005926 	beq	r2,zero,100716c <__subdf3+0x214>
 1007008:	84000044 	addi	r16,r16,1
 100700c:	0081ffc4 	movi	r2,2047
 1007010:	8080be26 	beq	r16,r2,100730c <__subdf3+0x3b4>
 1007014:	017fe034 	movhi	r5,65408
 1007018:	297fffc4 	addi	r5,r5,-1
 100701c:	1946703a 	and	r3,r3,r5
 1007020:	1804977a 	slli	r2,r3,29
 1007024:	1806927a 	slli	r3,r3,9
 1007028:	8822d0fa 	srli	r17,r17,3
 100702c:	8401ffcc 	andi	r16,r16,2047
 1007030:	180ad33a 	srli	r5,r3,12
 1007034:	9100004c 	andi	r4,r18,1
 1007038:	1444b03a 	or	r2,r2,r17
 100703c:	80c1ffcc 	andi	r3,r16,2047
 1007040:	1820953a 	slli	r16,r3,20
 1007044:	20c03fcc 	andi	r3,r4,255
 1007048:	180897fa 	slli	r4,r3,31
 100704c:	00c00434 	movhi	r3,16
 1007050:	18ffffc4 	addi	r3,r3,-1
 1007054:	28c6703a 	and	r3,r5,r3
 1007058:	1c06b03a 	or	r3,r3,r16
 100705c:	1906b03a 	or	r3,r3,r4
 1007060:	dfc00417 	ldw	ra,16(sp)
 1007064:	dcc00317 	ldw	r19,12(sp)
 1007068:	dc800217 	ldw	r18,8(sp)
 100706c:	dc400117 	ldw	r17,4(sp)
 1007070:	dc000017 	ldw	r16,0(sp)
 1007074:	dec00504 	addi	sp,sp,20
 1007078:	f800283a 	ret
 100707c:	0101ffc4 	movi	r4,2047
 1007080:	813fd626 	beq	r16,r4,1006fdc <__alt_data_end+0xff4954dc>
 1007084:	29402034 	orhi	r5,r5,128
 1007088:	01000e04 	movi	r4,56
 100708c:	2080a316 	blt	r4,r2,100731c <__subdf3+0x3c4>
 1007090:	010007c4 	movi	r4,31
 1007094:	2080c616 	blt	r4,r2,10073b0 <__subdf3+0x458>
 1007098:	01000804 	movi	r4,32
 100709c:	2089c83a 	sub	r4,r4,r2
 10070a0:	2910983a 	sll	r8,r5,r4
 10070a4:	308ed83a 	srl	r7,r6,r2
 10070a8:	3108983a 	sll	r4,r6,r4
 10070ac:	2884d83a 	srl	r2,r5,r2
 10070b0:	41ccb03a 	or	r6,r8,r7
 10070b4:	2008c03a 	cmpne	r4,r4,zero
 10070b8:	310cb03a 	or	r6,r6,r4
 10070bc:	898dc83a 	sub	r6,r17,r6
 10070c0:	89a3803a 	cmpltu	r17,r17,r6
 10070c4:	1887c83a 	sub	r3,r3,r2
 10070c8:	1c47c83a 	sub	r3,r3,r17
 10070cc:	3023883a 	mov	r17,r6
 10070d0:	1880202c 	andhi	r2,r3,128
 10070d4:	10002326 	beq	r2,zero,1007164 <__subdf3+0x20c>
 10070d8:	04c02034 	movhi	r19,128
 10070dc:	9cffffc4 	addi	r19,r19,-1
 10070e0:	1ce6703a 	and	r19,r3,r19
 10070e4:	98007a26 	beq	r19,zero,10072d0 <__subdf3+0x378>
 10070e8:	9809883a 	mov	r4,r19
 10070ec:	10012e00 	call	10012e0 <__clzsi2>
 10070f0:	113ffe04 	addi	r4,r2,-8
 10070f4:	00c007c4 	movi	r3,31
 10070f8:	19007b16 	blt	r3,r4,10072e8 <__subdf3+0x390>
 10070fc:	00800804 	movi	r2,32
 1007100:	1105c83a 	sub	r2,r2,r4
 1007104:	8884d83a 	srl	r2,r17,r2
 1007108:	9906983a 	sll	r3,r19,r4
 100710c:	8922983a 	sll	r17,r17,r4
 1007110:	10c4b03a 	or	r2,r2,r3
 1007114:	24007816 	blt	r4,r16,10072f8 <__subdf3+0x3a0>
 1007118:	2421c83a 	sub	r16,r4,r16
 100711c:	80c00044 	addi	r3,r16,1
 1007120:	010007c4 	movi	r4,31
 1007124:	20c09516 	blt	r4,r3,100737c <__subdf3+0x424>
 1007128:	01400804 	movi	r5,32
 100712c:	28cbc83a 	sub	r5,r5,r3
 1007130:	88c8d83a 	srl	r4,r17,r3
 1007134:	8962983a 	sll	r17,r17,r5
 1007138:	114a983a 	sll	r5,r2,r5
 100713c:	10c6d83a 	srl	r3,r2,r3
 1007140:	8804c03a 	cmpne	r2,r17,zero
 1007144:	290ab03a 	or	r5,r5,r4
 1007148:	28a2b03a 	or	r17,r5,r2
 100714c:	0021883a 	mov	r16,zero
 1007150:	003fa206 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007154:	2090b03a 	or	r8,r4,r2
 1007158:	40018e26 	beq	r8,zero,1007794 <__subdf3+0x83c>
 100715c:	1007883a 	mov	r3,r2
 1007160:	2023883a 	mov	r17,r4
 1007164:	888001cc 	andi	r2,r17,7
 1007168:	103f9e1e 	bne	r2,zero,1006fe4 <__alt_data_end+0xff4954e4>
 100716c:	1804977a 	slli	r2,r3,29
 1007170:	8822d0fa 	srli	r17,r17,3
 1007174:	1810d0fa 	srli	r8,r3,3
 1007178:	9100004c 	andi	r4,r18,1
 100717c:	1444b03a 	or	r2,r2,r17
 1007180:	00c1ffc4 	movi	r3,2047
 1007184:	80c02826 	beq	r16,r3,1007228 <__subdf3+0x2d0>
 1007188:	01400434 	movhi	r5,16
 100718c:	297fffc4 	addi	r5,r5,-1
 1007190:	80e0703a 	and	r16,r16,r3
 1007194:	414a703a 	and	r5,r8,r5
 1007198:	003fa806 	br	100703c <__alt_data_end+0xff49553c>
 100719c:	0080630e 	bge	zero,r2,100732c <__subdf3+0x3d4>
 10071a0:	48003026 	beq	r9,zero,1007264 <__subdf3+0x30c>
 10071a4:	0101ffc4 	movi	r4,2047
 10071a8:	813f8c26 	beq	r16,r4,1006fdc <__alt_data_end+0xff4954dc>
 10071ac:	29402034 	orhi	r5,r5,128
 10071b0:	01000e04 	movi	r4,56
 10071b4:	2080a90e 	bge	r4,r2,100745c <__subdf3+0x504>
 10071b8:	298cb03a 	or	r6,r5,r6
 10071bc:	3012c03a 	cmpne	r9,r6,zero
 10071c0:	0005883a 	mov	r2,zero
 10071c4:	4c53883a 	add	r9,r9,r17
 10071c8:	4c63803a 	cmpltu	r17,r9,r17
 10071cc:	10c7883a 	add	r3,r2,r3
 10071d0:	88c7883a 	add	r3,r17,r3
 10071d4:	4823883a 	mov	r17,r9
 10071d8:	1880202c 	andhi	r2,r3,128
 10071dc:	1000d026 	beq	r2,zero,1007520 <__subdf3+0x5c8>
 10071e0:	84000044 	addi	r16,r16,1
 10071e4:	0081ffc4 	movi	r2,2047
 10071e8:	8080fe26 	beq	r16,r2,10075e4 <__subdf3+0x68c>
 10071ec:	00bfe034 	movhi	r2,65408
 10071f0:	10bfffc4 	addi	r2,r2,-1
 10071f4:	1886703a 	and	r3,r3,r2
 10071f8:	880ad07a 	srli	r5,r17,1
 10071fc:	180497fa 	slli	r2,r3,31
 1007200:	8900004c 	andi	r4,r17,1
 1007204:	2922b03a 	or	r17,r5,r4
 1007208:	1806d07a 	srli	r3,r3,1
 100720c:	1462b03a 	or	r17,r2,r17
 1007210:	3825883a 	mov	r18,r7
 1007214:	003f7106 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007218:	2984b03a 	or	r2,r5,r6
 100721c:	103f6826 	beq	r2,zero,1006fc0 <__alt_data_end+0xff4954c0>
 1007220:	39c03fcc 	andi	r7,r7,255
 1007224:	003f6706 	br	1006fc4 <__alt_data_end+0xff4954c4>
 1007228:	4086b03a 	or	r3,r8,r2
 100722c:	18015226 	beq	r3,zero,1007778 <__subdf3+0x820>
 1007230:	00c00434 	movhi	r3,16
 1007234:	41400234 	orhi	r5,r8,8
 1007238:	18ffffc4 	addi	r3,r3,-1
 100723c:	28ca703a 	and	r5,r5,r3
 1007240:	003f7e06 	br	100703c <__alt_data_end+0xff49553c>
 1007244:	10bfffc4 	addi	r2,r2,-1
 1007248:	1000491e 	bne	r2,zero,1007370 <__subdf3+0x418>
 100724c:	898fc83a 	sub	r7,r17,r6
 1007250:	89e3803a 	cmpltu	r17,r17,r7
 1007254:	1947c83a 	sub	r3,r3,r5
 1007258:	1c47c83a 	sub	r3,r3,r17
 100725c:	3823883a 	mov	r17,r7
 1007260:	003f9b06 	br	10070d0 <__alt_data_end+0xff4955d0>
 1007264:	2988b03a 	or	r4,r5,r6
 1007268:	203f5c26 	beq	r4,zero,1006fdc <__alt_data_end+0xff4954dc>
 100726c:	10bfffc4 	addi	r2,r2,-1
 1007270:	1000931e 	bne	r2,zero,10074c0 <__subdf3+0x568>
 1007274:	898d883a 	add	r6,r17,r6
 1007278:	3463803a 	cmpltu	r17,r6,r17
 100727c:	1947883a 	add	r3,r3,r5
 1007280:	88c7883a 	add	r3,r17,r3
 1007284:	3023883a 	mov	r17,r6
 1007288:	003fd306 	br	10071d8 <__alt_data_end+0xff4956d8>
 100728c:	1000541e 	bne	r2,zero,10073e0 <__subdf3+0x488>
 1007290:	80800044 	addi	r2,r16,1
 1007294:	1081ffcc 	andi	r2,r2,2047
 1007298:	01000044 	movi	r4,1
 100729c:	2080a20e 	bge	r4,r2,1007528 <__subdf3+0x5d0>
 10072a0:	8989c83a 	sub	r4,r17,r6
 10072a4:	8905803a 	cmpltu	r2,r17,r4
 10072a8:	1967c83a 	sub	r19,r3,r5
 10072ac:	98a7c83a 	sub	r19,r19,r2
 10072b0:	9880202c 	andhi	r2,r19,128
 10072b4:	10006326 	beq	r2,zero,1007444 <__subdf3+0x4ec>
 10072b8:	3463c83a 	sub	r17,r6,r17
 10072bc:	28c7c83a 	sub	r3,r5,r3
 10072c0:	344d803a 	cmpltu	r6,r6,r17
 10072c4:	19a7c83a 	sub	r19,r3,r6
 10072c8:	3825883a 	mov	r18,r7
 10072cc:	983f861e 	bne	r19,zero,10070e8 <__alt_data_end+0xff4955e8>
 10072d0:	8809883a 	mov	r4,r17
 10072d4:	10012e00 	call	10012e0 <__clzsi2>
 10072d8:	10800804 	addi	r2,r2,32
 10072dc:	113ffe04 	addi	r4,r2,-8
 10072e0:	00c007c4 	movi	r3,31
 10072e4:	193f850e 	bge	r3,r4,10070fc <__alt_data_end+0xff4955fc>
 10072e8:	10bff604 	addi	r2,r2,-40
 10072ec:	8884983a 	sll	r2,r17,r2
 10072f0:	0023883a 	mov	r17,zero
 10072f4:	243f880e 	bge	r4,r16,1007118 <__alt_data_end+0xff495618>
 10072f8:	00ffe034 	movhi	r3,65408
 10072fc:	18ffffc4 	addi	r3,r3,-1
 1007300:	8121c83a 	sub	r16,r16,r4
 1007304:	10c6703a 	and	r3,r2,r3
 1007308:	003f3406 	br	1006fdc <__alt_data_end+0xff4954dc>
 100730c:	9100004c 	andi	r4,r18,1
 1007310:	000b883a 	mov	r5,zero
 1007314:	0005883a 	mov	r2,zero
 1007318:	003f4806 	br	100703c <__alt_data_end+0xff49553c>
 100731c:	298cb03a 	or	r6,r5,r6
 1007320:	300cc03a 	cmpne	r6,r6,zero
 1007324:	0005883a 	mov	r2,zero
 1007328:	003f6406 	br	10070bc <__alt_data_end+0xff4955bc>
 100732c:	10009a1e 	bne	r2,zero,1007598 <__subdf3+0x640>
 1007330:	82400044 	addi	r9,r16,1
 1007334:	4881ffcc 	andi	r2,r9,2047
 1007338:	02800044 	movi	r10,1
 100733c:	5080670e 	bge	r10,r2,10074dc <__subdf3+0x584>
 1007340:	0081ffc4 	movi	r2,2047
 1007344:	4880af26 	beq	r9,r2,1007604 <__subdf3+0x6ac>
 1007348:	898d883a 	add	r6,r17,r6
 100734c:	1945883a 	add	r2,r3,r5
 1007350:	3447803a 	cmpltu	r3,r6,r17
 1007354:	1887883a 	add	r3,r3,r2
 1007358:	182297fa 	slli	r17,r3,31
 100735c:	300cd07a 	srli	r6,r6,1
 1007360:	1806d07a 	srli	r3,r3,1
 1007364:	4821883a 	mov	r16,r9
 1007368:	89a2b03a 	or	r17,r17,r6
 100736c:	003f1b06 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007370:	0101ffc4 	movi	r4,2047
 1007374:	813f441e 	bne	r16,r4,1007088 <__alt_data_end+0xff495588>
 1007378:	003f1806 	br	1006fdc <__alt_data_end+0xff4954dc>
 100737c:	843ff844 	addi	r16,r16,-31
 1007380:	01400804 	movi	r5,32
 1007384:	1408d83a 	srl	r4,r2,r16
 1007388:	19405026 	beq	r3,r5,10074cc <__subdf3+0x574>
 100738c:	01401004 	movi	r5,64
 1007390:	28c7c83a 	sub	r3,r5,r3
 1007394:	10c4983a 	sll	r2,r2,r3
 1007398:	88a2b03a 	or	r17,r17,r2
 100739c:	8822c03a 	cmpne	r17,r17,zero
 10073a0:	2462b03a 	or	r17,r4,r17
 10073a4:	0007883a 	mov	r3,zero
 10073a8:	0021883a 	mov	r16,zero
 10073ac:	003f6d06 	br	1007164 <__alt_data_end+0xff495664>
 10073b0:	11fff804 	addi	r7,r2,-32
 10073b4:	01000804 	movi	r4,32
 10073b8:	29ced83a 	srl	r7,r5,r7
 10073bc:	11004526 	beq	r2,r4,10074d4 <__subdf3+0x57c>
 10073c0:	01001004 	movi	r4,64
 10073c4:	2089c83a 	sub	r4,r4,r2
 10073c8:	2904983a 	sll	r2,r5,r4
 10073cc:	118cb03a 	or	r6,r2,r6
 10073d0:	300cc03a 	cmpne	r6,r6,zero
 10073d4:	398cb03a 	or	r6,r7,r6
 10073d8:	0005883a 	mov	r2,zero
 10073dc:	003f3706 	br	10070bc <__alt_data_end+0xff4955bc>
 10073e0:	80002a26 	beq	r16,zero,100748c <__subdf3+0x534>
 10073e4:	0101ffc4 	movi	r4,2047
 10073e8:	49006626 	beq	r9,r4,1007584 <__subdf3+0x62c>
 10073ec:	0085c83a 	sub	r2,zero,r2
 10073f0:	18c02034 	orhi	r3,r3,128
 10073f4:	01000e04 	movi	r4,56
 10073f8:	20807e16 	blt	r4,r2,10075f4 <__subdf3+0x69c>
 10073fc:	010007c4 	movi	r4,31
 1007400:	2080e716 	blt	r4,r2,10077a0 <__subdf3+0x848>
 1007404:	01000804 	movi	r4,32
 1007408:	2089c83a 	sub	r4,r4,r2
 100740c:	1914983a 	sll	r10,r3,r4
 1007410:	8890d83a 	srl	r8,r17,r2
 1007414:	8908983a 	sll	r4,r17,r4
 1007418:	1884d83a 	srl	r2,r3,r2
 100741c:	5222b03a 	or	r17,r10,r8
 1007420:	2006c03a 	cmpne	r3,r4,zero
 1007424:	88e2b03a 	or	r17,r17,r3
 1007428:	3463c83a 	sub	r17,r6,r17
 100742c:	2885c83a 	sub	r2,r5,r2
 1007430:	344d803a 	cmpltu	r6,r6,r17
 1007434:	1187c83a 	sub	r3,r2,r6
 1007438:	4821883a 	mov	r16,r9
 100743c:	3825883a 	mov	r18,r7
 1007440:	003f2306 	br	10070d0 <__alt_data_end+0xff4955d0>
 1007444:	24d0b03a 	or	r8,r4,r19
 1007448:	40001b1e 	bne	r8,zero,10074b8 <__subdf3+0x560>
 100744c:	0005883a 	mov	r2,zero
 1007450:	0009883a 	mov	r4,zero
 1007454:	0021883a 	mov	r16,zero
 1007458:	003f4906 	br	1007180 <__alt_data_end+0xff495680>
 100745c:	010007c4 	movi	r4,31
 1007460:	20803a16 	blt	r4,r2,100754c <__subdf3+0x5f4>
 1007464:	01000804 	movi	r4,32
 1007468:	2089c83a 	sub	r4,r4,r2
 100746c:	2912983a 	sll	r9,r5,r4
 1007470:	3090d83a 	srl	r8,r6,r2
 1007474:	3108983a 	sll	r4,r6,r4
 1007478:	2884d83a 	srl	r2,r5,r2
 100747c:	4a12b03a 	or	r9,r9,r8
 1007480:	2008c03a 	cmpne	r4,r4,zero
 1007484:	4912b03a 	or	r9,r9,r4
 1007488:	003f4e06 	br	10071c4 <__alt_data_end+0xff4956c4>
 100748c:	1c48b03a 	or	r4,r3,r17
 1007490:	20003c26 	beq	r4,zero,1007584 <__subdf3+0x62c>
 1007494:	0084303a 	nor	r2,zero,r2
 1007498:	1000381e 	bne	r2,zero,100757c <__subdf3+0x624>
 100749c:	3463c83a 	sub	r17,r6,r17
 10074a0:	28c5c83a 	sub	r2,r5,r3
 10074a4:	344d803a 	cmpltu	r6,r6,r17
 10074a8:	1187c83a 	sub	r3,r2,r6
 10074ac:	4821883a 	mov	r16,r9
 10074b0:	3825883a 	mov	r18,r7
 10074b4:	003f0606 	br	10070d0 <__alt_data_end+0xff4955d0>
 10074b8:	2023883a 	mov	r17,r4
 10074bc:	003f0906 	br	10070e4 <__alt_data_end+0xff4955e4>
 10074c0:	0101ffc4 	movi	r4,2047
 10074c4:	813f3a1e 	bne	r16,r4,10071b0 <__alt_data_end+0xff4956b0>
 10074c8:	003ec406 	br	1006fdc <__alt_data_end+0xff4954dc>
 10074cc:	0005883a 	mov	r2,zero
 10074d0:	003fb106 	br	1007398 <__alt_data_end+0xff495898>
 10074d4:	0005883a 	mov	r2,zero
 10074d8:	003fbc06 	br	10073cc <__alt_data_end+0xff4958cc>
 10074dc:	1c44b03a 	or	r2,r3,r17
 10074e0:	80008e1e 	bne	r16,zero,100771c <__subdf3+0x7c4>
 10074e4:	1000c826 	beq	r2,zero,1007808 <__subdf3+0x8b0>
 10074e8:	2984b03a 	or	r2,r5,r6
 10074ec:	103ebb26 	beq	r2,zero,1006fdc <__alt_data_end+0xff4954dc>
 10074f0:	8989883a 	add	r4,r17,r6
 10074f4:	1945883a 	add	r2,r3,r5
 10074f8:	2447803a 	cmpltu	r3,r4,r17
 10074fc:	1887883a 	add	r3,r3,r2
 1007500:	1880202c 	andhi	r2,r3,128
 1007504:	2023883a 	mov	r17,r4
 1007508:	103f1626 	beq	r2,zero,1007164 <__alt_data_end+0xff495664>
 100750c:	00bfe034 	movhi	r2,65408
 1007510:	10bfffc4 	addi	r2,r2,-1
 1007514:	5021883a 	mov	r16,r10
 1007518:	1886703a 	and	r3,r3,r2
 100751c:	003eaf06 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007520:	3825883a 	mov	r18,r7
 1007524:	003f0f06 	br	1007164 <__alt_data_end+0xff495664>
 1007528:	1c44b03a 	or	r2,r3,r17
 100752c:	8000251e 	bne	r16,zero,10075c4 <__subdf3+0x66c>
 1007530:	1000661e 	bne	r2,zero,10076cc <__subdf3+0x774>
 1007534:	2990b03a 	or	r8,r5,r6
 1007538:	40009626 	beq	r8,zero,1007794 <__subdf3+0x83c>
 100753c:	2807883a 	mov	r3,r5
 1007540:	3023883a 	mov	r17,r6
 1007544:	3825883a 	mov	r18,r7
 1007548:	003ea406 	br	1006fdc <__alt_data_end+0xff4954dc>
 100754c:	127ff804 	addi	r9,r2,-32
 1007550:	01000804 	movi	r4,32
 1007554:	2a52d83a 	srl	r9,r5,r9
 1007558:	11008c26 	beq	r2,r4,100778c <__subdf3+0x834>
 100755c:	01001004 	movi	r4,64
 1007560:	2085c83a 	sub	r2,r4,r2
 1007564:	2884983a 	sll	r2,r5,r2
 1007568:	118cb03a 	or	r6,r2,r6
 100756c:	300cc03a 	cmpne	r6,r6,zero
 1007570:	4992b03a 	or	r9,r9,r6
 1007574:	0005883a 	mov	r2,zero
 1007578:	003f1206 	br	10071c4 <__alt_data_end+0xff4956c4>
 100757c:	0101ffc4 	movi	r4,2047
 1007580:	493f9c1e 	bne	r9,r4,10073f4 <__alt_data_end+0xff4958f4>
 1007584:	2807883a 	mov	r3,r5
 1007588:	3023883a 	mov	r17,r6
 100758c:	4821883a 	mov	r16,r9
 1007590:	3825883a 	mov	r18,r7
 1007594:	003e9106 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007598:	80001f1e 	bne	r16,zero,1007618 <__subdf3+0x6c0>
 100759c:	1c48b03a 	or	r4,r3,r17
 10075a0:	20005a26 	beq	r4,zero,100770c <__subdf3+0x7b4>
 10075a4:	0084303a 	nor	r2,zero,r2
 10075a8:	1000561e 	bne	r2,zero,1007704 <__subdf3+0x7ac>
 10075ac:	89a3883a 	add	r17,r17,r6
 10075b0:	1945883a 	add	r2,r3,r5
 10075b4:	898d803a 	cmpltu	r6,r17,r6
 10075b8:	3087883a 	add	r3,r6,r2
 10075bc:	4821883a 	mov	r16,r9
 10075c0:	003f0506 	br	10071d8 <__alt_data_end+0xff4956d8>
 10075c4:	10002b1e 	bne	r2,zero,1007674 <__subdf3+0x71c>
 10075c8:	2984b03a 	or	r2,r5,r6
 10075cc:	10008026 	beq	r2,zero,10077d0 <__subdf3+0x878>
 10075d0:	2807883a 	mov	r3,r5
 10075d4:	3023883a 	mov	r17,r6
 10075d8:	3825883a 	mov	r18,r7
 10075dc:	0401ffc4 	movi	r16,2047
 10075e0:	003e7e06 	br	1006fdc <__alt_data_end+0xff4954dc>
 10075e4:	3809883a 	mov	r4,r7
 10075e8:	0011883a 	mov	r8,zero
 10075ec:	0005883a 	mov	r2,zero
 10075f0:	003ee306 	br	1007180 <__alt_data_end+0xff495680>
 10075f4:	1c62b03a 	or	r17,r3,r17
 10075f8:	8822c03a 	cmpne	r17,r17,zero
 10075fc:	0005883a 	mov	r2,zero
 1007600:	003f8906 	br	1007428 <__alt_data_end+0xff495928>
 1007604:	3809883a 	mov	r4,r7
 1007608:	4821883a 	mov	r16,r9
 100760c:	0011883a 	mov	r8,zero
 1007610:	0005883a 	mov	r2,zero
 1007614:	003eda06 	br	1007180 <__alt_data_end+0xff495680>
 1007618:	0101ffc4 	movi	r4,2047
 100761c:	49003b26 	beq	r9,r4,100770c <__subdf3+0x7b4>
 1007620:	0085c83a 	sub	r2,zero,r2
 1007624:	18c02034 	orhi	r3,r3,128
 1007628:	01000e04 	movi	r4,56
 100762c:	20806e16 	blt	r4,r2,10077e8 <__subdf3+0x890>
 1007630:	010007c4 	movi	r4,31
 1007634:	20807716 	blt	r4,r2,1007814 <__subdf3+0x8bc>
 1007638:	01000804 	movi	r4,32
 100763c:	2089c83a 	sub	r4,r4,r2
 1007640:	1914983a 	sll	r10,r3,r4
 1007644:	8890d83a 	srl	r8,r17,r2
 1007648:	8908983a 	sll	r4,r17,r4
 100764c:	1884d83a 	srl	r2,r3,r2
 1007650:	5222b03a 	or	r17,r10,r8
 1007654:	2006c03a 	cmpne	r3,r4,zero
 1007658:	88e2b03a 	or	r17,r17,r3
 100765c:	89a3883a 	add	r17,r17,r6
 1007660:	1145883a 	add	r2,r2,r5
 1007664:	898d803a 	cmpltu	r6,r17,r6
 1007668:	3087883a 	add	r3,r6,r2
 100766c:	4821883a 	mov	r16,r9
 1007670:	003ed906 	br	10071d8 <__alt_data_end+0xff4956d8>
 1007674:	2984b03a 	or	r2,r5,r6
 1007678:	10004226 	beq	r2,zero,1007784 <__subdf3+0x82c>
 100767c:	1808d0fa 	srli	r4,r3,3
 1007680:	8822d0fa 	srli	r17,r17,3
 1007684:	1806977a 	slli	r3,r3,29
 1007688:	2080022c 	andhi	r2,r4,8
 100768c:	1c62b03a 	or	r17,r3,r17
 1007690:	10000826 	beq	r2,zero,10076b4 <__subdf3+0x75c>
 1007694:	2812d0fa 	srli	r9,r5,3
 1007698:	4880022c 	andhi	r2,r9,8
 100769c:	1000051e 	bne	r2,zero,10076b4 <__subdf3+0x75c>
 10076a0:	300cd0fa 	srli	r6,r6,3
 10076a4:	2804977a 	slli	r2,r5,29
 10076a8:	4809883a 	mov	r4,r9
 10076ac:	3825883a 	mov	r18,r7
 10076b0:	11a2b03a 	or	r17,r2,r6
 10076b4:	8806d77a 	srli	r3,r17,29
 10076b8:	200890fa 	slli	r4,r4,3
 10076bc:	882290fa 	slli	r17,r17,3
 10076c0:	0401ffc4 	movi	r16,2047
 10076c4:	1906b03a 	or	r3,r3,r4
 10076c8:	003e4406 	br	1006fdc <__alt_data_end+0xff4954dc>
 10076cc:	2984b03a 	or	r2,r5,r6
 10076d0:	103e4226 	beq	r2,zero,1006fdc <__alt_data_end+0xff4954dc>
 10076d4:	8989c83a 	sub	r4,r17,r6
 10076d8:	8911803a 	cmpltu	r8,r17,r4
 10076dc:	1945c83a 	sub	r2,r3,r5
 10076e0:	1205c83a 	sub	r2,r2,r8
 10076e4:	1200202c 	andhi	r8,r2,128
 10076e8:	403e9a26 	beq	r8,zero,1007154 <__alt_data_end+0xff495654>
 10076ec:	3463c83a 	sub	r17,r6,r17
 10076f0:	28c5c83a 	sub	r2,r5,r3
 10076f4:	344d803a 	cmpltu	r6,r6,r17
 10076f8:	1187c83a 	sub	r3,r2,r6
 10076fc:	3825883a 	mov	r18,r7
 1007700:	003e3606 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007704:	0101ffc4 	movi	r4,2047
 1007708:	493fc71e 	bne	r9,r4,1007628 <__alt_data_end+0xff495b28>
 100770c:	2807883a 	mov	r3,r5
 1007710:	3023883a 	mov	r17,r6
 1007714:	4821883a 	mov	r16,r9
 1007718:	003e3006 	br	1006fdc <__alt_data_end+0xff4954dc>
 100771c:	10003626 	beq	r2,zero,10077f8 <__subdf3+0x8a0>
 1007720:	2984b03a 	or	r2,r5,r6
 1007724:	10001726 	beq	r2,zero,1007784 <__subdf3+0x82c>
 1007728:	1808d0fa 	srli	r4,r3,3
 100772c:	8822d0fa 	srli	r17,r17,3
 1007730:	1806977a 	slli	r3,r3,29
 1007734:	2080022c 	andhi	r2,r4,8
 1007738:	1c62b03a 	or	r17,r3,r17
 100773c:	10000726 	beq	r2,zero,100775c <__subdf3+0x804>
 1007740:	2812d0fa 	srli	r9,r5,3
 1007744:	4880022c 	andhi	r2,r9,8
 1007748:	1000041e 	bne	r2,zero,100775c <__subdf3+0x804>
 100774c:	300cd0fa 	srli	r6,r6,3
 1007750:	2804977a 	slli	r2,r5,29
 1007754:	4809883a 	mov	r4,r9
 1007758:	11a2b03a 	or	r17,r2,r6
 100775c:	8806d77a 	srli	r3,r17,29
 1007760:	200890fa 	slli	r4,r4,3
 1007764:	882290fa 	slli	r17,r17,3
 1007768:	3825883a 	mov	r18,r7
 100776c:	1906b03a 	or	r3,r3,r4
 1007770:	0401ffc4 	movi	r16,2047
 1007774:	003e1906 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007778:	000b883a 	mov	r5,zero
 100777c:	0005883a 	mov	r2,zero
 1007780:	003e2e06 	br	100703c <__alt_data_end+0xff49553c>
 1007784:	0401ffc4 	movi	r16,2047
 1007788:	003e1406 	br	1006fdc <__alt_data_end+0xff4954dc>
 100778c:	0005883a 	mov	r2,zero
 1007790:	003f7506 	br	1007568 <__alt_data_end+0xff495a68>
 1007794:	0005883a 	mov	r2,zero
 1007798:	0009883a 	mov	r4,zero
 100779c:	003e7806 	br	1007180 <__alt_data_end+0xff495680>
 10077a0:	123ff804 	addi	r8,r2,-32
 10077a4:	01000804 	movi	r4,32
 10077a8:	1a10d83a 	srl	r8,r3,r8
 10077ac:	11002526 	beq	r2,r4,1007844 <__subdf3+0x8ec>
 10077b0:	01001004 	movi	r4,64
 10077b4:	2085c83a 	sub	r2,r4,r2
 10077b8:	1884983a 	sll	r2,r3,r2
 10077bc:	1444b03a 	or	r2,r2,r17
 10077c0:	1004c03a 	cmpne	r2,r2,zero
 10077c4:	40a2b03a 	or	r17,r8,r2
 10077c8:	0005883a 	mov	r2,zero
 10077cc:	003f1606 	br	1007428 <__alt_data_end+0xff495928>
 10077d0:	02000434 	movhi	r8,16
 10077d4:	0009883a 	mov	r4,zero
 10077d8:	423fffc4 	addi	r8,r8,-1
 10077dc:	00bfffc4 	movi	r2,-1
 10077e0:	0401ffc4 	movi	r16,2047
 10077e4:	003e6606 	br	1007180 <__alt_data_end+0xff495680>
 10077e8:	1c62b03a 	or	r17,r3,r17
 10077ec:	8822c03a 	cmpne	r17,r17,zero
 10077f0:	0005883a 	mov	r2,zero
 10077f4:	003f9906 	br	100765c <__alt_data_end+0xff495b5c>
 10077f8:	2807883a 	mov	r3,r5
 10077fc:	3023883a 	mov	r17,r6
 1007800:	0401ffc4 	movi	r16,2047
 1007804:	003df506 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007808:	2807883a 	mov	r3,r5
 100780c:	3023883a 	mov	r17,r6
 1007810:	003df206 	br	1006fdc <__alt_data_end+0xff4954dc>
 1007814:	123ff804 	addi	r8,r2,-32
 1007818:	01000804 	movi	r4,32
 100781c:	1a10d83a 	srl	r8,r3,r8
 1007820:	11000a26 	beq	r2,r4,100784c <__subdf3+0x8f4>
 1007824:	01001004 	movi	r4,64
 1007828:	2085c83a 	sub	r2,r4,r2
 100782c:	1884983a 	sll	r2,r3,r2
 1007830:	1444b03a 	or	r2,r2,r17
 1007834:	1004c03a 	cmpne	r2,r2,zero
 1007838:	40a2b03a 	or	r17,r8,r2
 100783c:	0005883a 	mov	r2,zero
 1007840:	003f8606 	br	100765c <__alt_data_end+0xff495b5c>
 1007844:	0005883a 	mov	r2,zero
 1007848:	003fdc06 	br	10077bc <__alt_data_end+0xff495cbc>
 100784c:	0005883a 	mov	r2,zero
 1007850:	003ff706 	br	1007830 <__alt_data_end+0xff495d30>

01007854 <__fixdfsi>:
 1007854:	280cd53a 	srli	r6,r5,20
 1007858:	00c00434 	movhi	r3,16
 100785c:	18ffffc4 	addi	r3,r3,-1
 1007860:	3181ffcc 	andi	r6,r6,2047
 1007864:	01c0ff84 	movi	r7,1022
 1007868:	28c6703a 	and	r3,r5,r3
 100786c:	280ad7fa 	srli	r5,r5,31
 1007870:	3980120e 	bge	r7,r6,10078bc <__fixdfsi+0x68>
 1007874:	00810744 	movi	r2,1053
 1007878:	11800c16 	blt	r2,r6,10078ac <__fixdfsi+0x58>
 100787c:	00810cc4 	movi	r2,1075
 1007880:	1185c83a 	sub	r2,r2,r6
 1007884:	01c007c4 	movi	r7,31
 1007888:	18c00434 	orhi	r3,r3,16
 100788c:	38800d16 	blt	r7,r2,10078c4 <__fixdfsi+0x70>
 1007890:	31befb44 	addi	r6,r6,-1043
 1007894:	2084d83a 	srl	r2,r4,r2
 1007898:	1986983a 	sll	r3,r3,r6
 100789c:	1884b03a 	or	r2,r3,r2
 10078a0:	28000726 	beq	r5,zero,10078c0 <__fixdfsi+0x6c>
 10078a4:	0085c83a 	sub	r2,zero,r2
 10078a8:	f800283a 	ret
 10078ac:	00a00034 	movhi	r2,32768
 10078b0:	10bfffc4 	addi	r2,r2,-1
 10078b4:	2885883a 	add	r2,r5,r2
 10078b8:	f800283a 	ret
 10078bc:	0005883a 	mov	r2,zero
 10078c0:	f800283a 	ret
 10078c4:	008104c4 	movi	r2,1043
 10078c8:	1185c83a 	sub	r2,r2,r6
 10078cc:	1884d83a 	srl	r2,r3,r2
 10078d0:	003ff306 	br	10078a0 <__alt_data_end+0xff495da0>

010078d4 <__floatsidf>:
 10078d4:	defffd04 	addi	sp,sp,-12
 10078d8:	dfc00215 	stw	ra,8(sp)
 10078dc:	dc400115 	stw	r17,4(sp)
 10078e0:	dc000015 	stw	r16,0(sp)
 10078e4:	20002b26 	beq	r4,zero,1007994 <__floatsidf+0xc0>
 10078e8:	2023883a 	mov	r17,r4
 10078ec:	2020d7fa 	srli	r16,r4,31
 10078f0:	20002d16 	blt	r4,zero,10079a8 <__floatsidf+0xd4>
 10078f4:	8809883a 	mov	r4,r17
 10078f8:	10012e00 	call	10012e0 <__clzsi2>
 10078fc:	01410784 	movi	r5,1054
 1007900:	288bc83a 	sub	r5,r5,r2
 1007904:	01010cc4 	movi	r4,1075
 1007908:	2149c83a 	sub	r4,r4,r5
 100790c:	00c007c4 	movi	r3,31
 1007910:	1900160e 	bge	r3,r4,100796c <__floatsidf+0x98>
 1007914:	00c104c4 	movi	r3,1043
 1007918:	1947c83a 	sub	r3,r3,r5
 100791c:	88c6983a 	sll	r3,r17,r3
 1007920:	00800434 	movhi	r2,16
 1007924:	10bfffc4 	addi	r2,r2,-1
 1007928:	1886703a 	and	r3,r3,r2
 100792c:	2941ffcc 	andi	r5,r5,2047
 1007930:	800d883a 	mov	r6,r16
 1007934:	0005883a 	mov	r2,zero
 1007938:	280a953a 	slli	r5,r5,20
 100793c:	31803fcc 	andi	r6,r6,255
 1007940:	01000434 	movhi	r4,16
 1007944:	300c97fa 	slli	r6,r6,31
 1007948:	213fffc4 	addi	r4,r4,-1
 100794c:	1906703a 	and	r3,r3,r4
 1007950:	1946b03a 	or	r3,r3,r5
 1007954:	1986b03a 	or	r3,r3,r6
 1007958:	dfc00217 	ldw	ra,8(sp)
 100795c:	dc400117 	ldw	r17,4(sp)
 1007960:	dc000017 	ldw	r16,0(sp)
 1007964:	dec00304 	addi	sp,sp,12
 1007968:	f800283a 	ret
 100796c:	00c002c4 	movi	r3,11
 1007970:	1887c83a 	sub	r3,r3,r2
 1007974:	88c6d83a 	srl	r3,r17,r3
 1007978:	8904983a 	sll	r2,r17,r4
 100797c:	01000434 	movhi	r4,16
 1007980:	213fffc4 	addi	r4,r4,-1
 1007984:	2941ffcc 	andi	r5,r5,2047
 1007988:	1906703a 	and	r3,r3,r4
 100798c:	800d883a 	mov	r6,r16
 1007990:	003fe906 	br	1007938 <__alt_data_end+0xff495e38>
 1007994:	000d883a 	mov	r6,zero
 1007998:	000b883a 	mov	r5,zero
 100799c:	0007883a 	mov	r3,zero
 10079a0:	0005883a 	mov	r2,zero
 10079a4:	003fe406 	br	1007938 <__alt_data_end+0xff495e38>
 10079a8:	0123c83a 	sub	r17,zero,r4
 10079ac:	003fd106 	br	10078f4 <__alt_data_end+0xff495df4>

010079b0 <__floatunsidf>:
 10079b0:	defffe04 	addi	sp,sp,-8
 10079b4:	dc000015 	stw	r16,0(sp)
 10079b8:	dfc00115 	stw	ra,4(sp)
 10079bc:	2021883a 	mov	r16,r4
 10079c0:	20002226 	beq	r4,zero,1007a4c <__floatunsidf+0x9c>
 10079c4:	10012e00 	call	10012e0 <__clzsi2>
 10079c8:	01010784 	movi	r4,1054
 10079cc:	2089c83a 	sub	r4,r4,r2
 10079d0:	01810cc4 	movi	r6,1075
 10079d4:	310dc83a 	sub	r6,r6,r4
 10079d8:	00c007c4 	movi	r3,31
 10079dc:	1980120e 	bge	r3,r6,1007a28 <__floatunsidf+0x78>
 10079e0:	00c104c4 	movi	r3,1043
 10079e4:	1907c83a 	sub	r3,r3,r4
 10079e8:	80ca983a 	sll	r5,r16,r3
 10079ec:	00800434 	movhi	r2,16
 10079f0:	10bfffc4 	addi	r2,r2,-1
 10079f4:	2101ffcc 	andi	r4,r4,2047
 10079f8:	0021883a 	mov	r16,zero
 10079fc:	288a703a 	and	r5,r5,r2
 1007a00:	2008953a 	slli	r4,r4,20
 1007a04:	00c00434 	movhi	r3,16
 1007a08:	18ffffc4 	addi	r3,r3,-1
 1007a0c:	28c6703a 	and	r3,r5,r3
 1007a10:	8005883a 	mov	r2,r16
 1007a14:	1906b03a 	or	r3,r3,r4
 1007a18:	dfc00117 	ldw	ra,4(sp)
 1007a1c:	dc000017 	ldw	r16,0(sp)
 1007a20:	dec00204 	addi	sp,sp,8
 1007a24:	f800283a 	ret
 1007a28:	00c002c4 	movi	r3,11
 1007a2c:	188bc83a 	sub	r5,r3,r2
 1007a30:	814ad83a 	srl	r5,r16,r5
 1007a34:	00c00434 	movhi	r3,16
 1007a38:	18ffffc4 	addi	r3,r3,-1
 1007a3c:	81a0983a 	sll	r16,r16,r6
 1007a40:	2101ffcc 	andi	r4,r4,2047
 1007a44:	28ca703a 	and	r5,r5,r3
 1007a48:	003fed06 	br	1007a00 <__alt_data_end+0xff495f00>
 1007a4c:	0009883a 	mov	r4,zero
 1007a50:	000b883a 	mov	r5,zero
 1007a54:	003fea06 	br	1007a00 <__alt_data_end+0xff495f00>

01007a58 <__extendsfdf2>:
 1007a58:	200ad5fa 	srli	r5,r4,23
 1007a5c:	defffd04 	addi	sp,sp,-12
 1007a60:	dc400115 	stw	r17,4(sp)
 1007a64:	29403fcc 	andi	r5,r5,255
 1007a68:	29800044 	addi	r6,r5,1
 1007a6c:	04402034 	movhi	r17,128
 1007a70:	dc000015 	stw	r16,0(sp)
 1007a74:	8c7fffc4 	addi	r17,r17,-1
 1007a78:	dfc00215 	stw	ra,8(sp)
 1007a7c:	31803fcc 	andi	r6,r6,255
 1007a80:	00800044 	movi	r2,1
 1007a84:	8922703a 	and	r17,r17,r4
 1007a88:	2020d7fa 	srli	r16,r4,31
 1007a8c:	1180110e 	bge	r2,r6,1007ad4 <__extendsfdf2+0x7c>
 1007a90:	880cd0fa 	srli	r6,r17,3
 1007a94:	8822977a 	slli	r17,r17,29
 1007a98:	2940e004 	addi	r5,r5,896
 1007a9c:	2941ffcc 	andi	r5,r5,2047
 1007aa0:	2804953a 	slli	r2,r5,20
 1007aa4:	01400434 	movhi	r5,16
 1007aa8:	800697fa 	slli	r3,r16,31
 1007aac:	297fffc4 	addi	r5,r5,-1
 1007ab0:	314a703a 	and	r5,r6,r5
 1007ab4:	288ab03a 	or	r5,r5,r2
 1007ab8:	28c6b03a 	or	r3,r5,r3
 1007abc:	8805883a 	mov	r2,r17
 1007ac0:	dfc00217 	ldw	ra,8(sp)
 1007ac4:	dc400117 	ldw	r17,4(sp)
 1007ac8:	dc000017 	ldw	r16,0(sp)
 1007acc:	dec00304 	addi	sp,sp,12
 1007ad0:	f800283a 	ret
 1007ad4:	2800111e 	bne	r5,zero,1007b1c <__extendsfdf2+0xc4>
 1007ad8:	88001c26 	beq	r17,zero,1007b4c <__extendsfdf2+0xf4>
 1007adc:	8809883a 	mov	r4,r17
 1007ae0:	10012e00 	call	10012e0 <__clzsi2>
 1007ae4:	00c00284 	movi	r3,10
 1007ae8:	18801b16 	blt	r3,r2,1007b58 <__extendsfdf2+0x100>
 1007aec:	018002c4 	movi	r6,11
 1007af0:	308dc83a 	sub	r6,r6,r2
 1007af4:	11000544 	addi	r4,r2,21
 1007af8:	8986d83a 	srl	r3,r17,r6
 1007afc:	8922983a 	sll	r17,r17,r4
 1007b00:	0180e244 	movi	r6,905
 1007b04:	01400434 	movhi	r5,16
 1007b08:	3085c83a 	sub	r2,r6,r2
 1007b0c:	297fffc4 	addi	r5,r5,-1
 1007b10:	194c703a 	and	r6,r3,r5
 1007b14:	1141ffcc 	andi	r5,r2,2047
 1007b18:	003fe006 	br	1007a9c <__alt_data_end+0xff495f9c>
 1007b1c:	88000826 	beq	r17,zero,1007b40 <__extendsfdf2+0xe8>
 1007b20:	880cd0fa 	srli	r6,r17,3
 1007b24:	00800434 	movhi	r2,16
 1007b28:	10bfffc4 	addi	r2,r2,-1
 1007b2c:	31800234 	orhi	r6,r6,8
 1007b30:	8822977a 	slli	r17,r17,29
 1007b34:	308c703a 	and	r6,r6,r2
 1007b38:	0141ffc4 	movi	r5,2047
 1007b3c:	003fd706 	br	1007a9c <__alt_data_end+0xff495f9c>
 1007b40:	0141ffc4 	movi	r5,2047
 1007b44:	000d883a 	mov	r6,zero
 1007b48:	003fd406 	br	1007a9c <__alt_data_end+0xff495f9c>
 1007b4c:	000b883a 	mov	r5,zero
 1007b50:	000d883a 	mov	r6,zero
 1007b54:	003fd106 	br	1007a9c <__alt_data_end+0xff495f9c>
 1007b58:	11bffd44 	addi	r6,r2,-11
 1007b5c:	8986983a 	sll	r3,r17,r6
 1007b60:	0023883a 	mov	r17,zero
 1007b64:	003fe606 	br	1007b00 <__alt_data_end+0xff496000>

01007b68 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1007b68:	defffc04 	addi	sp,sp,-16
 1007b6c:	df000315 	stw	fp,12(sp)
 1007b70:	df000304 	addi	fp,sp,12
 1007b74:	e13ffd15 	stw	r4,-12(fp)
 1007b78:	e17ffe15 	stw	r5,-8(fp)
 1007b7c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1007b80:	e0fffe17 	ldw	r3,-8(fp)
 1007b84:	e0bffd17 	ldw	r2,-12(fp)
 1007b88:	18800c26 	beq	r3,r2,1007bbc <alt_load_section+0x54>
  {
    while( to != end )
 1007b8c:	00000806 	br	1007bb0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1007b90:	e0bffe17 	ldw	r2,-8(fp)
 1007b94:	10c00104 	addi	r3,r2,4
 1007b98:	e0fffe15 	stw	r3,-8(fp)
 1007b9c:	e0fffd17 	ldw	r3,-12(fp)
 1007ba0:	19000104 	addi	r4,r3,4
 1007ba4:	e13ffd15 	stw	r4,-12(fp)
 1007ba8:	18c00017 	ldw	r3,0(r3)
 1007bac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1007bb0:	e0fffe17 	ldw	r3,-8(fp)
 1007bb4:	e0bfff17 	ldw	r2,-4(fp)
 1007bb8:	18bff51e 	bne	r3,r2,1007b90 <__alt_data_end+0xff496090>
    {
      *to++ = *from++;
    }
  }
}
 1007bbc:	0001883a 	nop
 1007bc0:	e037883a 	mov	sp,fp
 1007bc4:	df000017 	ldw	fp,0(sp)
 1007bc8:	dec00104 	addi	sp,sp,4
 1007bcc:	f800283a 	ret

01007bd0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1007bd0:	defffe04 	addi	sp,sp,-8
 1007bd4:	dfc00115 	stw	ra,4(sp)
 1007bd8:	df000015 	stw	fp,0(sp)
 1007bdc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1007be0:	01804074 	movhi	r6,257
 1007be4:	31a69a04 	addi	r6,r6,-26008
 1007be8:	01404074 	movhi	r5,257
 1007bec:	2965e104 	addi	r5,r5,-26748
 1007bf0:	01004074 	movhi	r4,257
 1007bf4:	21269a04 	addi	r4,r4,-26008
 1007bf8:	1007b680 	call	1007b68 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1007bfc:	01804034 	movhi	r6,256
 1007c00:	31809104 	addi	r6,r6,580
 1007c04:	01404034 	movhi	r5,256
 1007c08:	29400804 	addi	r5,r5,32
 1007c0c:	01004034 	movhi	r4,256
 1007c10:	21000804 	addi	r4,r4,32
 1007c14:	1007b680 	call	1007b68 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1007c18:	01804074 	movhi	r6,257
 1007c1c:	31a5e104 	addi	r6,r6,-26748
 1007c20:	01404074 	movhi	r5,257
 1007c24:	29653b04 	addi	r5,r5,-27412
 1007c28:	01004074 	movhi	r4,257
 1007c2c:	21253b04 	addi	r4,r4,-27412
 1007c30:	1007b680 	call	1007b68 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1007c34:	10084a00 	call	10084a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1007c38:	10085f40 	call	10085f4 <alt_icache_flush_all>
}
 1007c3c:	0001883a 	nop
 1007c40:	e037883a 	mov	sp,fp
 1007c44:	dfc00117 	ldw	ra,4(sp)
 1007c48:	df000017 	ldw	fp,0(sp)
 1007c4c:	dec00204 	addi	sp,sp,8
 1007c50:	f800283a 	ret

01007c54 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1007c54:	defffd04 	addi	sp,sp,-12
 1007c58:	dfc00215 	stw	ra,8(sp)
 1007c5c:	df000115 	stw	fp,4(sp)
 1007c60:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1007c64:	0009883a 	mov	r4,zero
 1007c68:	1007fd00 	call	1007fd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1007c6c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1007c70:	10080080 	call	1008008 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1007c74:	01804074 	movhi	r6,257
 1007c78:	31a5d604 	addi	r6,r6,-26792
 1007c7c:	01404074 	movhi	r5,257
 1007c80:	2965d604 	addi	r5,r5,-26792
 1007c84:	01004074 	movhi	r4,257
 1007c88:	2125d604 	addi	r4,r4,-26792
 1007c8c:	10089ac0 	call	10089ac <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1007c90:	d0a0c817 	ldw	r2,-31968(gp)
 1007c94:	d0e0c917 	ldw	r3,-31964(gp)
 1007c98:	d120ca17 	ldw	r4,-31960(gp)
 1007c9c:	200d883a 	mov	r6,r4
 1007ca0:	180b883a 	mov	r5,r3
 1007ca4:	1009883a 	mov	r4,r2
 1007ca8:	100043c0 	call	100043c <main>
 1007cac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1007cb0:	01000044 	movi	r4,1
 1007cb4:	10083c80 	call	10083c8 <close>
  exit (result);
 1007cb8:	e13fff17 	ldw	r4,-4(fp)
 1007cbc:	10092800 	call	1009280 <exit>

01007cc0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1007cc0:	defffd04 	addi	sp,sp,-12
 1007cc4:	dfc00215 	stw	ra,8(sp)
 1007cc8:	df000115 	stw	fp,4(sp)
 1007ccc:	df000104 	addi	fp,sp,4
 1007cd0:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
 1007cd4:	d0a00117 	ldw	r2,-32764(gp)
 1007cd8:	10800217 	ldw	r2,8(r2)
 1007cdc:	100b883a 	mov	r5,r2
 1007ce0:	e13fff17 	ldw	r4,-4(fp)
 1007ce4:	10092a00 	call	10092a0 <fputs>
#endif
#endif
}
 1007ce8:	e037883a 	mov	sp,fp
 1007cec:	dfc00117 	ldw	ra,4(sp)
 1007cf0:	df000017 	ldw	fp,0(sp)
 1007cf4:	dec00204 	addi	sp,sp,8
 1007cf8:	f800283a 	ret

01007cfc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1007cfc:	defff904 	addi	sp,sp,-28
 1007d00:	df000615 	stw	fp,24(sp)
 1007d04:	df000604 	addi	fp,sp,24
 1007d08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007d0c:	0005303a 	rdctl	r2,status
 1007d10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007d14:	e0fffe17 	ldw	r3,-8(fp)
 1007d18:	00bfff84 	movi	r2,-2
 1007d1c:	1884703a 	and	r2,r3,r2
 1007d20:	1001703a 	wrctl	status,r2
  
  return context;
 1007d24:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1007d28:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1007d2c:	d0a00217 	ldw	r2,-32760(gp)
 1007d30:	10c000c4 	addi	r3,r2,3
 1007d34:	00bfff04 	movi	r2,-4
 1007d38:	1884703a 	and	r2,r3,r2
 1007d3c:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1007d40:	d0e00217 	ldw	r3,-32760(gp)
 1007d44:	e0bfff17 	ldw	r2,-4(fp)
 1007d48:	1887883a 	add	r3,r3,r2
 1007d4c:	00806df4 	movhi	r2,439
 1007d50:	1086c004 	addi	r2,r2,6912
 1007d54:	10c0062e 	bgeu	r2,r3,1007d70 <sbrk+0x74>
 1007d58:	e0bffb17 	ldw	r2,-20(fp)
 1007d5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007d60:	e0bffa17 	ldw	r2,-24(fp)
 1007d64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1007d68:	00bfffc4 	movi	r2,-1
 1007d6c:	00000b06 	br	1007d9c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1007d70:	d0a00217 	ldw	r2,-32760(gp)
 1007d74:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1007d78:	d0e00217 	ldw	r3,-32760(gp)
 1007d7c:	e0bfff17 	ldw	r2,-4(fp)
 1007d80:	1885883a 	add	r2,r3,r2
 1007d84:	d0a00215 	stw	r2,-32760(gp)
 1007d88:	e0bffb17 	ldw	r2,-20(fp)
 1007d8c:	e0bffc15 	stw	r2,-16(fp)
 1007d90:	e0bffc17 	ldw	r2,-16(fp)
 1007d94:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1007d98:	e0bffd17 	ldw	r2,-12(fp)
} 
 1007d9c:	e037883a 	mov	sp,fp
 1007da0:	df000017 	ldw	fp,0(sp)
 1007da4:	dec00104 	addi	sp,sp,4
 1007da8:	f800283a 	ret

01007dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1007dac:	defffe04 	addi	sp,sp,-8
 1007db0:	dfc00115 	stw	ra,4(sp)
 1007db4:	df000015 	stw	fp,0(sp)
 1007db8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1007dbc:	d0a00817 	ldw	r2,-32736(gp)
 1007dc0:	10000326 	beq	r2,zero,1007dd0 <alt_get_errno+0x24>
 1007dc4:	d0a00817 	ldw	r2,-32736(gp)
 1007dc8:	103ee83a 	callr	r2
 1007dcc:	00000106 	br	1007dd4 <alt_get_errno+0x28>
 1007dd0:	d0a0c704 	addi	r2,gp,-31972
}
 1007dd4:	e037883a 	mov	sp,fp
 1007dd8:	dfc00117 	ldw	ra,4(sp)
 1007ddc:	df000017 	ldw	fp,0(sp)
 1007de0:	dec00204 	addi	sp,sp,8
 1007de4:	f800283a 	ret

01007de8 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 1007de8:	defffc04 	addi	sp,sp,-16
 1007dec:	dfc00315 	stw	ra,12(sp)
 1007df0:	df000215 	stw	fp,8(sp)
 1007df4:	df000204 	addi	fp,sp,8
 1007df8:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1007dfc:	d0a0cd17 	ldw	r2,-31948(gp)
  clock_t ticks = alt_nticks(); 
 1007e00:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1007e04:	d0a0cc17 	ldw	r2,-31952(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 1007e08:	1000061e 	bne	r2,zero,1007e24 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 1007e0c:	1007dac0 	call	1007dac <alt_get_errno>
 1007e10:	1007883a 	mov	r3,r2
 1007e14:	00801604 	movi	r2,88
 1007e18:	18800015 	stw	r2,0(r3)
    return 0;
 1007e1c:	0005883a 	mov	r2,zero
 1007e20:	00000a06 	br	1007e4c <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 1007e24:	e0bfff17 	ldw	r2,-4(fp)
 1007e28:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 1007e2c:	e0bfff17 	ldw	r2,-4(fp)
 1007e30:	e0fffe17 	ldw	r3,-8(fp)
 1007e34:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 1007e38:	e0bfff17 	ldw	r2,-4(fp)
 1007e3c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 1007e40:	e0bfff17 	ldw	r2,-4(fp)
 1007e44:	10000315 	stw	zero,12(r2)

  return ticks;
 1007e48:	e0bffe17 	ldw	r2,-8(fp)
}
 1007e4c:	e037883a 	mov	sp,fp
 1007e50:	dfc00117 	ldw	ra,4(sp)
 1007e54:	df000017 	ldw	fp,0(sp)
 1007e58:	dec00204 	addi	sp,sp,8
 1007e5c:	f800283a 	ret

01007e60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1007e60:	defffe04 	addi	sp,sp,-8
 1007e64:	dfc00115 	stw	ra,4(sp)
 1007e68:	df000015 	stw	fp,0(sp)
 1007e6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1007e70:	d0a00817 	ldw	r2,-32736(gp)
 1007e74:	10000326 	beq	r2,zero,1007e84 <alt_get_errno+0x24>
 1007e78:	d0a00817 	ldw	r2,-32736(gp)
 1007e7c:	103ee83a 	callr	r2
 1007e80:	00000106 	br	1007e88 <alt_get_errno+0x28>
 1007e84:	d0a0c704 	addi	r2,gp,-31972
}
 1007e88:	e037883a 	mov	sp,fp
 1007e8c:	dfc00117 	ldw	ra,4(sp)
 1007e90:	df000017 	ldw	fp,0(sp)
 1007e94:	dec00204 	addi	sp,sp,8
 1007e98:	f800283a 	ret

01007e9c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1007e9c:	defff904 	addi	sp,sp,-28
 1007ea0:	dfc00615 	stw	ra,24(sp)
 1007ea4:	df000515 	stw	fp,20(sp)
 1007ea8:	df000504 	addi	fp,sp,20
 1007eac:	e13ffd15 	stw	r4,-12(fp)
 1007eb0:	e17ffe15 	stw	r5,-8(fp)
 1007eb4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1007eb8:	e0bffd17 	ldw	r2,-12(fp)
 1007ebc:	10000816 	blt	r2,zero,1007ee0 <write+0x44>
 1007ec0:	01400304 	movi	r5,12
 1007ec4:	e13ffd17 	ldw	r4,-12(fp)
 1007ec8:	10013440 	call	1001344 <__mulsi3>
 1007ecc:	1007883a 	mov	r3,r2
 1007ed0:	00804074 	movhi	r2,257
 1007ed4:	10a62e04 	addi	r2,r2,-26440
 1007ed8:	1885883a 	add	r2,r3,r2
 1007edc:	00000106 	br	1007ee4 <write+0x48>
 1007ee0:	0005883a 	mov	r2,zero
 1007ee4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1007ee8:	e0bffb17 	ldw	r2,-20(fp)
 1007eec:	10002126 	beq	r2,zero,1007f74 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1007ef0:	e0bffb17 	ldw	r2,-20(fp)
 1007ef4:	10800217 	ldw	r2,8(r2)
 1007ef8:	108000cc 	andi	r2,r2,3
 1007efc:	10001826 	beq	r2,zero,1007f60 <write+0xc4>
 1007f00:	e0bffb17 	ldw	r2,-20(fp)
 1007f04:	10800017 	ldw	r2,0(r2)
 1007f08:	10800617 	ldw	r2,24(r2)
 1007f0c:	10001426 	beq	r2,zero,1007f60 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1007f10:	e0bffb17 	ldw	r2,-20(fp)
 1007f14:	10800017 	ldw	r2,0(r2)
 1007f18:	10800617 	ldw	r2,24(r2)
 1007f1c:	e0ffff17 	ldw	r3,-4(fp)
 1007f20:	180d883a 	mov	r6,r3
 1007f24:	e17ffe17 	ldw	r5,-8(fp)
 1007f28:	e13ffb17 	ldw	r4,-20(fp)
 1007f2c:	103ee83a 	callr	r2
 1007f30:	e0bffc15 	stw	r2,-16(fp)
 1007f34:	e0bffc17 	ldw	r2,-16(fp)
 1007f38:	1000070e 	bge	r2,zero,1007f58 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 1007f3c:	1007e600 	call	1007e60 <alt_get_errno>
 1007f40:	1007883a 	mov	r3,r2
 1007f44:	e0bffc17 	ldw	r2,-16(fp)
 1007f48:	0085c83a 	sub	r2,zero,r2
 1007f4c:	18800015 	stw	r2,0(r3)
        return -1;
 1007f50:	00bfffc4 	movi	r2,-1
 1007f54:	00000c06 	br	1007f88 <write+0xec>
      }
      return rval;
 1007f58:	e0bffc17 	ldw	r2,-16(fp)
 1007f5c:	00000a06 	br	1007f88 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1007f60:	1007e600 	call	1007e60 <alt_get_errno>
 1007f64:	1007883a 	mov	r3,r2
 1007f68:	00800344 	movi	r2,13
 1007f6c:	18800015 	stw	r2,0(r3)
 1007f70:	00000406 	br	1007f84 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1007f74:	1007e600 	call	1007e60 <alt_get_errno>
 1007f78:	1007883a 	mov	r3,r2
 1007f7c:	00801444 	movi	r2,81
 1007f80:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1007f84:	00bfffc4 	movi	r2,-1
}
 1007f88:	e037883a 	mov	sp,fp
 1007f8c:	dfc00117 	ldw	ra,4(sp)
 1007f90:	df000017 	ldw	fp,0(sp)
 1007f94:	dec00204 	addi	sp,sp,8
 1007f98:	f800283a 	ret

01007f9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1007f9c:	defffd04 	addi	sp,sp,-12
 1007fa0:	dfc00215 	stw	ra,8(sp)
 1007fa4:	df000115 	stw	fp,4(sp)
 1007fa8:	df000104 	addi	fp,sp,4
 1007fac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1007fb0:	d1600504 	addi	r5,gp,-32748
 1007fb4:	e13fff17 	ldw	r4,-4(fp)
 1007fb8:	10085500 	call	1008550 <alt_dev_llist_insert>
}
 1007fbc:	e037883a 	mov	sp,fp
 1007fc0:	dfc00117 	ldw	ra,4(sp)
 1007fc4:	df000017 	ldw	fp,0(sp)
 1007fc8:	dec00204 	addi	sp,sp,8
 1007fcc:	f800283a 	ret

01007fd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1007fd0:	defffd04 	addi	sp,sp,-12
 1007fd4:	dfc00215 	stw	ra,8(sp)
 1007fd8:	df000115 	stw	fp,4(sp)
 1007fdc:	df000104 	addi	fp,sp,4
 1007fe0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 1007fe4:	1008ed40 	call	1008ed4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1007fe8:	00800044 	movi	r2,1
 1007fec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1007ff0:	0001883a 	nop
 1007ff4:	e037883a 	mov	sp,fp
 1007ff8:	dfc00117 	ldw	ra,4(sp)
 1007ffc:	df000017 	ldw	fp,0(sp)
 1008000:	dec00204 	addi	sp,sp,8
 1008004:	f800283a 	ret

01008008 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1008008:	defffe04 	addi	sp,sp,-8
 100800c:	dfc00115 	stw	ra,4(sp)
 1008010:	df000015 	stw	fp,0(sp)
 1008014:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 1008018:	01c0fa04 	movi	r7,1000
 100801c:	01800044 	movi	r6,1
 1008020:	000b883a 	mov	r5,zero
 1008024:	01008034 	movhi	r4,512
 1008028:	21040004 	addi	r4,r4,4096
 100802c:	10083100 	call	1008310 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1008030:	01004074 	movhi	r4,257
 1008034:	21261904 	addi	r4,r4,-26524
 1008038:	1007f9c0 	call	1007f9c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 100803c:	0001883a 	nop
}
 1008040:	0001883a 	nop
 1008044:	e037883a 	mov	sp,fp
 1008048:	dfc00117 	ldw	ra,4(sp)
 100804c:	df000017 	ldw	fp,0(sp)
 1008050:	dec00204 	addi	sp,sp,8
 1008054:	f800283a 	ret

01008058 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1008058:	defffa04 	addi	sp,sp,-24
 100805c:	dfc00515 	stw	ra,20(sp)
 1008060:	df000415 	stw	fp,16(sp)
 1008064:	df000404 	addi	fp,sp,16
 1008068:	e13ffd15 	stw	r4,-12(fp)
 100806c:	e17ffe15 	stw	r5,-8(fp)
 1008070:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1008074:	e0bffd17 	ldw	r2,-12(fp)
 1008078:	10800017 	ldw	r2,0(r2)
 100807c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1008080:	e0bffc17 	ldw	r2,-16(fp)
 1008084:	10c00a04 	addi	r3,r2,40
 1008088:	e0bffd17 	ldw	r2,-12(fp)
 100808c:	10800217 	ldw	r2,8(r2)
 1008090:	100f883a 	mov	r7,r2
 1008094:	e1bfff17 	ldw	r6,-4(fp)
 1008098:	e17ffe17 	ldw	r5,-8(fp)
 100809c:	1809883a 	mov	r4,r3
 10080a0:	10081180 	call	1008118 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10080a4:	e037883a 	mov	sp,fp
 10080a8:	dfc00117 	ldw	ra,4(sp)
 10080ac:	df000017 	ldw	fp,0(sp)
 10080b0:	dec00204 	addi	sp,sp,8
 10080b4:	f800283a 	ret

010080b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10080b8:	defffa04 	addi	sp,sp,-24
 10080bc:	dfc00515 	stw	ra,20(sp)
 10080c0:	df000415 	stw	fp,16(sp)
 10080c4:	df000404 	addi	fp,sp,16
 10080c8:	e13ffd15 	stw	r4,-12(fp)
 10080cc:	e17ffe15 	stw	r5,-8(fp)
 10080d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10080d4:	e0bffd17 	ldw	r2,-12(fp)
 10080d8:	10800017 	ldw	r2,0(r2)
 10080dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10080e0:	e0bffc17 	ldw	r2,-16(fp)
 10080e4:	10c00a04 	addi	r3,r2,40
 10080e8:	e0bffd17 	ldw	r2,-12(fp)
 10080ec:	10800217 	ldw	r2,8(r2)
 10080f0:	100f883a 	mov	r7,r2
 10080f4:	e1bfff17 	ldw	r6,-4(fp)
 10080f8:	e17ffe17 	ldw	r5,-8(fp)
 10080fc:	1809883a 	mov	r4,r3
 1008100:	10082040 	call	1008204 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1008104:	e037883a 	mov	sp,fp
 1008108:	dfc00117 	ldw	ra,4(sp)
 100810c:	df000017 	ldw	fp,0(sp)
 1008110:	dec00204 	addi	sp,sp,8
 1008114:	f800283a 	ret

01008118 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 1008118:	defff704 	addi	sp,sp,-36
 100811c:	df000815 	stw	fp,32(sp)
 1008120:	df000804 	addi	fp,sp,32
 1008124:	e13ffc15 	stw	r4,-16(fp)
 1008128:	e17ffd15 	stw	r5,-12(fp)
 100812c:	e1bffe15 	stw	r6,-8(fp)
 1008130:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 1008134:	e0bffc17 	ldw	r2,-16(fp)
 1008138:	10800017 	ldw	r2,0(r2)
 100813c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 1008140:	e0bffd17 	ldw	r2,-12(fp)
 1008144:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 1008148:	e0bffe17 	ldw	r2,-8(fp)
 100814c:	e0fffd17 	ldw	r3,-12(fp)
 1008150:	1885883a 	add	r2,r3,r2
 1008154:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 1008158:	00001206 	br	10081a4 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100815c:	e0bff917 	ldw	r2,-28(fp)
 1008160:	10800037 	ldwio	r2,0(r2)
 1008164:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 1008168:	e0bffb17 	ldw	r2,-20(fp)
 100816c:	10a0000c 	andi	r2,r2,32768
 1008170:	10000626 	beq	r2,zero,100818c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1008174:	e0bff817 	ldw	r2,-32(fp)
 1008178:	10c00044 	addi	r3,r2,1
 100817c:	e0fff815 	stw	r3,-32(fp)
 1008180:	e0fffb17 	ldw	r3,-20(fp)
 1008184:	10c00005 	stb	r3,0(r2)
 1008188:	00000606 	br	10081a4 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 100818c:	e0fff817 	ldw	r3,-32(fp)
 1008190:	e0bffd17 	ldw	r2,-12(fp)
 1008194:	1880071e 	bne	r3,r2,10081b4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 1008198:	e0bfff17 	ldw	r2,-4(fp)
 100819c:	1090000c 	andi	r2,r2,16384
 10081a0:	1000061e 	bne	r2,zero,10081bc <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 10081a4:	e0fff817 	ldw	r3,-32(fp)
 10081a8:	e0bffa17 	ldw	r2,-24(fp)
 10081ac:	18bfeb36 	bltu	r3,r2,100815c <__alt_data_end+0xff49665c>
 10081b0:	00000306 	br	10081c0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 10081b4:	0001883a 	nop
 10081b8:	00000106 	br	10081c0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 10081bc:	0001883a 	nop
    
  }

  if (ptr != buffer)
 10081c0:	e0fff817 	ldw	r3,-32(fp)
 10081c4:	e0bffd17 	ldw	r2,-12(fp)
 10081c8:	18800426 	beq	r3,r2,10081dc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 10081cc:	e0fff817 	ldw	r3,-32(fp)
 10081d0:	e0bffd17 	ldw	r2,-12(fp)
 10081d4:	1885c83a 	sub	r2,r3,r2
 10081d8:	00000606 	br	10081f4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 10081dc:	e0bfff17 	ldw	r2,-4(fp)
 10081e0:	1090000c 	andi	r2,r2,16384
 10081e4:	10000226 	beq	r2,zero,10081f0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 10081e8:	00bffd44 	movi	r2,-11
 10081ec:	00000106 	br	10081f4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 10081f0:	00bffec4 	movi	r2,-5
}
 10081f4:	e037883a 	mov	sp,fp
 10081f8:	df000017 	ldw	fp,0(sp)
 10081fc:	dec00104 	addi	sp,sp,4
 1008200:	f800283a 	ret

01008204 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1008204:	defff904 	addi	sp,sp,-28
 1008208:	df000615 	stw	fp,24(sp)
 100820c:	df000604 	addi	fp,sp,24
 1008210:	e13ffc15 	stw	r4,-16(fp)
 1008214:	e17ffd15 	stw	r5,-12(fp)
 1008218:	e1bffe15 	stw	r6,-8(fp)
 100821c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 1008220:	e0bffc17 	ldw	r2,-16(fp)
 1008224:	10800017 	ldw	r2,0(r2)
 1008228:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 100822c:	e0bffe17 	ldw	r2,-8(fp)
 1008230:	e0fffd17 	ldw	r3,-12(fp)
 1008234:	1885883a 	add	r2,r3,r2
 1008238:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 100823c:	00000e06 	br	1008278 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1008240:	e0bffa17 	ldw	r2,-24(fp)
 1008244:	10800104 	addi	r2,r2,4
 1008248:	10800037 	ldwio	r2,0(r2)
 100824c:	10bfffec 	andhi	r2,r2,65535
 1008250:	10000926 	beq	r2,zero,1008278 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 1008254:	e0fffa17 	ldw	r3,-24(fp)
 1008258:	e0bffd17 	ldw	r2,-12(fp)
 100825c:	11000044 	addi	r4,r2,1
 1008260:	e13ffd15 	stw	r4,-12(fp)
 1008264:	10800003 	ldbu	r2,0(r2)
 1008268:	10803fcc 	andi	r2,r2,255
 100826c:	1080201c 	xori	r2,r2,128
 1008270:	10bfe004 	addi	r2,r2,-128
 1008274:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 1008278:	e0fffd17 	ldw	r3,-12(fp)
 100827c:	e0bffb17 	ldw	r2,-20(fp)
 1008280:	18bfef36 	bltu	r3,r2,1008240 <__alt_data_end+0xff496740>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 1008284:	e0bffe17 	ldw	r2,-8(fp)
}
 1008288:	e037883a 	mov	sp,fp
 100828c:	df000017 	ldw	fp,0(sp)
 1008290:	dec00104 	addi	sp,sp,4
 1008294:	f800283a 	ret

01008298 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1008298:	defffa04 	addi	sp,sp,-24
 100829c:	dfc00515 	stw	ra,20(sp)
 10082a0:	df000415 	stw	fp,16(sp)
 10082a4:	df000404 	addi	fp,sp,16
 10082a8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10082ac:	0007883a 	mov	r3,zero
 10082b0:	e0bfff17 	ldw	r2,-4(fp)
 10082b4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10082b8:	e0bfff17 	ldw	r2,-4(fp)
 10082bc:	10800104 	addi	r2,r2,4
 10082c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10082c4:	0005303a 	rdctl	r2,status
 10082c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10082cc:	e0fffd17 	ldw	r3,-12(fp)
 10082d0:	00bfff84 	movi	r2,-2
 10082d4:	1884703a 	and	r2,r3,r2
 10082d8:	1001703a 	wrctl	status,r2
  
  return context;
 10082dc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10082e0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 10082e4:	1008dcc0 	call	1008dcc <alt_tick>
 10082e8:	e0bffc17 	ldw	r2,-16(fp)
 10082ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10082f0:	e0bffe17 	ldw	r2,-8(fp)
 10082f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10082f8:	0001883a 	nop
 10082fc:	e037883a 	mov	sp,fp
 1008300:	dfc00117 	ldw	ra,4(sp)
 1008304:	df000017 	ldw	fp,0(sp)
 1008308:	dec00204 	addi	sp,sp,8
 100830c:	f800283a 	ret

01008310 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1008310:	defff804 	addi	sp,sp,-32
 1008314:	dfc00715 	stw	ra,28(sp)
 1008318:	df000615 	stw	fp,24(sp)
 100831c:	df000604 	addi	fp,sp,24
 1008320:	e13ffc15 	stw	r4,-16(fp)
 1008324:	e17ffd15 	stw	r5,-12(fp)
 1008328:	e1bffe15 	stw	r6,-8(fp)
 100832c:	e1ffff15 	stw	r7,-4(fp)
 1008330:	e0bfff17 	ldw	r2,-4(fp)
 1008334:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1008338:	d0a0cc17 	ldw	r2,-31952(gp)
 100833c:	1000021e 	bne	r2,zero,1008348 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1008340:	e0bffb17 	ldw	r2,-20(fp)
 1008344:	d0a0cc15 	stw	r2,-31952(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1008348:	e0bffc17 	ldw	r2,-16(fp)
 100834c:	10800104 	addi	r2,r2,4
 1008350:	00c001c4 	movi	r3,7
 1008354:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1008358:	d8000015 	stw	zero,0(sp)
 100835c:	e1fffc17 	ldw	r7,-16(fp)
 1008360:	01804074 	movhi	r6,257
 1008364:	31a0a604 	addi	r6,r6,-32104
 1008368:	e17ffe17 	ldw	r5,-8(fp)
 100836c:	e13ffd17 	ldw	r4,-12(fp)
 1008370:	10086280 	call	1008628 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1008374:	0001883a 	nop
 1008378:	e037883a 	mov	sp,fp
 100837c:	dfc00117 	ldw	ra,4(sp)
 1008380:	df000017 	ldw	fp,0(sp)
 1008384:	dec00204 	addi	sp,sp,8
 1008388:	f800283a 	ret

0100838c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100838c:	defffe04 	addi	sp,sp,-8
 1008390:	dfc00115 	stw	ra,4(sp)
 1008394:	df000015 	stw	fp,0(sp)
 1008398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100839c:	d0a00817 	ldw	r2,-32736(gp)
 10083a0:	10000326 	beq	r2,zero,10083b0 <alt_get_errno+0x24>
 10083a4:	d0a00817 	ldw	r2,-32736(gp)
 10083a8:	103ee83a 	callr	r2
 10083ac:	00000106 	br	10083b4 <alt_get_errno+0x28>
 10083b0:	d0a0c704 	addi	r2,gp,-31972
}
 10083b4:	e037883a 	mov	sp,fp
 10083b8:	dfc00117 	ldw	ra,4(sp)
 10083bc:	df000017 	ldw	fp,0(sp)
 10083c0:	dec00204 	addi	sp,sp,8
 10083c4:	f800283a 	ret

010083c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10083c8:	defffb04 	addi	sp,sp,-20
 10083cc:	dfc00415 	stw	ra,16(sp)
 10083d0:	df000315 	stw	fp,12(sp)
 10083d4:	df000304 	addi	fp,sp,12
 10083d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10083dc:	e0bfff17 	ldw	r2,-4(fp)
 10083e0:	10000816 	blt	r2,zero,1008404 <close+0x3c>
 10083e4:	01400304 	movi	r5,12
 10083e8:	e13fff17 	ldw	r4,-4(fp)
 10083ec:	10013440 	call	1001344 <__mulsi3>
 10083f0:	1007883a 	mov	r3,r2
 10083f4:	00804074 	movhi	r2,257
 10083f8:	10a62e04 	addi	r2,r2,-26440
 10083fc:	1885883a 	add	r2,r3,r2
 1008400:	00000106 	br	1008408 <close+0x40>
 1008404:	0005883a 	mov	r2,zero
 1008408:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100840c:	e0bffd17 	ldw	r2,-12(fp)
 1008410:	10001926 	beq	r2,zero,1008478 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1008414:	e0bffd17 	ldw	r2,-12(fp)
 1008418:	10800017 	ldw	r2,0(r2)
 100841c:	10800417 	ldw	r2,16(r2)
 1008420:	10000626 	beq	r2,zero,100843c <close+0x74>
 1008424:	e0bffd17 	ldw	r2,-12(fp)
 1008428:	10800017 	ldw	r2,0(r2)
 100842c:	10800417 	ldw	r2,16(r2)
 1008430:	e13ffd17 	ldw	r4,-12(fp)
 1008434:	103ee83a 	callr	r2
 1008438:	00000106 	br	1008440 <close+0x78>
 100843c:	0005883a 	mov	r2,zero
 1008440:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1008444:	e13fff17 	ldw	r4,-4(fp)
 1008448:	1008cac0 	call	1008cac <alt_release_fd>
    if (rval < 0)
 100844c:	e0bffe17 	ldw	r2,-8(fp)
 1008450:	1000070e 	bge	r2,zero,1008470 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 1008454:	100838c0 	call	100838c <alt_get_errno>
 1008458:	1007883a 	mov	r3,r2
 100845c:	e0bffe17 	ldw	r2,-8(fp)
 1008460:	0085c83a 	sub	r2,zero,r2
 1008464:	18800015 	stw	r2,0(r3)
      return -1;
 1008468:	00bfffc4 	movi	r2,-1
 100846c:	00000706 	br	100848c <close+0xc4>
    }
    return 0;
 1008470:	0005883a 	mov	r2,zero
 1008474:	00000506 	br	100848c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1008478:	100838c0 	call	100838c <alt_get_errno>
 100847c:	1007883a 	mov	r3,r2
 1008480:	00801444 	movi	r2,81
 1008484:	18800015 	stw	r2,0(r3)
    return -1;
 1008488:	00bfffc4 	movi	r2,-1
  }
}
 100848c:	e037883a 	mov	sp,fp
 1008490:	dfc00117 	ldw	ra,4(sp)
 1008494:	df000017 	ldw	fp,0(sp)
 1008498:	dec00204 	addi	sp,sp,8
 100849c:	f800283a 	ret

010084a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10084a0:	defffe04 	addi	sp,sp,-8
 10084a4:	df000115 	stw	fp,4(sp)
 10084a8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10084ac:	e03fff15 	stw	zero,-4(fp)
 10084b0:	00000506 	br	10084c8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10084b4:	e0bfff17 	ldw	r2,-4(fp)
 10084b8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10084bc:	e0bfff17 	ldw	r2,-4(fp)
 10084c0:	10800804 	addi	r2,r2,32
 10084c4:	e0bfff15 	stw	r2,-4(fp)
 10084c8:	e0bfff17 	ldw	r2,-4(fp)
 10084cc:	10820030 	cmpltui	r2,r2,2048
 10084d0:	103ff81e 	bne	r2,zero,10084b4 <__alt_data_end+0xff4969b4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10084d4:	0001883a 	nop
 10084d8:	e037883a 	mov	sp,fp
 10084dc:	df000017 	ldw	fp,0(sp)
 10084e0:	dec00104 	addi	sp,sp,4
 10084e4:	f800283a 	ret

010084e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10084e8:	defffc04 	addi	sp,sp,-16
 10084ec:	df000315 	stw	fp,12(sp)
 10084f0:	df000304 	addi	fp,sp,12
 10084f4:	e13ffd15 	stw	r4,-12(fp)
 10084f8:	e17ffe15 	stw	r5,-8(fp)
 10084fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1008500:	e0bfff17 	ldw	r2,-4(fp)
}
 1008504:	e037883a 	mov	sp,fp
 1008508:	df000017 	ldw	fp,0(sp)
 100850c:	dec00104 	addi	sp,sp,4
 1008510:	f800283a 	ret

01008514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008514:	defffe04 	addi	sp,sp,-8
 1008518:	dfc00115 	stw	ra,4(sp)
 100851c:	df000015 	stw	fp,0(sp)
 1008520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008524:	d0a00817 	ldw	r2,-32736(gp)
 1008528:	10000326 	beq	r2,zero,1008538 <alt_get_errno+0x24>
 100852c:	d0a00817 	ldw	r2,-32736(gp)
 1008530:	103ee83a 	callr	r2
 1008534:	00000106 	br	100853c <alt_get_errno+0x28>
 1008538:	d0a0c704 	addi	r2,gp,-31972
}
 100853c:	e037883a 	mov	sp,fp
 1008540:	dfc00117 	ldw	ra,4(sp)
 1008544:	df000017 	ldw	fp,0(sp)
 1008548:	dec00204 	addi	sp,sp,8
 100854c:	f800283a 	ret

01008550 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1008550:	defffa04 	addi	sp,sp,-24
 1008554:	dfc00515 	stw	ra,20(sp)
 1008558:	df000415 	stw	fp,16(sp)
 100855c:	df000404 	addi	fp,sp,16
 1008560:	e13ffe15 	stw	r4,-8(fp)
 1008564:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1008568:	e0bffe17 	ldw	r2,-8(fp)
 100856c:	10000326 	beq	r2,zero,100857c <alt_dev_llist_insert+0x2c>
 1008570:	e0bffe17 	ldw	r2,-8(fp)
 1008574:	10800217 	ldw	r2,8(r2)
 1008578:	1000061e 	bne	r2,zero,1008594 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 100857c:	10085140 	call	1008514 <alt_get_errno>
 1008580:	1007883a 	mov	r3,r2
 1008584:	00800584 	movi	r2,22
 1008588:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100858c:	00bffa84 	movi	r2,-22
 1008590:	00001306 	br	10085e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1008594:	e0bffe17 	ldw	r2,-8(fp)
 1008598:	e0ffff17 	ldw	r3,-4(fp)
 100859c:	e0fffc15 	stw	r3,-16(fp)
 10085a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10085a4:	e0bffd17 	ldw	r2,-12(fp)
 10085a8:	e0fffc17 	ldw	r3,-16(fp)
 10085ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10085b0:	e0bffc17 	ldw	r2,-16(fp)
 10085b4:	10c00017 	ldw	r3,0(r2)
 10085b8:	e0bffd17 	ldw	r2,-12(fp)
 10085bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10085c0:	e0bffc17 	ldw	r2,-16(fp)
 10085c4:	10800017 	ldw	r2,0(r2)
 10085c8:	e0fffd17 	ldw	r3,-12(fp)
 10085cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 10085d0:	e0bffc17 	ldw	r2,-16(fp)
 10085d4:	e0fffd17 	ldw	r3,-12(fp)
 10085d8:	10c00015 	stw	r3,0(r2)

  return 0;  
 10085dc:	0005883a 	mov	r2,zero
}
 10085e0:	e037883a 	mov	sp,fp
 10085e4:	dfc00117 	ldw	ra,4(sp)
 10085e8:	df000017 	ldw	fp,0(sp)
 10085ec:	dec00204 	addi	sp,sp,8
 10085f0:	f800283a 	ret

010085f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10085f4:	defffe04 	addi	sp,sp,-8
 10085f8:	dfc00115 	stw	ra,4(sp)
 10085fc:	df000015 	stw	fp,0(sp)
 1008600:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1008604:	01420004 	movi	r5,2048
 1008608:	0009883a 	mov	r4,zero
 100860c:	10091540 	call	1009154 <alt_icache_flush>
#endif
}
 1008610:	0001883a 	nop
 1008614:	e037883a 	mov	sp,fp
 1008618:	dfc00117 	ldw	ra,4(sp)
 100861c:	df000017 	ldw	fp,0(sp)
 1008620:	dec00204 	addi	sp,sp,8
 1008624:	f800283a 	ret

01008628 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1008628:	defff904 	addi	sp,sp,-28
 100862c:	dfc00615 	stw	ra,24(sp)
 1008630:	df000515 	stw	fp,20(sp)
 1008634:	df000504 	addi	fp,sp,20
 1008638:	e13ffc15 	stw	r4,-16(fp)
 100863c:	e17ffd15 	stw	r5,-12(fp)
 1008640:	e1bffe15 	stw	r6,-8(fp)
 1008644:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1008648:	e0800217 	ldw	r2,8(fp)
 100864c:	d8800015 	stw	r2,0(sp)
 1008650:	e1ffff17 	ldw	r7,-4(fp)
 1008654:	e1bffe17 	ldw	r6,-8(fp)
 1008658:	e17ffd17 	ldw	r5,-12(fp)
 100865c:	e13ffc17 	ldw	r4,-16(fp)
 1008660:	10087d80 	call	10087d8 <alt_iic_isr_register>
}  
 1008664:	e037883a 	mov	sp,fp
 1008668:	dfc00117 	ldw	ra,4(sp)
 100866c:	df000017 	ldw	fp,0(sp)
 1008670:	dec00204 	addi	sp,sp,8
 1008674:	f800283a 	ret

01008678 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1008678:	defff904 	addi	sp,sp,-28
 100867c:	df000615 	stw	fp,24(sp)
 1008680:	df000604 	addi	fp,sp,24
 1008684:	e13ffe15 	stw	r4,-8(fp)
 1008688:	e17fff15 	stw	r5,-4(fp)
 100868c:	e0bfff17 	ldw	r2,-4(fp)
 1008690:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008694:	0005303a 	rdctl	r2,status
 1008698:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100869c:	e0fffb17 	ldw	r3,-20(fp)
 10086a0:	00bfff84 	movi	r2,-2
 10086a4:	1884703a 	and	r2,r3,r2
 10086a8:	1001703a 	wrctl	status,r2
  
  return context;
 10086ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10086b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 10086b4:	00c00044 	movi	r3,1
 10086b8:	e0bffa17 	ldw	r2,-24(fp)
 10086bc:	1884983a 	sll	r2,r3,r2
 10086c0:	1007883a 	mov	r3,r2
 10086c4:	d0a0cb17 	ldw	r2,-31956(gp)
 10086c8:	1884b03a 	or	r2,r3,r2
 10086cc:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10086d0:	d0a0cb17 	ldw	r2,-31956(gp)
 10086d4:	100170fa 	wrctl	ienable,r2
 10086d8:	e0bffc17 	ldw	r2,-16(fp)
 10086dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10086e0:	e0bffd17 	ldw	r2,-12(fp)
 10086e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10086e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 10086ec:	0001883a 	nop
}
 10086f0:	e037883a 	mov	sp,fp
 10086f4:	df000017 	ldw	fp,0(sp)
 10086f8:	dec00104 	addi	sp,sp,4
 10086fc:	f800283a 	ret

01008700 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1008700:	defff904 	addi	sp,sp,-28
 1008704:	df000615 	stw	fp,24(sp)
 1008708:	df000604 	addi	fp,sp,24
 100870c:	e13ffe15 	stw	r4,-8(fp)
 1008710:	e17fff15 	stw	r5,-4(fp)
 1008714:	e0bfff17 	ldw	r2,-4(fp)
 1008718:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100871c:	0005303a 	rdctl	r2,status
 1008720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008724:	e0fffb17 	ldw	r3,-20(fp)
 1008728:	00bfff84 	movi	r2,-2
 100872c:	1884703a 	and	r2,r3,r2
 1008730:	1001703a 	wrctl	status,r2
  
  return context;
 1008734:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1008738:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 100873c:	00c00044 	movi	r3,1
 1008740:	e0bffa17 	ldw	r2,-24(fp)
 1008744:	1884983a 	sll	r2,r3,r2
 1008748:	0084303a 	nor	r2,zero,r2
 100874c:	1007883a 	mov	r3,r2
 1008750:	d0a0cb17 	ldw	r2,-31956(gp)
 1008754:	1884703a 	and	r2,r3,r2
 1008758:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100875c:	d0a0cb17 	ldw	r2,-31956(gp)
 1008760:	100170fa 	wrctl	ienable,r2
 1008764:	e0bffc17 	ldw	r2,-16(fp)
 1008768:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100876c:	e0bffd17 	ldw	r2,-12(fp)
 1008770:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1008774:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1008778:	0001883a 	nop
}
 100877c:	e037883a 	mov	sp,fp
 1008780:	df000017 	ldw	fp,0(sp)
 1008784:	dec00104 	addi	sp,sp,4
 1008788:	f800283a 	ret

0100878c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100878c:	defffc04 	addi	sp,sp,-16
 1008790:	df000315 	stw	fp,12(sp)
 1008794:	df000304 	addi	fp,sp,12
 1008798:	e13ffe15 	stw	r4,-8(fp)
 100879c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10087a0:	000530fa 	rdctl	r2,ienable
 10087a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10087a8:	00c00044 	movi	r3,1
 10087ac:	e0bfff17 	ldw	r2,-4(fp)
 10087b0:	1884983a 	sll	r2,r3,r2
 10087b4:	1007883a 	mov	r3,r2
 10087b8:	e0bffd17 	ldw	r2,-12(fp)
 10087bc:	1884703a 	and	r2,r3,r2
 10087c0:	1004c03a 	cmpne	r2,r2,zero
 10087c4:	10803fcc 	andi	r2,r2,255
}
 10087c8:	e037883a 	mov	sp,fp
 10087cc:	df000017 	ldw	fp,0(sp)
 10087d0:	dec00104 	addi	sp,sp,4
 10087d4:	f800283a 	ret

010087d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10087d8:	defff504 	addi	sp,sp,-44
 10087dc:	dfc00a15 	stw	ra,40(sp)
 10087e0:	df000915 	stw	fp,36(sp)
 10087e4:	df000904 	addi	fp,sp,36
 10087e8:	e13ffc15 	stw	r4,-16(fp)
 10087ec:	e17ffd15 	stw	r5,-12(fp)
 10087f0:	e1bffe15 	stw	r6,-8(fp)
 10087f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 10087f8:	00bffa84 	movi	r2,-22
 10087fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1008800:	e0bffd17 	ldw	r2,-12(fp)
 1008804:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1008808:	e0bff817 	ldw	r2,-32(fp)
 100880c:	10800808 	cmpgei	r2,r2,32
 1008810:	1000271e 	bne	r2,zero,10088b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008814:	0005303a 	rdctl	r2,status
 1008818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100881c:	e0fffb17 	ldw	r3,-20(fp)
 1008820:	00bfff84 	movi	r2,-2
 1008824:	1884703a 	and	r2,r3,r2
 1008828:	1001703a 	wrctl	status,r2
  
  return context;
 100882c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1008830:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1008834:	00804074 	movhi	r2,257
 1008838:	10a75d04 	addi	r2,r2,-25228
 100883c:	e0fff817 	ldw	r3,-32(fp)
 1008840:	180690fa 	slli	r3,r3,3
 1008844:	10c5883a 	add	r2,r2,r3
 1008848:	e0fffe17 	ldw	r3,-8(fp)
 100884c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1008850:	00804074 	movhi	r2,257
 1008854:	10a75d04 	addi	r2,r2,-25228
 1008858:	e0fff817 	ldw	r3,-32(fp)
 100885c:	180690fa 	slli	r3,r3,3
 1008860:	10c5883a 	add	r2,r2,r3
 1008864:	10800104 	addi	r2,r2,4
 1008868:	e0ffff17 	ldw	r3,-4(fp)
 100886c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1008870:	e0bffe17 	ldw	r2,-8(fp)
 1008874:	10000526 	beq	r2,zero,100888c <alt_iic_isr_register+0xb4>
 1008878:	e0bff817 	ldw	r2,-32(fp)
 100887c:	100b883a 	mov	r5,r2
 1008880:	e13ffc17 	ldw	r4,-16(fp)
 1008884:	10086780 	call	1008678 <alt_ic_irq_enable>
 1008888:	00000406 	br	100889c <alt_iic_isr_register+0xc4>
 100888c:	e0bff817 	ldw	r2,-32(fp)
 1008890:	100b883a 	mov	r5,r2
 1008894:	e13ffc17 	ldw	r4,-16(fp)
 1008898:	10087000 	call	1008700 <alt_ic_irq_disable>
 100889c:	e0bff715 	stw	r2,-36(fp)
 10088a0:	e0bffa17 	ldw	r2,-24(fp)
 10088a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10088a8:	e0bff917 	ldw	r2,-28(fp)
 10088ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 10088b0:	e0bff717 	ldw	r2,-36(fp)
}
 10088b4:	e037883a 	mov	sp,fp
 10088b8:	dfc00117 	ldw	ra,4(sp)
 10088bc:	df000017 	ldw	fp,0(sp)
 10088c0:	dec00204 	addi	sp,sp,8
 10088c4:	f800283a 	ret

010088c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10088c8:	defff804 	addi	sp,sp,-32
 10088cc:	dfc00715 	stw	ra,28(sp)
 10088d0:	df000615 	stw	fp,24(sp)
 10088d4:	dc000515 	stw	r16,20(sp)
 10088d8:	df000604 	addi	fp,sp,24
 10088dc:	e13ffb15 	stw	r4,-20(fp)
 10088e0:	e17ffc15 	stw	r5,-16(fp)
 10088e4:	e1bffd15 	stw	r6,-12(fp)
 10088e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 10088ec:	e1bffe17 	ldw	r6,-8(fp)
 10088f0:	e17ffd17 	ldw	r5,-12(fp)
 10088f4:	e13ffc17 	ldw	r4,-16(fp)
 10088f8:	1008b500 	call	1008b50 <open>
 10088fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 1008900:	e0bffa17 	ldw	r2,-24(fp)
 1008904:	10002216 	blt	r2,zero,1008990 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 1008908:	04004074 	movhi	r16,257
 100890c:	84262e04 	addi	r16,r16,-26440
 1008910:	e0bffa17 	ldw	r2,-24(fp)
 1008914:	01400304 	movi	r5,12
 1008918:	1009883a 	mov	r4,r2
 100891c:	10013440 	call	1001344 <__mulsi3>
 1008920:	8085883a 	add	r2,r16,r2
 1008924:	10c00017 	ldw	r3,0(r2)
 1008928:	e0bffb17 	ldw	r2,-20(fp)
 100892c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1008930:	04004074 	movhi	r16,257
 1008934:	84262e04 	addi	r16,r16,-26440
 1008938:	e0bffa17 	ldw	r2,-24(fp)
 100893c:	01400304 	movi	r5,12
 1008940:	1009883a 	mov	r4,r2
 1008944:	10013440 	call	1001344 <__mulsi3>
 1008948:	8085883a 	add	r2,r16,r2
 100894c:	10800104 	addi	r2,r2,4
 1008950:	10c00017 	ldw	r3,0(r2)
 1008954:	e0bffb17 	ldw	r2,-20(fp)
 1008958:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100895c:	04004074 	movhi	r16,257
 1008960:	84262e04 	addi	r16,r16,-26440
 1008964:	e0bffa17 	ldw	r2,-24(fp)
 1008968:	01400304 	movi	r5,12
 100896c:	1009883a 	mov	r4,r2
 1008970:	10013440 	call	1001344 <__mulsi3>
 1008974:	8085883a 	add	r2,r16,r2
 1008978:	10800204 	addi	r2,r2,8
 100897c:	10c00017 	ldw	r3,0(r2)
 1008980:	e0bffb17 	ldw	r2,-20(fp)
 1008984:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1008988:	e13ffa17 	ldw	r4,-24(fp)
 100898c:	1008cac0 	call	1008cac <alt_release_fd>
  }
} 
 1008990:	0001883a 	nop
 1008994:	e6ffff04 	addi	sp,fp,-4
 1008998:	dfc00217 	ldw	ra,8(sp)
 100899c:	df000117 	ldw	fp,4(sp)
 10089a0:	dc000017 	ldw	r16,0(sp)
 10089a4:	dec00304 	addi	sp,sp,12
 10089a8:	f800283a 	ret

010089ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10089ac:	defffb04 	addi	sp,sp,-20
 10089b0:	dfc00415 	stw	ra,16(sp)
 10089b4:	df000315 	stw	fp,12(sp)
 10089b8:	df000304 	addi	fp,sp,12
 10089bc:	e13ffd15 	stw	r4,-12(fp)
 10089c0:	e17ffe15 	stw	r5,-8(fp)
 10089c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10089c8:	01c07fc4 	movi	r7,511
 10089cc:	01800044 	movi	r6,1
 10089d0:	e17ffd17 	ldw	r5,-12(fp)
 10089d4:	01004074 	movhi	r4,257
 10089d8:	21263104 	addi	r4,r4,-26428
 10089dc:	10088c80 	call	10088c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10089e0:	01c07fc4 	movi	r7,511
 10089e4:	000d883a 	mov	r6,zero
 10089e8:	e17ffe17 	ldw	r5,-8(fp)
 10089ec:	01004074 	movhi	r4,257
 10089f0:	21262e04 	addi	r4,r4,-26440
 10089f4:	10088c80 	call	10088c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10089f8:	01c07fc4 	movi	r7,511
 10089fc:	01800044 	movi	r6,1
 1008a00:	e17fff17 	ldw	r5,-4(fp)
 1008a04:	01004074 	movhi	r4,257
 1008a08:	21263404 	addi	r4,r4,-26416
 1008a0c:	10088c80 	call	10088c8 <alt_open_fd>
}  
 1008a10:	0001883a 	nop
 1008a14:	e037883a 	mov	sp,fp
 1008a18:	dfc00117 	ldw	ra,4(sp)
 1008a1c:	df000017 	ldw	fp,0(sp)
 1008a20:	dec00204 	addi	sp,sp,8
 1008a24:	f800283a 	ret

01008a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008a28:	defffe04 	addi	sp,sp,-8
 1008a2c:	dfc00115 	stw	ra,4(sp)
 1008a30:	df000015 	stw	fp,0(sp)
 1008a34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008a38:	d0a00817 	ldw	r2,-32736(gp)
 1008a3c:	10000326 	beq	r2,zero,1008a4c <alt_get_errno+0x24>
 1008a40:	d0a00817 	ldw	r2,-32736(gp)
 1008a44:	103ee83a 	callr	r2
 1008a48:	00000106 	br	1008a50 <alt_get_errno+0x28>
 1008a4c:	d0a0c704 	addi	r2,gp,-31972
}
 1008a50:	e037883a 	mov	sp,fp
 1008a54:	dfc00117 	ldw	ra,4(sp)
 1008a58:	df000017 	ldw	fp,0(sp)
 1008a5c:	dec00204 	addi	sp,sp,8
 1008a60:	f800283a 	ret

01008a64 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1008a64:	defffb04 	addi	sp,sp,-20
 1008a68:	dfc00415 	stw	ra,16(sp)
 1008a6c:	df000315 	stw	fp,12(sp)
 1008a70:	dc000215 	stw	r16,8(sp)
 1008a74:	df000304 	addi	fp,sp,12
 1008a78:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1008a7c:	e0bffe17 	ldw	r2,-8(fp)
 1008a80:	10800217 	ldw	r2,8(r2)
 1008a84:	10d00034 	orhi	r3,r2,16384
 1008a88:	e0bffe17 	ldw	r2,-8(fp)
 1008a8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1008a90:	e03ffd15 	stw	zero,-12(fp)
 1008a94:	00002306 	br	1008b24 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1008a98:	04004074 	movhi	r16,257
 1008a9c:	84262e04 	addi	r16,r16,-26440
 1008aa0:	e0bffd17 	ldw	r2,-12(fp)
 1008aa4:	01400304 	movi	r5,12
 1008aa8:	1009883a 	mov	r4,r2
 1008aac:	10013440 	call	1001344 <__mulsi3>
 1008ab0:	8085883a 	add	r2,r16,r2
 1008ab4:	10c00017 	ldw	r3,0(r2)
 1008ab8:	e0bffe17 	ldw	r2,-8(fp)
 1008abc:	10800017 	ldw	r2,0(r2)
 1008ac0:	1880151e 	bne	r3,r2,1008b18 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1008ac4:	04004074 	movhi	r16,257
 1008ac8:	84262e04 	addi	r16,r16,-26440
 1008acc:	e0bffd17 	ldw	r2,-12(fp)
 1008ad0:	01400304 	movi	r5,12
 1008ad4:	1009883a 	mov	r4,r2
 1008ad8:	10013440 	call	1001344 <__mulsi3>
 1008adc:	8085883a 	add	r2,r16,r2
 1008ae0:	10800204 	addi	r2,r2,8
 1008ae4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1008ae8:	10000b0e 	bge	r2,zero,1008b18 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1008aec:	01400304 	movi	r5,12
 1008af0:	e13ffd17 	ldw	r4,-12(fp)
 1008af4:	10013440 	call	1001344 <__mulsi3>
 1008af8:	1007883a 	mov	r3,r2
 1008afc:	00804074 	movhi	r2,257
 1008b00:	10a62e04 	addi	r2,r2,-26440
 1008b04:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1008b08:	e0bffe17 	ldw	r2,-8(fp)
 1008b0c:	18800226 	beq	r3,r2,1008b18 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1008b10:	00bffcc4 	movi	r2,-13
 1008b14:	00000806 	br	1008b38 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1008b18:	e0bffd17 	ldw	r2,-12(fp)
 1008b1c:	10800044 	addi	r2,r2,1
 1008b20:	e0bffd15 	stw	r2,-12(fp)
 1008b24:	d0a00717 	ldw	r2,-32740(gp)
 1008b28:	1007883a 	mov	r3,r2
 1008b2c:	e0bffd17 	ldw	r2,-12(fp)
 1008b30:	18bfd92e 	bgeu	r3,r2,1008a98 <__alt_data_end+0xff496f98>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1008b34:	0005883a 	mov	r2,zero
}
 1008b38:	e6ffff04 	addi	sp,fp,-4
 1008b3c:	dfc00217 	ldw	ra,8(sp)
 1008b40:	df000117 	ldw	fp,4(sp)
 1008b44:	dc000017 	ldw	r16,0(sp)
 1008b48:	dec00304 	addi	sp,sp,12
 1008b4c:	f800283a 	ret

01008b50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1008b50:	defff604 	addi	sp,sp,-40
 1008b54:	dfc00915 	stw	ra,36(sp)
 1008b58:	df000815 	stw	fp,32(sp)
 1008b5c:	df000804 	addi	fp,sp,32
 1008b60:	e13ffd15 	stw	r4,-12(fp)
 1008b64:	e17ffe15 	stw	r5,-8(fp)
 1008b68:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1008b6c:	00bfffc4 	movi	r2,-1
 1008b70:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1008b74:	00bffb44 	movi	r2,-19
 1008b78:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1008b7c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1008b80:	d1600504 	addi	r5,gp,-32748
 1008b84:	e13ffd17 	ldw	r4,-12(fp)
 1008b88:	1008ef80 	call	1008ef8 <alt_find_dev>
 1008b8c:	e0bff815 	stw	r2,-32(fp)
 1008b90:	e0bff817 	ldw	r2,-32(fp)
 1008b94:	1000051e 	bne	r2,zero,1008bac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1008b98:	e13ffd17 	ldw	r4,-12(fp)
 1008b9c:	1008f880 	call	1008f88 <alt_find_file>
 1008ba0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1008ba4:	00800044 	movi	r2,1
 1008ba8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1008bac:	e0bff817 	ldw	r2,-32(fp)
 1008bb0:	10002b26 	beq	r2,zero,1008c60 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1008bb4:	e13ff817 	ldw	r4,-32(fp)
 1008bb8:	10090900 	call	1009090 <alt_get_fd>
 1008bbc:	e0bff915 	stw	r2,-28(fp)
 1008bc0:	e0bff917 	ldw	r2,-28(fp)
 1008bc4:	1000030e 	bge	r2,zero,1008bd4 <open+0x84>
    {
      status = index;
 1008bc8:	e0bff917 	ldw	r2,-28(fp)
 1008bcc:	e0bffa15 	stw	r2,-24(fp)
 1008bd0:	00002506 	br	1008c68 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 1008bd4:	01400304 	movi	r5,12
 1008bd8:	e13ff917 	ldw	r4,-28(fp)
 1008bdc:	10013440 	call	1001344 <__mulsi3>
 1008be0:	1007883a 	mov	r3,r2
 1008be4:	00804074 	movhi	r2,257
 1008be8:	10a62e04 	addi	r2,r2,-26440
 1008bec:	1885883a 	add	r2,r3,r2
 1008bf0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1008bf4:	e0fffe17 	ldw	r3,-8(fp)
 1008bf8:	00900034 	movhi	r2,16384
 1008bfc:	10bfffc4 	addi	r2,r2,-1
 1008c00:	1886703a 	and	r3,r3,r2
 1008c04:	e0bffc17 	ldw	r2,-16(fp)
 1008c08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1008c0c:	e0bffb17 	ldw	r2,-20(fp)
 1008c10:	1000051e 	bne	r2,zero,1008c28 <open+0xd8>
 1008c14:	e13ffc17 	ldw	r4,-16(fp)
 1008c18:	1008a640 	call	1008a64 <alt_file_locked>
 1008c1c:	e0bffa15 	stw	r2,-24(fp)
 1008c20:	e0bffa17 	ldw	r2,-24(fp)
 1008c24:	10001016 	blt	r2,zero,1008c68 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1008c28:	e0bff817 	ldw	r2,-32(fp)
 1008c2c:	10800317 	ldw	r2,12(r2)
 1008c30:	10000826 	beq	r2,zero,1008c54 <open+0x104>
 1008c34:	e0bff817 	ldw	r2,-32(fp)
 1008c38:	10800317 	ldw	r2,12(r2)
 1008c3c:	e1ffff17 	ldw	r7,-4(fp)
 1008c40:	e1bffe17 	ldw	r6,-8(fp)
 1008c44:	e17ffd17 	ldw	r5,-12(fp)
 1008c48:	e13ffc17 	ldw	r4,-16(fp)
 1008c4c:	103ee83a 	callr	r2
 1008c50:	00000106 	br	1008c58 <open+0x108>
 1008c54:	0005883a 	mov	r2,zero
 1008c58:	e0bffa15 	stw	r2,-24(fp)
 1008c5c:	00000206 	br	1008c68 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1008c60:	00bffb44 	movi	r2,-19
 1008c64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1008c68:	e0bffa17 	ldw	r2,-24(fp)
 1008c6c:	1000090e 	bge	r2,zero,1008c94 <open+0x144>
  {
    alt_release_fd (index);  
 1008c70:	e13ff917 	ldw	r4,-28(fp)
 1008c74:	1008cac0 	call	1008cac <alt_release_fd>
    ALT_ERRNO = -status;
 1008c78:	1008a280 	call	1008a28 <alt_get_errno>
 1008c7c:	1007883a 	mov	r3,r2
 1008c80:	e0bffa17 	ldw	r2,-24(fp)
 1008c84:	0085c83a 	sub	r2,zero,r2
 1008c88:	18800015 	stw	r2,0(r3)
    return -1;
 1008c8c:	00bfffc4 	movi	r2,-1
 1008c90:	00000106 	br	1008c98 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 1008c94:	e0bff917 	ldw	r2,-28(fp)
}
 1008c98:	e037883a 	mov	sp,fp
 1008c9c:	dfc00117 	ldw	ra,4(sp)
 1008ca0:	df000017 	ldw	fp,0(sp)
 1008ca4:	dec00204 	addi	sp,sp,8
 1008ca8:	f800283a 	ret

01008cac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1008cac:	defffc04 	addi	sp,sp,-16
 1008cb0:	dfc00315 	stw	ra,12(sp)
 1008cb4:	df000215 	stw	fp,8(sp)
 1008cb8:	dc000115 	stw	r16,4(sp)
 1008cbc:	df000204 	addi	fp,sp,8
 1008cc0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 1008cc4:	e0bffe17 	ldw	r2,-8(fp)
 1008cc8:	108000d0 	cmplti	r2,r2,3
 1008ccc:	1000111e 	bne	r2,zero,1008d14 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 1008cd0:	04004074 	movhi	r16,257
 1008cd4:	84262e04 	addi	r16,r16,-26440
 1008cd8:	e0bffe17 	ldw	r2,-8(fp)
 1008cdc:	01400304 	movi	r5,12
 1008ce0:	1009883a 	mov	r4,r2
 1008ce4:	10013440 	call	1001344 <__mulsi3>
 1008ce8:	8085883a 	add	r2,r16,r2
 1008cec:	10800204 	addi	r2,r2,8
 1008cf0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1008cf4:	04004074 	movhi	r16,257
 1008cf8:	84262e04 	addi	r16,r16,-26440
 1008cfc:	e0bffe17 	ldw	r2,-8(fp)
 1008d00:	01400304 	movi	r5,12
 1008d04:	1009883a 	mov	r4,r2
 1008d08:	10013440 	call	1001344 <__mulsi3>
 1008d0c:	8085883a 	add	r2,r16,r2
 1008d10:	10000015 	stw	zero,0(r2)
  }
}
 1008d14:	0001883a 	nop
 1008d18:	e6ffff04 	addi	sp,fp,-4
 1008d1c:	dfc00217 	ldw	ra,8(sp)
 1008d20:	df000117 	ldw	fp,4(sp)
 1008d24:	dc000017 	ldw	r16,0(sp)
 1008d28:	dec00304 	addi	sp,sp,12
 1008d2c:	f800283a 	ret

01008d30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1008d30:	defffa04 	addi	sp,sp,-24
 1008d34:	df000515 	stw	fp,20(sp)
 1008d38:	df000504 	addi	fp,sp,20
 1008d3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008d40:	0005303a 	rdctl	r2,status
 1008d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008d48:	e0fffc17 	ldw	r3,-16(fp)
 1008d4c:	00bfff84 	movi	r2,-2
 1008d50:	1884703a 	and	r2,r3,r2
 1008d54:	1001703a 	wrctl	status,r2
  
  return context;
 1008d58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1008d5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1008d60:	e0bfff17 	ldw	r2,-4(fp)
 1008d64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1008d68:	e0bffd17 	ldw	r2,-12(fp)
 1008d6c:	10800017 	ldw	r2,0(r2)
 1008d70:	e0fffd17 	ldw	r3,-12(fp)
 1008d74:	18c00117 	ldw	r3,4(r3)
 1008d78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1008d7c:	e0bffd17 	ldw	r2,-12(fp)
 1008d80:	10800117 	ldw	r2,4(r2)
 1008d84:	e0fffd17 	ldw	r3,-12(fp)
 1008d88:	18c00017 	ldw	r3,0(r3)
 1008d8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1008d90:	e0bffd17 	ldw	r2,-12(fp)
 1008d94:	e0fffd17 	ldw	r3,-12(fp)
 1008d98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1008d9c:	e0bffd17 	ldw	r2,-12(fp)
 1008da0:	e0fffd17 	ldw	r3,-12(fp)
 1008da4:	10c00015 	stw	r3,0(r2)
 1008da8:	e0bffb17 	ldw	r2,-20(fp)
 1008dac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008db0:	e0bffe17 	ldw	r2,-8(fp)
 1008db4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1008db8:	0001883a 	nop
 1008dbc:	e037883a 	mov	sp,fp
 1008dc0:	df000017 	ldw	fp,0(sp)
 1008dc4:	dec00104 	addi	sp,sp,4
 1008dc8:	f800283a 	ret

01008dcc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1008dcc:	defffb04 	addi	sp,sp,-20
 1008dd0:	dfc00415 	stw	ra,16(sp)
 1008dd4:	df000315 	stw	fp,12(sp)
 1008dd8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1008ddc:	d0a00a17 	ldw	r2,-32728(gp)
 1008de0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1008de4:	d0a0cd17 	ldw	r2,-31948(gp)
 1008de8:	10800044 	addi	r2,r2,1
 1008dec:	d0a0cd15 	stw	r2,-31948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1008df0:	00002e06 	br	1008eac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1008df4:	e0bffd17 	ldw	r2,-12(fp)
 1008df8:	10800017 	ldw	r2,0(r2)
 1008dfc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1008e00:	e0bffd17 	ldw	r2,-12(fp)
 1008e04:	10800403 	ldbu	r2,16(r2)
 1008e08:	10803fcc 	andi	r2,r2,255
 1008e0c:	10000426 	beq	r2,zero,1008e20 <alt_tick+0x54>
 1008e10:	d0a0cd17 	ldw	r2,-31948(gp)
 1008e14:	1000021e 	bne	r2,zero,1008e20 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1008e18:	e0bffd17 	ldw	r2,-12(fp)
 1008e1c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1008e20:	e0bffd17 	ldw	r2,-12(fp)
 1008e24:	10800217 	ldw	r2,8(r2)
 1008e28:	d0e0cd17 	ldw	r3,-31948(gp)
 1008e2c:	18801d36 	bltu	r3,r2,1008ea4 <alt_tick+0xd8>
 1008e30:	e0bffd17 	ldw	r2,-12(fp)
 1008e34:	10800403 	ldbu	r2,16(r2)
 1008e38:	10803fcc 	andi	r2,r2,255
 1008e3c:	1000191e 	bne	r2,zero,1008ea4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1008e40:	e0bffd17 	ldw	r2,-12(fp)
 1008e44:	10800317 	ldw	r2,12(r2)
 1008e48:	e0fffd17 	ldw	r3,-12(fp)
 1008e4c:	18c00517 	ldw	r3,20(r3)
 1008e50:	1809883a 	mov	r4,r3
 1008e54:	103ee83a 	callr	r2
 1008e58:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1008e5c:	e0bfff17 	ldw	r2,-4(fp)
 1008e60:	1000031e 	bne	r2,zero,1008e70 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1008e64:	e13ffd17 	ldw	r4,-12(fp)
 1008e68:	1008d300 	call	1008d30 <alt_alarm_stop>
 1008e6c:	00000d06 	br	1008ea4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1008e70:	e0bffd17 	ldw	r2,-12(fp)
 1008e74:	10c00217 	ldw	r3,8(r2)
 1008e78:	e0bfff17 	ldw	r2,-4(fp)
 1008e7c:	1887883a 	add	r3,r3,r2
 1008e80:	e0bffd17 	ldw	r2,-12(fp)
 1008e84:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1008e88:	e0bffd17 	ldw	r2,-12(fp)
 1008e8c:	10c00217 	ldw	r3,8(r2)
 1008e90:	d0a0cd17 	ldw	r2,-31948(gp)
 1008e94:	1880032e 	bgeu	r3,r2,1008ea4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1008e98:	e0bffd17 	ldw	r2,-12(fp)
 1008e9c:	00c00044 	movi	r3,1
 1008ea0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1008ea4:	e0bffe17 	ldw	r2,-8(fp)
 1008ea8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1008eac:	e0fffd17 	ldw	r3,-12(fp)
 1008eb0:	d0a00a04 	addi	r2,gp,-32728
 1008eb4:	18bfcf1e 	bne	r3,r2,1008df4 <__alt_data_end+0xff4972f4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1008eb8:	0001883a 	nop
}
 1008ebc:	0001883a 	nop
 1008ec0:	e037883a 	mov	sp,fp
 1008ec4:	dfc00117 	ldw	ra,4(sp)
 1008ec8:	df000017 	ldw	fp,0(sp)
 1008ecc:	dec00204 	addi	sp,sp,8
 1008ed0:	f800283a 	ret

01008ed4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1008ed4:	deffff04 	addi	sp,sp,-4
 1008ed8:	df000015 	stw	fp,0(sp)
 1008edc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1008ee0:	000170fa 	wrctl	ienable,zero
}
 1008ee4:	0001883a 	nop
 1008ee8:	e037883a 	mov	sp,fp
 1008eec:	df000017 	ldw	fp,0(sp)
 1008ef0:	dec00104 	addi	sp,sp,4
 1008ef4:	f800283a 	ret

01008ef8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1008ef8:	defffa04 	addi	sp,sp,-24
 1008efc:	dfc00515 	stw	ra,20(sp)
 1008f00:	df000415 	stw	fp,16(sp)
 1008f04:	df000404 	addi	fp,sp,16
 1008f08:	e13ffe15 	stw	r4,-8(fp)
 1008f0c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1008f10:	e0bfff17 	ldw	r2,-4(fp)
 1008f14:	10800017 	ldw	r2,0(r2)
 1008f18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1008f1c:	e13ffe17 	ldw	r4,-8(fp)
 1008f20:	10016580 	call	1001658 <strlen>
 1008f24:	10800044 	addi	r2,r2,1
 1008f28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1008f2c:	00000d06 	br	1008f64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1008f30:	e0bffc17 	ldw	r2,-16(fp)
 1008f34:	10800217 	ldw	r2,8(r2)
 1008f38:	e0fffd17 	ldw	r3,-12(fp)
 1008f3c:	180d883a 	mov	r6,r3
 1008f40:	e17ffe17 	ldw	r5,-8(fp)
 1008f44:	1009883a 	mov	r4,r2
 1008f48:	10092f80 	call	10092f8 <memcmp>
 1008f4c:	1000021e 	bne	r2,zero,1008f58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1008f50:	e0bffc17 	ldw	r2,-16(fp)
 1008f54:	00000706 	br	1008f74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1008f58:	e0bffc17 	ldw	r2,-16(fp)
 1008f5c:	10800017 	ldw	r2,0(r2)
 1008f60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1008f64:	e0fffc17 	ldw	r3,-16(fp)
 1008f68:	e0bfff17 	ldw	r2,-4(fp)
 1008f6c:	18bff01e 	bne	r3,r2,1008f30 <__alt_data_end+0xff497430>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1008f70:	0005883a 	mov	r2,zero
}
 1008f74:	e037883a 	mov	sp,fp
 1008f78:	dfc00117 	ldw	ra,4(sp)
 1008f7c:	df000017 	ldw	fp,0(sp)
 1008f80:	dec00204 	addi	sp,sp,8
 1008f84:	f800283a 	ret

01008f88 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1008f88:	defffb04 	addi	sp,sp,-20
 1008f8c:	dfc00415 	stw	ra,16(sp)
 1008f90:	df000315 	stw	fp,12(sp)
 1008f94:	df000304 	addi	fp,sp,12
 1008f98:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1008f9c:	d0a00317 	ldw	r2,-32756(gp)
 1008fa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1008fa4:	00003106 	br	100906c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1008fa8:	e0bffd17 	ldw	r2,-12(fp)
 1008fac:	10800217 	ldw	r2,8(r2)
 1008fb0:	1009883a 	mov	r4,r2
 1008fb4:	10016580 	call	1001658 <strlen>
 1008fb8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1008fbc:	e0bffd17 	ldw	r2,-12(fp)
 1008fc0:	10c00217 	ldw	r3,8(r2)
 1008fc4:	e0bffe17 	ldw	r2,-8(fp)
 1008fc8:	10bfffc4 	addi	r2,r2,-1
 1008fcc:	1885883a 	add	r2,r3,r2
 1008fd0:	10800003 	ldbu	r2,0(r2)
 1008fd4:	10803fcc 	andi	r2,r2,255
 1008fd8:	1080201c 	xori	r2,r2,128
 1008fdc:	10bfe004 	addi	r2,r2,-128
 1008fe0:	10800bd8 	cmpnei	r2,r2,47
 1008fe4:	1000031e 	bne	r2,zero,1008ff4 <alt_find_file+0x6c>
    {
      len -= 1;
 1008fe8:	e0bffe17 	ldw	r2,-8(fp)
 1008fec:	10bfffc4 	addi	r2,r2,-1
 1008ff0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1008ff4:	e0bffe17 	ldw	r2,-8(fp)
 1008ff8:	e0ffff17 	ldw	r3,-4(fp)
 1008ffc:	1885883a 	add	r2,r3,r2
 1009000:	10800003 	ldbu	r2,0(r2)
 1009004:	10803fcc 	andi	r2,r2,255
 1009008:	1080201c 	xori	r2,r2,128
 100900c:	10bfe004 	addi	r2,r2,-128
 1009010:	10800be0 	cmpeqi	r2,r2,47
 1009014:	1000081e 	bne	r2,zero,1009038 <alt_find_file+0xb0>
 1009018:	e0bffe17 	ldw	r2,-8(fp)
 100901c:	e0ffff17 	ldw	r3,-4(fp)
 1009020:	1885883a 	add	r2,r3,r2
 1009024:	10800003 	ldbu	r2,0(r2)
 1009028:	10803fcc 	andi	r2,r2,255
 100902c:	1080201c 	xori	r2,r2,128
 1009030:	10bfe004 	addi	r2,r2,-128
 1009034:	10000a1e 	bne	r2,zero,1009060 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1009038:	e0bffd17 	ldw	r2,-12(fp)
 100903c:	10800217 	ldw	r2,8(r2)
 1009040:	e0fffe17 	ldw	r3,-8(fp)
 1009044:	180d883a 	mov	r6,r3
 1009048:	e17fff17 	ldw	r5,-4(fp)
 100904c:	1009883a 	mov	r4,r2
 1009050:	10092f80 	call	10092f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1009054:	1000021e 	bne	r2,zero,1009060 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1009058:	e0bffd17 	ldw	r2,-12(fp)
 100905c:	00000706 	br	100907c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1009060:	e0bffd17 	ldw	r2,-12(fp)
 1009064:	10800017 	ldw	r2,0(r2)
 1009068:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100906c:	e0fffd17 	ldw	r3,-12(fp)
 1009070:	d0a00304 	addi	r2,gp,-32756
 1009074:	18bfcc1e 	bne	r3,r2,1008fa8 <__alt_data_end+0xff4974a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1009078:	0005883a 	mov	r2,zero
}
 100907c:	e037883a 	mov	sp,fp
 1009080:	dfc00117 	ldw	ra,4(sp)
 1009084:	df000017 	ldw	fp,0(sp)
 1009088:	dec00204 	addi	sp,sp,8
 100908c:	f800283a 	ret

01009090 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1009090:	defffa04 	addi	sp,sp,-24
 1009094:	dfc00515 	stw	ra,20(sp)
 1009098:	df000415 	stw	fp,16(sp)
 100909c:	dc000315 	stw	r16,12(sp)
 10090a0:	df000404 	addi	fp,sp,16
 10090a4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 10090a8:	00bffa04 	movi	r2,-24
 10090ac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10090b0:	e03ffc15 	stw	zero,-16(fp)
 10090b4:	00001d06 	br	100912c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 10090b8:	04004074 	movhi	r16,257
 10090bc:	84262e04 	addi	r16,r16,-26440
 10090c0:	e0bffc17 	ldw	r2,-16(fp)
 10090c4:	01400304 	movi	r5,12
 10090c8:	1009883a 	mov	r4,r2
 10090cc:	10013440 	call	1001344 <__mulsi3>
 10090d0:	8085883a 	add	r2,r16,r2
 10090d4:	10800017 	ldw	r2,0(r2)
 10090d8:	1000111e 	bne	r2,zero,1009120 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 10090dc:	04004074 	movhi	r16,257
 10090e0:	84262e04 	addi	r16,r16,-26440
 10090e4:	e0bffc17 	ldw	r2,-16(fp)
 10090e8:	01400304 	movi	r5,12
 10090ec:	1009883a 	mov	r4,r2
 10090f0:	10013440 	call	1001344 <__mulsi3>
 10090f4:	8085883a 	add	r2,r16,r2
 10090f8:	e0fffe17 	ldw	r3,-8(fp)
 10090fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1009100:	d0e00717 	ldw	r3,-32740(gp)
 1009104:	e0bffc17 	ldw	r2,-16(fp)
 1009108:	1880020e 	bge	r3,r2,1009114 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 100910c:	e0bffc17 	ldw	r2,-16(fp)
 1009110:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
 1009114:	e0bffc17 	ldw	r2,-16(fp)
 1009118:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 100911c:	00000606 	br	1009138 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1009120:	e0bffc17 	ldw	r2,-16(fp)
 1009124:	10800044 	addi	r2,r2,1
 1009128:	e0bffc15 	stw	r2,-16(fp)
 100912c:	e0bffc17 	ldw	r2,-16(fp)
 1009130:	10800810 	cmplti	r2,r2,32
 1009134:	103fe01e 	bne	r2,zero,10090b8 <__alt_data_end+0xff4975b8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1009138:	e0bffd17 	ldw	r2,-12(fp)
}
 100913c:	e6ffff04 	addi	sp,fp,-4
 1009140:	dfc00217 	ldw	ra,8(sp)
 1009144:	df000117 	ldw	fp,4(sp)
 1009148:	dc000017 	ldw	r16,0(sp)
 100914c:	dec00304 	addi	sp,sp,12
 1009150:	f800283a 	ret

01009154 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1009154:	defffb04 	addi	sp,sp,-20
 1009158:	df000415 	stw	fp,16(sp)
 100915c:	df000404 	addi	fp,sp,16
 1009160:	e13ffe15 	stw	r4,-8(fp)
 1009164:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1009168:	e0bfff17 	ldw	r2,-4(fp)
 100916c:	10820070 	cmpltui	r2,r2,2049
 1009170:	1000021e 	bne	r2,zero,100917c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1009174:	00820004 	movi	r2,2048
 1009178:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100917c:	e0fffe17 	ldw	r3,-8(fp)
 1009180:	e0bfff17 	ldw	r2,-4(fp)
 1009184:	1885883a 	add	r2,r3,r2
 1009188:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100918c:	e0bffe17 	ldw	r2,-8(fp)
 1009190:	e0bffc15 	stw	r2,-16(fp)
 1009194:	00000506 	br	10091ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1009198:	e0bffc17 	ldw	r2,-16(fp)
 100919c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10091a0:	e0bffc17 	ldw	r2,-16(fp)
 10091a4:	10800804 	addi	r2,r2,32
 10091a8:	e0bffc15 	stw	r2,-16(fp)
 10091ac:	e0fffc17 	ldw	r3,-16(fp)
 10091b0:	e0bffd17 	ldw	r2,-12(fp)
 10091b4:	18bff836 	bltu	r3,r2,1009198 <__alt_data_end+0xff497698>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 10091b8:	e0bffe17 	ldw	r2,-8(fp)
 10091bc:	108007cc 	andi	r2,r2,31
 10091c0:	10000226 	beq	r2,zero,10091cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 10091c4:	e0bffc17 	ldw	r2,-16(fp)
 10091c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10091cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10091d0:	0001883a 	nop
 10091d4:	e037883a 	mov	sp,fp
 10091d8:	df000017 	ldw	fp,0(sp)
 10091dc:	dec00104 	addi	sp,sp,4
 10091e0:	f800283a 	ret

010091e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 10091e4:	defffe04 	addi	sp,sp,-8
 10091e8:	df000115 	stw	fp,4(sp)
 10091ec:	df000104 	addi	fp,sp,4
 10091f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 10091f4:	e0bfff17 	ldw	r2,-4(fp)
 10091f8:	10bffe84 	addi	r2,r2,-6
 10091fc:	10c00428 	cmpgeui	r3,r2,16
 1009200:	18001a1e 	bne	r3,zero,100926c <alt_exception_cause_generated_bad_addr+0x88>
 1009204:	100690ba 	slli	r3,r2,2
 1009208:	00804074 	movhi	r2,257
 100920c:	10a48704 	addi	r2,r2,-28132
 1009210:	1885883a 	add	r2,r3,r2
 1009214:	10800017 	ldw	r2,0(r2)
 1009218:	1000683a 	jmp	r2
 100921c:	0100925c 	xori	r4,zero,585
 1009220:	0100925c 	xori	r4,zero,585
 1009224:	0100926c 	andhi	r4,zero,585
 1009228:	0100926c 	andhi	r4,zero,585
 100922c:	0100926c 	andhi	r4,zero,585
 1009230:	0100925c 	xori	r4,zero,585
 1009234:	01009264 	muli	r4,zero,585
 1009238:	0100926c 	andhi	r4,zero,585
 100923c:	0100925c 	xori	r4,zero,585
 1009240:	0100925c 	xori	r4,zero,585
 1009244:	0100926c 	andhi	r4,zero,585
 1009248:	0100925c 	xori	r4,zero,585
 100924c:	01009264 	muli	r4,zero,585
 1009250:	0100926c 	andhi	r4,zero,585
 1009254:	0100926c 	andhi	r4,zero,585
 1009258:	0100925c 	xori	r4,zero,585
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 100925c:	00800044 	movi	r2,1
 1009260:	00000306 	br	1009270 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1009264:	0005883a 	mov	r2,zero
 1009268:	00000106 	br	1009270 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 100926c:	0005883a 	mov	r2,zero
  }
}
 1009270:	e037883a 	mov	sp,fp
 1009274:	df000017 	ldw	fp,0(sp)
 1009278:	dec00104 	addi	sp,sp,4
 100927c:	f800283a 	ret

01009280 <exit>:
 1009280:	defffe04 	addi	sp,sp,-8
 1009284:	000b883a 	mov	r5,zero
 1009288:	dc000015 	stw	r16,0(sp)
 100928c:	dfc00115 	stw	ra,4(sp)
 1009290:	2021883a 	mov	r16,r4
 1009294:	10093280 	call	1009328 <__call_exitprocs>
 1009298:	8009883a 	mov	r4,r16
 100929c:	10094b80 	call	10094b8 <_exit>

010092a0 <fputs>:
 10092a0:	defffd04 	addi	sp,sp,-12
 10092a4:	dfc00215 	stw	ra,8(sp)
 10092a8:	dc000115 	stw	r16,4(sp)
 10092ac:	d9400015 	stw	r5,0(sp)
 10092b0:	2021883a 	mov	r16,r4
 10092b4:	10016580 	call	1001658 <strlen>
 10092b8:	100f883a 	mov	r7,r2
 10092bc:	00804074 	movhi	r2,257
 10092c0:	d9400017 	ldw	r5,0(sp)
 10092c4:	10a68f04 	addi	r2,r2,-26052
 10092c8:	11000017 	ldw	r4,0(r2)
 10092cc:	00c04034 	movhi	r3,256
 10092d0:	18c97904 	addi	r3,r3,9700
 10092d4:	28c00115 	stw	r3,4(r5)
 10092d8:	800d883a 	mov	r6,r16
 10092dc:	10025e40 	call	10025e4 <__sfvwrite_small_dev>
 10092e0:	10bfffe0 	cmpeqi	r2,r2,-1
 10092e4:	0085c83a 	sub	r2,zero,r2
 10092e8:	dfc00217 	ldw	ra,8(sp)
 10092ec:	dc000117 	ldw	r16,4(sp)
 10092f0:	dec00304 	addi	sp,sp,12
 10092f4:	f800283a 	ret

010092f8 <memcmp>:
 10092f8:	218d883a 	add	r6,r4,r6
 10092fc:	21800826 	beq	r4,r6,1009320 <memcmp+0x28>
 1009300:	20800003 	ldbu	r2,0(r4)
 1009304:	28c00003 	ldbu	r3,0(r5)
 1009308:	10c00226 	beq	r2,r3,1009314 <memcmp+0x1c>
 100930c:	10c5c83a 	sub	r2,r2,r3
 1009310:	f800283a 	ret
 1009314:	21000044 	addi	r4,r4,1
 1009318:	29400044 	addi	r5,r5,1
 100931c:	003ff706 	br	10092fc <__alt_data_end+0xff4977fc>
 1009320:	0005883a 	mov	r2,zero
 1009324:	f800283a 	ret

01009328 <__call_exitprocs>:
 1009328:	defff504 	addi	sp,sp,-44
 100932c:	dd000515 	stw	r20,20(sp)
 1009330:	05004074 	movhi	r20,257
 1009334:	dc800315 	stw	r18,12(sp)
 1009338:	dfc00a15 	stw	ra,40(sp)
 100933c:	df000915 	stw	fp,36(sp)
 1009340:	ddc00815 	stw	r23,32(sp)
 1009344:	dd800715 	stw	r22,28(sp)
 1009348:	dd400615 	stw	r21,24(sp)
 100934c:	dcc00415 	stw	r19,16(sp)
 1009350:	dc400215 	stw	r17,8(sp)
 1009354:	dc000115 	stw	r16,4(sp)
 1009358:	d9000015 	stw	r4,0(sp)
 100935c:	2825883a 	mov	r18,r5
 1009360:	a5268e04 	addi	r20,r20,-26056
 1009364:	a4400017 	ldw	r17,0(r20)
 1009368:	8cc00c17 	ldw	r19,48(r17)
 100936c:	8c400c04 	addi	r17,r17,48
 1009370:	98004526 	beq	r19,zero,1009488 <__call_exitprocs+0x160>
 1009374:	9c000117 	ldw	r16,4(r19)
 1009378:	00900034 	movhi	r2,16384
 100937c:	10bfffc4 	addi	r2,r2,-1
 1009380:	9d402217 	ldw	r21,136(r19)
 1009384:	85bfffc4 	addi	r22,r16,-1
 1009388:	80a1883a 	add	r16,r16,r2
 100938c:	8421883a 	add	r16,r16,r16
 1009390:	8421883a 	add	r16,r16,r16
 1009394:	ac2f883a 	add	r23,r21,r16
 1009398:	84000204 	addi	r16,r16,8
 100939c:	9c21883a 	add	r16,r19,r16
 10093a0:	b0002716 	blt	r22,zero,1009440 <__call_exitprocs+0x118>
 10093a4:	90000726 	beq	r18,zero,10093c4 <__call_exitprocs+0x9c>
 10093a8:	a800041e 	bne	r21,zero,10093bc <__call_exitprocs+0x94>
 10093ac:	b5bfffc4 	addi	r22,r22,-1
 10093b0:	bdffff04 	addi	r23,r23,-4
 10093b4:	843fff04 	addi	r16,r16,-4
 10093b8:	003ff906 	br	10093a0 <__alt_data_end+0xff4978a0>
 10093bc:	b9002017 	ldw	r4,128(r23)
 10093c0:	913ffa1e 	bne	r18,r4,10093ac <__alt_data_end+0xff4978ac>
 10093c4:	99000117 	ldw	r4,4(r19)
 10093c8:	82000017 	ldw	r8,0(r16)
 10093cc:	213fffc4 	addi	r4,r4,-1
 10093d0:	b100021e 	bne	r22,r4,10093dc <__call_exitprocs+0xb4>
 10093d4:	9d800115 	stw	r22,4(r19)
 10093d8:	00000106 	br	10093e0 <__call_exitprocs+0xb8>
 10093dc:	80000015 	stw	zero,0(r16)
 10093e0:	403ff226 	beq	r8,zero,10093ac <__alt_data_end+0xff4978ac>
 10093e4:	9f000117 	ldw	fp,4(r19)
 10093e8:	a8000526 	beq	r21,zero,1009400 <__call_exitprocs+0xd8>
 10093ec:	00800044 	movi	r2,1
 10093f0:	1592983a 	sll	r9,r2,r22
 10093f4:	a9404017 	ldw	r5,256(r21)
 10093f8:	494a703a 	and	r5,r9,r5
 10093fc:	2800021e 	bne	r5,zero,1009408 <__call_exitprocs+0xe0>
 1009400:	403ee83a 	callr	r8
 1009404:	00000906 	br	100942c <__call_exitprocs+0x104>
 1009408:	a9004117 	ldw	r4,260(r21)
 100940c:	4908703a 	and	r4,r9,r4
 1009410:	2000041e 	bne	r4,zero,1009424 <__call_exitprocs+0xfc>
 1009414:	b9400017 	ldw	r5,0(r23)
 1009418:	d9000017 	ldw	r4,0(sp)
 100941c:	403ee83a 	callr	r8
 1009420:	00000206 	br	100942c <__call_exitprocs+0x104>
 1009424:	b9000017 	ldw	r4,0(r23)
 1009428:	403ee83a 	callr	r8
 100942c:	99000117 	ldw	r4,4(r19)
 1009430:	e13fcc1e 	bne	fp,r4,1009364 <__alt_data_end+0xff497864>
 1009434:	89000017 	ldw	r4,0(r17)
 1009438:	993fdc26 	beq	r19,r4,10093ac <__alt_data_end+0xff4978ac>
 100943c:	003fc906 	br	1009364 <__alt_data_end+0xff497864>
 1009440:	00804034 	movhi	r2,256
 1009444:	1093c204 	addi	r2,r2,20232
 1009448:	10000f26 	beq	r2,zero,1009488 <__call_exitprocs+0x160>
 100944c:	99400117 	ldw	r5,4(r19)
 1009450:	99000017 	ldw	r4,0(r19)
 1009454:	2800091e 	bne	r5,zero,100947c <__call_exitprocs+0x154>
 1009458:	20000826 	beq	r4,zero,100947c <__call_exitprocs+0x154>
 100945c:	89000015 	stw	r4,0(r17)
 1009460:	a8000226 	beq	r21,zero,100946c <__call_exitprocs+0x144>
 1009464:	a809883a 	mov	r4,r21
 1009468:	1004f080 	call	1004f08 <free>
 100946c:	9809883a 	mov	r4,r19
 1009470:	1004f080 	call	1004f08 <free>
 1009474:	8cc00017 	ldw	r19,0(r17)
 1009478:	003fbd06 	br	1009370 <__alt_data_end+0xff497870>
 100947c:	9823883a 	mov	r17,r19
 1009480:	2027883a 	mov	r19,r4
 1009484:	003fba06 	br	1009370 <__alt_data_end+0xff497870>
 1009488:	dfc00a17 	ldw	ra,40(sp)
 100948c:	df000917 	ldw	fp,36(sp)
 1009490:	ddc00817 	ldw	r23,32(sp)
 1009494:	dd800717 	ldw	r22,28(sp)
 1009498:	dd400617 	ldw	r21,24(sp)
 100949c:	dd000517 	ldw	r20,20(sp)
 10094a0:	dcc00417 	ldw	r19,16(sp)
 10094a4:	dc800317 	ldw	r18,12(sp)
 10094a8:	dc400217 	ldw	r17,8(sp)
 10094ac:	dc000117 	ldw	r16,4(sp)
 10094b0:	dec00b04 	addi	sp,sp,44
 10094b4:	f800283a 	ret

010094b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10094b8:	defffd04 	addi	sp,sp,-12
 10094bc:	df000215 	stw	fp,8(sp)
 10094c0:	df000204 	addi	fp,sp,8
 10094c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10094c8:	0001883a 	nop
 10094cc:	e0bfff17 	ldw	r2,-4(fp)
 10094d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 10094d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10094d8:	10000226 	beq	r2,zero,10094e4 <_exit+0x2c>
    ALT_SIM_FAIL();
 10094dc:	002af070 	cmpltui	zero,zero,43969
 10094e0:	00000106 	br	10094e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 10094e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10094e8:	003fff06 	br	10094e8 <__alt_data_end+0xff4979e8>
